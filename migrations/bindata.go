// Code generated by go-bindata.
// sources:
// 000001_init.up.sql
// 000002_indexes.up.sql
// 000003_indexes.up.sql
// bindata.go
// migrations.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\xdf\xd6\x4a\x3b\x94\x69\xa0\x49\x3b\x21\xb4\x03\x07\x86\x84\xc6\xb9\x4a\x5b\xb7\xb3\x48\x9c\xc9\x49\x60\x7d\x7b\xd4\xa6\x53\x35\x60\xe2\xe6\xfa\xf3\xf7\x37\x89\x2b\xec\x88\xb7\x4a\xd5\x82\x3a\x20\x04\x5d\x19\x04\x6a\x81\x5d\x00\x3c\x93\x0f\x1e\xa2\x47\xf1\x2a\x53\x00\x30\xd6\x25\x35\x00\x50\x51\x47\x1c\xe0\x24\x64\xb5\xf4\xf0\x81\x3d\x3c\xbe\x1f\x5e\xcb\xe7\xfd\xd3\xdb\xee\x65\xb7\x3f\x80\x8e\xc1\x95\xc4\xb5\xa0\x45\x0e\xcb\xd1\x37\xae\x23\x1e\x0a\xf8\xd4\x52\x1f\xb5\x64\xab\xa2\xc8\x87\xef\xe1\x87\x1c\x8d\x49\x73\x68\x35\x99\xab\xb9\xbb\xa2\xc8\x13\x3b\x1d\x1d\xe3\x35\xbb\xbf\x20\xed\xfd\x97\x93\x66\x46\x0f\xeb\xfc\x47\x34\x6b\x9b\xec\x59\x5f\x6d\x26\xdf\x47\x99\xf0\x6f\xa6\xbb\x49\x03\xba\xdc\xc6\xe3\x79\x6a\x21\x47\x0b\xd9\xc2\x6a\x83\x8b\xe5\xa2\xc5\xb1\x98\xc4\xda\x45\x0e\xd2\xff\x19\x5a\x53\xe8\x6f\x1d\x86\x38\xa0\xe0\xb0\x81\xf9\xad\xd6\x9b\x5c\xa9\xfc\xff\x7d\x95\xad\x10\x72\x73\x63\x6b\x29\x3f\x8d\x0c\xfd\xd4\x4d\xb9\xce\x5a\x0a\x5b\xf5\x1d\x00\x00\xff\xff\x09\xe8\xcf\x40\x18\x02\x00\x00")

func _000001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initUpSql,
		"000001_init.up.sql",
	)
}

func _000001_initUpSql() (*asset, error) {
	bytes, err := _000001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init.up.sql", size: 536, mode: os.FileMode(436), modTime: time.Unix(1657142135, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_indexesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xcf\xcd\x4a\xc4\x30\x14\x05\xe0\x7d\x9e\xe2\x2c\x1d\xf0\x0d\xb2\xaa\x34\x42\x61\x18\xc1\xc9\xa2\xbb\x90\x36\xb7\xe5\x42\x9b\x40\x7e\xa0\xbe\xbd\xb4\x51\x11\xa5\xae\xdc\x9d\x7b\x38\x7c\x70\x07\x9a\xd9\x4b\x21\x9a\xab\x56\xaf\xd0\xcd\xd3\x55\xa1\x24\x8a\x49\x00\x40\xd3\xb6\xe8\x6e\xad\xea\xd1\x3d\xe3\xf6\xa2\xa1\xfa\xee\xae\xef\x75\x61\xbc\x5d\xc9\xb0\xdb\xf0\xb0\xa7\x47\xa4\x12\xf7\x70\x91\xbf\x34\x33\x45\x26\xef\xbe\x4c\xf6\x8e\x36\xf0\x04\x1f\x32\x68\xe3\x94\xd3\xf7\x5d\x32\x85\x5d\x95\x8f\x96\xdd\x7f\x98\xd3\xa7\x59\x8b\xaa\xda\x25\x53\x44\xb6\xc3\x42\x3f\xfe\x3e\xf3\x92\x59\xc2\xcc\xbe\x52\x47\x3c\x65\xac\x73\x7f\x30\x63\x28\x3e\xc7\xb7\x0a\x7d\x1c\x17\x29\xc4\x18\xd6\x95\xb3\x14\xef\x01\x00\x00\xff\xff\x52\x71\x2e\xd3\x9b\x01\x00\x00")

func _000002_indexesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_indexesUpSql,
		"000002_indexes.up.sql",
	)
}

func _000002_indexesUpSql() (*asset, error) {
	bytes, err := _000002_indexesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_indexes.up.sql", size: 411, mode: os.FileMode(436), modTime: time.Unix(1657834983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_indexesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x51\xcb\x6a\xc3\x30\x10\xbc\xeb\x2b\xe6\xe8\x40\xff\xc0\x27\x07\xab\xc5\x10\x9c\x62\xab\x90\x9b\x70\x22\x39\x2c\xd8\x32\x68\x65\x70\xff\xbe\x24\x4e\x5a\x91\xb8\x6d\x28\xbd\xad\x06\xcd\x63\x67\xf7\xf6\x48\x2e\x15\x22\xdb\x28\x59\x41\x65\xeb\x8d\xc4\xc8\xd6\x33\xf2\x6a\xfb\x8a\xa2\xcc\xe5\x6e\x06\xb4\x6b\x7a\xab\xc9\x4c\xe9\xdd\x67\xdd\x7a\xb2\xce\xcc\x14\x72\xc6\x4e\x31\xcc\x7a\x24\xf3\x37\x62\x7b\x25\x36\x5d\xb0\x1e\xa1\xd9\x77\x36\x8e\xf7\x45\x61\xdd\x0d\x47\x72\x0f\xff\x3e\x0c\xa3\x0b\xfe\x7d\x39\x16\x0b\x00\xc8\xf2\xfc\xb2\x7f\xf1\x8c\x72\xab\x20\x77\x45\xad\xea\x9b\x36\x90\x9c\xa6\x27\xf0\xe8\x4f\xc3\x0a\x6f\x75\x51\xbe\x60\xad\x2a\x29\xbf\x5d\xf8\x53\x7f\x8e\x44\x2d\xdc\x10\x60\x27\xe2\xc0\x8b\xd5\x21\x39\xa3\x64\x56\xf8\x67\x83\xf6\x6a\x30\x03\x0b\x16\x77\x6d\xfe\x2a\x1e\x1d\x03\xc9\x79\x7c\x4c\xb3\x31\xe6\x07\xcd\xe8\x64\x48\x2e\x8f\x5b\x5d\x21\x0e\x43\xdf\x53\x48\xc5\x47\x00\x00\x00\xff\xff\x2b\xce\x9e\xe7\xd9\x02\x00\x00")

func _000003_indexesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_indexesUpSql,
		"000003_indexes.up.sql",
	)
}

func _000003_indexesUpSql() (*asset, error) {
	bytes, err := _000003_indexesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_indexes.up.sql", size: 729, mode: os.FileMode(436), modTime: time.Unix(1658390002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdb\x8e\xdb\xc8\x11\x7d\x26\xbf\xa2\x57\xc0\x2e\xc4\x40\xd1\xf0\x7e\x11\x30\x2f\x6b\x3b\x80\x1f\xe2\x05\xb2\xde\xa7\x54\x30\x68\x92\xdd\x0a\x11\x49\x94\x49\x6a\x53\x33\xc6\xfc\x7b\x70\x58\x3d\x1a\xcd\xc5\xeb\x8d\x61\x03\x94\xc9\x66\x77\xd5\xa9\xdb\x39\x9c\xab\x2b\xf5\xa6\x6f\x8d\xda\x9a\x83\x19\xf4\x64\x5a\x55\xdf\xaa\x6d\xff\xd7\xba\x3b\xb4\x7a\xd2\x6b\xff\xea\x4a\x8d\xfd\x69\x68\xcc\xb8\xc1\x7d\x88\x7f\xd1\x4d\x77\xe8\xa6\xf5\xe9\xb8\x1e\x3f\xed\xce\xab\xf1\x4d\x77\x68\x0d\x9b\xf1\xf9\x8b\xe4\x95\x17\x0f\xf6\xb7\x3d\x9e\xf6\xdd\x76\xd0\x53\xd7\x1f\x46\xb7\xf0\xf6\x17\xf5\xe1\x97\x8f\xea\xdd\xdb\xf7\x1f\x7f\xf0\xfd\xa3\x6e\xfe\xa3\xb7\xe6\x62\x9b\xef\x77\xfb\x63\x3f\x4c\x6a\xe9\x7b\x8b\xfa\x76\x32\xe3\xc2\xf7\x16\x4d\xbf\x3f\x0e\x66\x1c\xaf\xb6\x77\xdd\x11\x0b\x76\x3f\xe1\xbf\xae\x97\xdf\xab\xae\x3f\x4d\xdd\x0e\x0f\xfd\x7c\xe0\xa8\xa7\x7f\x5f\xd9\x6e\x67\x70\x83\x85\x71\x1a\xba\xc3\x76\x7e\x37\x75\x7b\xb3\xf0\x03\xdf\xb7\xa7\x43\xf3\x80\xf7\x1f\x46\xb7\x4b\xdc\xa8\x7f\xfe\x0b\x6e\x57\xea\xa0\xf7\x46\xc9\xb1\x40\x2d\x1f\x56\xcd\x30\xf4\x43\xa0\x3e\xfb\xde\xf6\x6e\x7e\x52\x9b\x6b\x05\x54\xeb\x0f\xe6\xbf\x30\x62\x86\xe5\x0c\x1b\xcf\x3f\x9f\xac\x35\xc3\x6c\x36\x08\x7c\xaf\xb3\xf3\x81\x1f\xae\xd5\xa1\xdb\xc1\x84\x37\x98\xe9\x34\x1c\xf0\xb8\x52\x76\x3f\xad\xdf\xc1\xba\x5d\x2e\x60\x48\xfd\xf8\x69\xa3\x7e\xfc\x7d\x21\x48\x66\x5f\x81\xef\xdd\xfb\xbe\xf7\xbb\x1e\x54\x7d\xb2\x4a\xfc\x88\x13\xdf\xbb\x11\x38\xd7\xaa\xeb\xd7\x6f\xfa\xe3\xed\xf2\xa7\xfa\x64\x57\x6a\x7b\x17\xf8\x5e\xb3\x7b\xf7\x80\x74\xfd\x66\xd7\x8f\x66\x19\xf8\xdf\x0b\x0f\xcc\x88\xfd\x2f\x18\x32\xc3\x20\xb8\xdd\x62\x7d\xb2\xeb\x9f\x01\x7d\x19\xac\xb0\xc3\xbf\xf7\xfd\xe9\xf6\x68\x94\x1e\x47\x33\x21\xe5\xa7\x66\x82\x95\x39\x3e\x57\x0f\xdf\xeb\x0e\xb6\x57\xaa\x1f\xd7\x7f\xeb\x76\xe6\xfd\xc1\xf6\xe7\x73\xae\x84\x0f\xeb\x17\x16\xe6\x1a\x2a\xe5\xca\xe8\x7b\x63\x77\x37\x3f\x77\x87\x29\x4f\x7d\x6f\x8f\x01\x51\x67\xa3\x7f\xef\x5b\x33\x2f\x7e\xec\xf6\x46\xa1\x4d\xd6\xb8\x83\x9f\xb9\x55\x96\xb6\x7b\xee\x2b\x50\x1f\xf4\xde\x2c\x03\xe7\x01\x3e\x5d\x94\xb6\x5b\xc3\xbb\x7f\xff\x07\x67\x7f\xed\xee\x70\x76\x46\xf3\xf4\x28\x80\xfe\xe1\x51\x60\x5d\x06\x97\xc8\x9f\x1a\x40\x68\x5f\x33\x80\xe0\x96\xc1\x63\xa0\x2f\x2c\xb8\xe8\xbf\x6c\xe4\xfd\xf8\xb6\x1b\x96\x81\xaa\xfb\x7e\x77\x79\x5a\xef\xc6\xaf\x44\x7e\x3b\x4a\xe0\x66\xb0\xba\x31\x9f\xef\x2f\x4e\xbb\x96\x40\x97\xdf\xdc\x5c\xd0\xd2\x6f\xc7\x5f\x3f\xed\xd4\xb5\x6b\x88\xe5\x82\x38\xb2\xc4\x65\x4d\x1c\x96\xc4\x61\xf8\xfa\x65\xb1\x27\x25\xae\x22\xe2\x26\x22\x4e\x0d\x71\x93\x10\x27\x78\xdf\x10\x97\x39\xb1\xb1\xc4\x45\x45\x1c\x6a\xe2\xd6\x12\xb7\x39\x71\xaa\x89\x93\x9a\xb8\x4a\x89\xf3\x8a\x58\x87\xc4\x69\x25\x6b\x71\x44\x5c\xa7\xc4\x61\x42\x1c\x16\x62\x03\x3e\x9a\x9c\xb8\xae\xe4\x6c\x56\x13\xd7\x05\x71\x9d\x10\xa7\x25\x71\xd5\x10\x37\x95\xd8\xc8\x43\xe2\xa2\x25\x2e\x6a\xe2\x36\x25\xd6\x39\x71\x06\x4c\x99\xbc\x33\x31\xb1\xc9\x89\xad\x26\xb6\x09\xb1\x2d\x88\x13\xf8\xa9\x88\xe3\x9a\xd8\x00\x77\x29\xf6\xe1\xab\xcd\x88\xcb\x98\x38\xd1\xc4\x31\xe2\x4a\x89\xb3\x96\x38\xaa\xe4\x3e\xd7\xc4\x65\x24\x6b\xc8\x49\xd2\x10\x57\xc0\x6e\x89\x23\x43\xac\x63\xe2\xb4\x20\xb6\x11\x71\xac\x05\xcb\xbc\x2f\x94\x5c\xc4\x99\x60\xc3\x5a\x86\x2b\x92\xfd\x51\x43\x6c\x42\xe2\x18\x3e\x52\xe2\x3a\x23\xb6\x29\xb1\x0d\xc5\x5f\xd2\x8a\xaf\xda\x48\xad\x32\xe4\x1e\xf8\xe1\xab\x25\x6e\x13\xe2\x16\xcf\x86\x38\xcf\x24\x9e\x04\xf5\xc2\x79\x23\xf5\xaa\x32\xe2\xc6\xd9\x9e\x6b\x00\x1c\xce\x4e\x1b\x49\x5e\xb4\x21\x8e\x13\x89\x05\x35\xb4\xa5\xe4\x35\x8b\xc5\x2f\xce\x02\x9f\xae\x25\xd6\xa6\x24\x2e\x0b\xa9\xbb\x89\xe4\x1e\xb1\x94\xad\xd4\xa7\x48\x88\xf3\x52\x62\xae\x2a\x39\x87\xba\xd6\x17\xe7\xa3\x44\x7a\x21\x6a\xe5\x32\xae\x7e\xd8\x53\x5b\xa9\x83\x69\x25\xce\xaa\x90\x7c\xe7\xe8\xab\x5c\xf2\x6e\x6a\x62\xdb\x48\x1e\x13\xe4\x0f\xbd\xe6\x6a\x9b\x55\xc4\x99\x25\xce\x5b\xe2\x38\x97\x9e\xc4\x3e\x60\x41\x6e\x73\x2b\x3d\x03\x5f\xc0\x8b\x3e\xac\xd1\x07\x8d\xf4\x20\xb0\xa0\x9f\x51\xf7\xd8\xd5\x2a\x44\xbe\x2a\xe2\x26\x76\xfd\x90\xc8\xec\x98\xcc\xc5\x04\xec\xc8\x77\x29\xf9\x6e\xf5\x63\xae\xdb\x58\xe6\x08\xfd\x94\xb9\xfe\x30\xa5\xe0\x40\xec\xe8\xff\xa4\x94\xfa\xa0\x1f\x6a\x57\x7f\x8b\xdc\xb5\xd2\x43\x88\x2d\x6b\x88\x75\x25\x71\xc3\x1e\x66\x00\xf5\xc5\x9e\x08\x33\x11\xbb\xdc\x27\x92\x8f\xb8\x72\xfd\xd0\xca\xac\xce\x3d\x93\x12\xa7\xad\xd4\xa3\x31\x82\x27\x74\xf3\x66\x33\xc1\x73\x39\xfb\xb8\xc2\x4a\xf0\x36\xc8\x63\x48\x1c\x81\x2f\xe2\x87\x7d\x8b\x87\x4f\x81\x17\x64\xe3\x54\xea\x35\xf5\x7f\xd0\xb2\x8b\xaf\x07\xdf\xf3\x5e\xf2\xd5\xca\xf7\xbc\xc5\xcb\x6f\xab\xc5\xca\xf7\x82\xb3\xb0\xbc\x38\x05\x9f\x7f\x99\xe5\xf0\xd2\xe7\xac\x87\xe7\x8f\x8e\x2f\xa1\xfd\x9a\xae\x9f\xe5\x78\x16\xd4\xcd\xf5\x73\x72\xfe\x0c\xd9\xda\xa8\x57\x41\x2b\xe8\xd2\x46\x65\x49\xbe\x52\x50\x98\xcd\xa5\x00\x2d\xd3\x24\x0f\xe6\x75\xe8\xc6\x46\x74\xe5\xb7\x43\xc7\xcb\x28\xcf\x8a\x28\x8d\xa3\x24\x5b\xa9\x30\xb8\xf7\x3d\x0d\xbf\x3f\xcd\x01\x7e\x9e\xa3\xda\x28\x17\x1c\x40\x6d\xe6\xdf\xfb\x73\x92\xf5\xea\x15\x4d\x38\x7f\x94\x7e\xbb\x2c\xe8\x46\x5a\xa2\x69\x85\x46\xd1\xf6\xa0\xbc\x08\xd4\x9e\x49\x2b\xcf\x2d\x6a\x84\x92\xe3\x46\xda\x0b\x23\x18\xa2\x05\x63\x62\xad\x65\x7c\x53\x8c\x55\x24\xad\x05\xda\x02\xd5\x63\xac\x30\xa2\x15\xa8\x34\x17\x7a\xc3\xb8\x61\x2f\xc6\x01\xad\x58\x18\x19\x1b\x50\x64\xdd\x8a\xac\x80\x5e\xa3\x88\x58\x67\x42\x6d\x18\xeb\xca\xc9\x05\xc6\xac\x68\x88\x8b\x50\xa4\xa7\xd2\x32\xd6\xa9\x93\x25\x3c\x83\xae\xb2\x9c\x58\x43\xca\x42\x89\x0f\x54\x9b\xc1\x5e\x24\x74\x5d\x6a\x47\x1d\xa1\xe0\xc0\xfb\x3a\x77\x63\x6d\x64\x24\x8d\x76\x14\xeb\xe8\xcd\xe6\x12\x13\x6c\x40\x9a\x40\xdb\xc0\x37\xcb\x67\x26\xf1\xd7\x8d\xc8\x0c\xe2\x07\x0d\x80\xde\xad\xa3\x04\x5d\x08\x15\xe9\x94\x38\x8a\x45\xd6\x10\x07\xa4\x19\x94\x89\x3c\x26\x89\xd0\x4e\xec\x64\x19\x79\x49\x1b\xf1\x0d\x49\x40\x1e\xad\x93\x38\xd4\x39\x89\x85\xaa\x81\x0f\x52\xdd\x3a\xb9\x04\x06\xbc\x2b\x33\xb9\x07\xcd\x94\x96\xb8\x02\x9d\x22\x97\x56\xa8\x0e\xfb\x81\x0b\x94\x8b\x9e\x41\x3d\x41\x7d\x90\x3c\xd0\x5c\x9a\x4a\x5e\xf0\xc9\x80\xba\x81\x8e\x2c\x70\x18\x91\xe6\x2a\x96\xb3\xa0\xd5\xc6\x49\x5d\xe6\xe4\x14\xd2\x07\x59\x43\x9f\x81\xd6\xe0\x13\xfd\x05\x7a\x8b\x4b\xb1\xd1\x14\xd2\x17\xa0\x30\xf4\x1a\x64\x28\x2a\x84\xfa\xd0\x8f\xe8\xa7\x99\x3e\x33\xf9\x94\x40\x6f\x22\x2f\x61\xf4\x92\xe6\xe0\xb7\x40\x7d\x8d\xc4\x85\x1e\x7b\xdc\xf7\x8c\xe6\x9e\xce\xcf\xb7\x32\xdd\x53\x2b\x8f\x64\xf7\xfc\x4f\xc6\xd7\xf8\xee\xe9\xd9\x3f\x4f\x79\xaf\x22\xff\xae\xac\xf7\x12\xbd\x23\xbe\x34\x8a\xfe\x6f\xe2\x2b\x93\xb4\x2a\x93\xef\x47\x7c\xc9\x9f\x23\xbe\xff\x05\x00\x00\xff\xff\xc5\x5a\x4e\x4b\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(436), modTime: time.Unix(1658390002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\xb1\x0d\xc5\x20\x0c\x04\xd0\x9e\x29\x6e\x01\xa0\xff\xdb\xdc\x4f\xac\x13\x42\xb1\x11\xf1\xfe\x4a\x93\x22\xf5\x7b\x8b\xc7\xa4\x0c\xd7\xd0\x66\x8e\xf0\xbb\x94\xde\x15\x3f\x99\xdb\x66\x1a\x14\xf5\x3f\xfc\x64\x12\x75\x4d\x7d\x26\x6a\xe0\xa5\xa6\x00\x5a\x79\x02\x00\x00\xff\xff\xe6\x24\xd8\x86\x4e\x00\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 78, mode: os.FileMode(436), modTime: time.Unix(1656363775, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init.up.sql":    _000001_initUpSql,
	"000002_indexes.up.sql": _000002_indexesUpSql,
	"000003_indexes.up.sql": _000003_indexesUpSql,
	"bindata.go":            bindataGo,
	"migrations.go":         migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init.up.sql":    &bintree{_000001_initUpSql, map[string]*bintree{}},
	"000002_indexes.up.sql": &bintree{_000002_indexesUpSql, map[string]*bintree{}},
	"000003_indexes.up.sql": &bintree{_000003_indexesUpSql, map[string]*bintree{}},
	"bindata.go":            &bintree{bindataGo, map[string]*bintree{}},
	"migrations.go":         &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
