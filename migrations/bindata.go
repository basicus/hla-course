// Code generated by go-bindata.
// sources:
// 000001_init.up.sql
// 000002_indexes.up.sql
// 000003_indexes.up.sql
// 000004_posts.up.sql
// 000005_collate.up.sql
// 000006_charset.up.sql
// 000007_dtupdate.up.sql
// 000008_delupd.up.sql
// bindata.go
// migrations.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\xdf\xd6\x4a\x3b\x94\x69\xa0\x49\x3b\x21\xb4\x03\x07\x86\x84\xc6\xb9\x4a\x5b\xb7\xb3\x48\x9c\xc9\x49\x60\x7d\x7b\xd4\xa6\x53\x35\x60\xe2\xe6\xfa\xf3\xf7\x37\x89\x2b\xec\x88\xb7\x4a\xd5\x82\x3a\x20\x04\x5d\x19\x04\x6a\x81\x5d\x00\x3c\x93\x0f\x1e\xa2\x47\xf1\x2a\x53\x00\x30\xd6\x25\x35\x00\x50\x51\x47\x1c\xe0\x24\x64\xb5\xf4\xf0\x81\x3d\x3c\xbe\x1f\x5e\xcb\xe7\xfd\xd3\xdb\xee\x65\xb7\x3f\x80\x8e\xc1\x95\xc4\xb5\xa0\x45\x0e\xcb\xd1\x37\xae\x23\x1e\x0a\xf8\xd4\x52\x1f\xb5\x64\xab\xa2\xc8\x87\xef\xe1\x87\x1c\x8d\x49\x73\x68\x35\x99\xab\xb9\xbb\xa2\xc8\x13\x3b\x1d\x1d\xe3\x35\xbb\xbf\x20\xed\xfd\x97\x93\x66\x46\x0f\xeb\xfc\x47\x34\x6b\x9b\xec\x59\x5f\x6d\x26\xdf\x47\x99\xf0\x6f\xa6\xbb\x49\x03\xba\xdc\xc6\xe3\x79\x6a\x21\x47\x0b\xd9\xc2\x6a\x83\x8b\xe5\xa2\xc5\xb1\x98\xc4\xda\x45\x0e\xd2\xff\x19\x5a\x53\xe8\x6f\x1d\x86\x38\xa0\xe0\xb0\x81\xf9\xad\xd6\x9b\x5c\xa9\xfc\xff\x7d\x95\xad\x10\x72\x73\x63\x6b\x29\x3f\x8d\x0c\xfd\xd4\x4d\xb9\xce\x5a\x0a\x5b\xf5\x1d\x00\x00\xff\xff\x09\xe8\xcf\x40\x18\x02\x00\x00")

func _000001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initUpSql,
		"000001_init.up.sql",
	)
}

func _000001_initUpSql() (*asset, error) {
	bytes, err := _000001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init.up.sql", size: 536, mode: os.FileMode(436), modTime: time.Unix(1657142135, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_indexesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xbb\xca\x83\x40\x10\x46\xfb\x7d\x8a\x29\x7f\xe1\x7f\x83\xad\x0c\x5a\x04\x24\x45\xb0\x48\xb7\xac\xce\x28\x03\xba\x0b\x7b\x01\xf3\xf6\x41\x27\xf7\x90\x26\xdd\xb7\x67\x39\x07\xa6\xa3\x91\x9d\x56\xaa\x6c\xda\xfa\x08\x6d\xb9\x6b\x6a\xc8\x91\x42\x54\x00\x00\x65\x55\xc1\xfe\x50\xd5\x27\x61\xc6\xd9\x99\x0c\xe3\x02\x7f\xeb\xfa\x87\x98\xc3\x3a\x0a\xfd\xe1\x9b\x21\x30\x39\xbc\x57\xd8\x21\x2d\xcf\x3f\xd1\x64\x46\x69\x6d\x94\xf1\xb7\xca\x70\xab\x08\x90\x8e\x9d\x12\x05\x48\xb6\x9b\xe8\xed\x9a\x47\x21\x9a\xc9\x8f\xec\x44\xde\xe6\x57\xd1\x22\xbe\x88\xbd\xcf\x2e\x85\xb3\xa8\xd7\x47\xa1\x95\xea\xfd\x3c\x73\xd2\xea\x12\x00\x00\xff\xff\x31\x64\x7b\xe9\x55\x01\x00\x00")

func _000002_indexesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_indexesUpSql,
		"000002_indexes.up.sql",
	)
}

func _000002_indexesUpSql() (*asset, error) {
	bytes, err := _000002_indexesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_indexes.up.sql", size: 341, mode: os.FileMode(436), modTime: time.Unix(1659556182, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_indexesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xcd\x8a\x83\x30\x1c\xc4\xef\x79\x8a\xff\x31\xc2\xbe\x81\x27\x25\x61\x11\xc4\x5d\x5c\x17\x7a\x0b\x6a\xa2\x04\x34\x42\x3e\xa0\x7d\xfb\xe2\x17\x95\x54\xc1\xb6\xb7\xc9\x30\xf3\x23\xff\xa9\x44\x2b\x55\x88\x50\x94\x16\x34\x87\x22\x8a\x53\x0a\xce\x08\x6d\x80\xe4\x3f\xbf\x90\x64\x84\x5e\x66\x83\xa9\xb2\x17\x4c\xf2\x6b\xf8\x14\x66\x8d\x96\x42\x71\xbf\xb2\xd8\x86\x39\xc9\xdf\x2b\x36\x6b\xb1\xec\xac\xd0\x60\xcb\xaa\x13\x47\xdf\xeb\x86\x56\xaa\xd3\xe9\x7a\x70\xca\xea\xdb\xfe\xb7\x0c\x44\x84\x2c\x71\xef\x78\xc0\xa3\xfa\x02\xe3\xf4\x28\x02\xf8\xff\x4b\xb2\x6f\x88\x8b\x9c\xd2\xe3\xfb\x1e\xb8\xbd\x5d\x00\x4f\xae\xe4\x01\x7c\x84\x6b\x56\xdc\x6c\x9c\x00\x1a\x0f\xb5\x59\x11\xf0\x24\x5f\x27\x6c\x96\x05\xbc\x3c\x7c\x0a\xaa\x87\xbe\x97\x36\x44\xf7\x00\x00\x00\xff\xff\x1c\x37\x60\x12\x7f\x02\x00\x00")

func _000003_indexesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_indexesUpSql,
		"000003_indexes.up.sql",
	)
}

func _000003_indexesUpSql() (*asset, error) {
	bytes, err := _000003_indexesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_indexes.up.sql", size: 639, mode: os.FileMode(436), modTime: time.Unix(1659556435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000004_postsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x31\x6b\xf3\x30\x10\x86\x77\xfd\x8a\x77\x8c\x21\x43\xf8\xf8\x86\x42\x26\x25\x56\x8b\x21\x71\x82\x23\x43\x37\x21\xc7\xd7\x54\xd4\xb6\x82\x74\x29\xc9\xbf\x2f\xb6\x3c\xb4\x94\x6a\xd3\xab\x7b\x8e\xe7\x74\x0d\x5d\xdc\xb0\x16\xe2\x1c\xc8\x32\x81\x6d\xd3\x11\xdc\x1b\x06\xcf\xa0\xbb\x8b\x1c\x71\xf5\x91\xa3\x58\x08\x00\x70\x2d\xe6\xd3\xb8\x8b\x1b\x18\xd7\xe0\x7a\x1b\x1e\xf8\xa0\x07\x64\xad\x0f\xa6\x28\xb7\x95\xda\xab\x52\xc3\xde\xd8\x1b\x37\x9c\x03\xf5\x34\xf0\x72\xe2\x6f\x91\x82\x99\x9a\x24\x3e\xa5\xec\xb8\xa3\xa9\xeb\xa7\x0d\xe7\x77\x1b\x16\xff\x56\xab\x6c\x72\x18\x6e\x5d\x97\x8a\x7a\x8a\xd1\x5e\xe8\x47\xd1\xff\xa7\x2c\x3d\x26\xfd\xd6\x58\x46\x2e\xb5\xd2\xc5\x5e\x21\x57\xcf\xb2\xde\x69\x6c\xeb\xaa\x52\xa5\x36\x63\x78\xd2\x72\x7f\x9c\x55\xae\xed\x2f\xe4\x50\xa2\x3e\x8e\xb7\xbf\xa0\x96\x3a\x62\x6a\xd1\x78\xdf\x89\x6c\x2d\x84\xdc\x69\x55\x41\xcb\xcd\x4e\xa5\x8f\x82\xcc\x73\x14\x65\xae\x5e\x91\x02\x33\xce\x1c\x8d\x6b\xef\x58\xcc\xe3\x2f\xbf\xf9\x66\xa8\x4f\x45\xf9\x82\x8d\xae\x94\x1a\x17\xe1\xfb\xde\xf1\x5a\x7c\x05\x00\x00\xff\xff\x4a\x02\x7b\x0d\x99\x01\x00\x00")

func _000004_postsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_postsUpSql,
		"000004_posts.up.sql",
	)
}

func _000004_postsUpSql() (*asset, error) {
	bytes, err := _000004_postsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_posts.up.sql", size: 409, mode: os.FileMode(436), modTime: time.Unix(1659735067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000005_collateUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xca\x31\x0e\x80\x20\x0c\x05\xd0\xbd\xa7\xe8\x21\x1c\x4c\x88\x67\x21\x50\xab\x69\x52\xa8\x81\xcf\xfd\x9d\x9d\xdc\x5f\xd5\xdb\x7a\x22\x2a\x0e\x1d\x8c\x52\x5d\xf9\x89\x89\xc9\x12\xee\x05\xca\x07\x2f\x5c\x7b\xab\x5b\x5e\xdd\x24\x4e\xcd\x62\xe9\xe3\xd7\xd4\xf1\xe7\x49\xa2\x35\x43\x22\xa2\x37\x00\x00\xff\xff\xc3\xbe\x04\xae\x73\x00\x00\x00")

func _000005_collateUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_collateUpSql,
		"000005_collate.up.sql",
	)
}

func _000005_collateUpSql() (*asset, error) {
	bytes, err := _000005_collateUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_collate.up.sql", size: 115, mode: os.FileMode(436), modTime: time.Unix(1659904305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000006_charsetUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xce\xbd\x4a\xc6\x30\x14\xc6\xf1\x3d\x57\x71\x46\xdd\x8a\x74\x28\x14\x87\x18\x03\x0e\xc5\x42\x1b\x5c\x4b\x9a\x9e\xd6\x48\x3e\x4a\x72\x22\x78\xf7\xa2\x0e\x4a\x91\xbe\xcb\xbb\x3e\x0f\xfc\xf8\xcf\xb8\xd9\xd0\x32\xc6\x3b\x25\x07\x78\xe4\x8a\x3f\xf0\x51\xc2\x9e\xe2\x1b\x1a\x02\xf1\xc4\x07\x2e\xbe\xae\x51\x2a\xb8\x87\x42\x6b\xe3\xe7\x1a\x44\xdf\x75\x5c\xc9\xdf\x65\x2a\xc1\x9a\xb8\xe0\x64\x6c\xcb\xb4\x23\x4c\x40\x7a\x76\x08\x7b\xcc\x94\x41\xf4\xcf\x2f\x72\x50\xa0\xfa\x03\x79\x04\x2f\x71\x25\x63\xba\x22\xf7\x53\xe7\xe3\x62\xd7\x0f\x20\x4b\x0e\xe1\x5d\x27\xf3\xaa\xd3\xcd\x5d\x55\xdd\x82\x89\xce\x69\xc2\x7f\x1c\x08\x91\x20\x14\xe7\x4e\x40\x8f\x39\xeb\xed\x2f\x59\x37\xe7\xe6\xb7\x67\xa2\xf7\x96\x5a\xc6\xd8\x67\x00\x00\x00\xff\xff\x2a\x15\x86\x74\x9e\x01\x00\x00")

func _000006_charsetUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000006_charsetUpSql,
		"000006_charset.up.sql",
	)
}

func _000006_charsetUpSql() (*asset, error) {
	bytes, err := _000006_charsetUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000006_charset.up.sql", size: 414, mode: os.FileMode(436), modTime: time.Unix(1659904721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000007_dtupdateUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x4b\x0a\x02\x31\x10\x84\xe1\x7d\x9f\xa2\x97\x7a\x86\xe0\x59\x86\x9e\xa4\xd4\x40\xe7\x41\x52\xc1\xeb\x8b\x8c\xe2\x6c\x8b\xbf\xbe\x1d\x8f\x5c\x83\x88\x98\x13\x43\x69\xbb\x43\x7b\x9b\x9c\xaa\xc7\x14\x9b\xaf\x52\x75\xf5\x64\x44\xda\x8c\x3a\x41\x4d\xb8\xdb\x72\x6a\x5c\x63\xa0\x72\x63\x2e\x98\xb4\xd2\x2f\xd7\x20\x47\xfb\x65\x3e\xf5\xff\x7c\x8b\x03\x3f\xe7\xf5\xc4\xc0\x19\xce\x53\xeb\x72\x0f\x22\xb1\x95\x92\x19\xde\x01\x00\x00\xff\xff\xab\x03\x95\x78\x9e\x00\x00\x00")

func _000007_dtupdateUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000007_dtupdateUpSql,
		"000007_dtupdate.up.sql",
	)
}

func _000007_dtupdateUpSql() (*asset, error) {
	bytes, err := _000007_dtupdateUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000007_dtupdate.up.sql", size: 158, mode: os.FileMode(436), modTime: time.Unix(1659905446, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000008_delupdUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\xc1\xad\x02\x31\x0c\x84\xe1\xbb\xab\x98\x3e\xa2\x57\x4c\xf2\x3c\x81\x48\x4e\xbc\x5a\x3b\x42\x74\xcf\x01\x96\x02\xb8\xff\xf3\x4d\xe3\x6d\xac\x22\x22\xd5\x92\x27\xb2\x36\x23\x0e\x8f\x0c\x01\x80\xe9\x3a\xfa\x13\x4a\x63\x52\xd1\xdc\x0d\xca\x5e\xb7\x25\x7a\xb5\x60\x91\x7d\x68\xcd\x6b\x13\xcc\x2b\xfe\x7b\x07\xf2\xb8\xf3\xe4\x57\x18\x81\xb5\xcd\xca\xaf\x7f\x58\x9e\x1f\x41\xfe\x7d\xce\x91\xe5\x15\x00\x00\xff\xff\x5f\x20\x90\xba\xc3\x00\x00\x00")

func _000008_delupdUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000008_delupdUpSql,
		"000008_delupd.up.sql",
	)
}

func _000008_delupdUpSql() (*asset, error) {
	bytes, err := _000008_delupdUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000008_delupd.up.sql", size: 195, mode: os.FileMode(436), modTime: time.Unix(1659906006, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x99\x5b\x6f\xe3\x46\x12\x85\x9f\xc5\x5f\xc1\x18\x48\x20\x2d\xbc\x36\xef\x17\x03\xf3\x92\xcb\x02\x79\xd8\x04\xd8\x24\x4f\xdb\x0b\xa3\x49\x36\x1d\x62\x65\xc9\x91\xe4\x6c\xcf\x0c\xe6\xbf\x2f\xbe\xae\x92\x2d\x5b\x72\x2e\x8e\x07\xd0\x58\xa2\xd8\xd5\x55\xd5\x55\xe7\x9c\xa2\x2e\x2f\xe3\xaf\xd6\x83\x8b\x6f\xdc\xca\x6d\xec\xce\x0d\x71\xf7\x3e\xbe\x59\xff\xbd\x9b\x56\x83\xdd\xd9\x8b\xe8\xf2\x32\xde\xae\xef\x37\xbd\xdb\x5e\xf1\x3e\xe1\x5f\x7a\x3d\xad\xa6\xdd\xc5\xfd\xdd\xc5\xf6\x97\xe5\xc3\xd5\xec\x7a\x5a\x0d\xce\xbb\xed\xf3\x2f\xf2\x97\xbe\x28\xae\xef\xd6\xdb\xdd\xd1\xe5\xf2\xba\x5f\x2f\x97\x76\xe7\x9e\x7f\x51\x5d\xf7\x3f\xdb\xcd\xd6\x1d\x6d\x5d\x5f\x0f\xbb\xfb\xbb\xe1\xc4\x92\xe6\x7a\x70\xcb\xfb\xbb\xe1\xe0\xfa\x3e\xb4\x9b\x35\x9f\x6e\xa7\x9b\x8d\xdd\x4d\xeb\xd5\x56\x2f\x7c\xfd\x7d\xfc\xdd\xf7\x3f\xc6\xdf\x7c\xfd\xed\x8f\x9f\x45\xd1\x9d\xed\xff\x6b\x6f\xdc\xc1\x6d\x51\x34\xdd\xde\xad\x37\xbb\x78\x1e\xcd\xce\xba\xf7\x3b\xb7\x3d\x8b\x66\x67\xfd\xfa\xf6\x6e\xe3\xb6\xdb\xcb\x9b\x0f\xd3\x1d\x17\xc6\xdb\x1d\x7f\xa6\xb5\xfc\x7f\x39\xad\xef\x77\xd3\x92\x0f\xeb\xb0\xe0\xce\xee\x7e\xbe\x1c\xa7\xa5\xe3\x0d\x17\xb6\xbb\xcd\xb4\xba\x09\xdf\xed\xa6\x5b\x77\x16\x2d\xa2\x68\xbc\x5f\xf5\x7b\x7f\xff\xe5\xec\x30\xe7\x4d\xfc\xef\xff\xb0\xed\x79\xbc\xb2\xb7\x2e\x96\x65\x8b\x78\xbe\xbf\xea\x36\x9b\xf5\x66\x11\x7f\x8c\x66\x37\x1f\xc2\xa7\xf8\xea\x5d\x8c\x57\x17\xdf\xb9\xff\x61\xc4\x6d\xe6\xc1\x6d\x3e\x7f\x79\x3f\x8e\x6e\x13\xcc\x2e\x16\xd1\x6c\x1a\xc3\x82\xcf\xde\xc5\xab\x69\x89\x89\xd9\xc6\xed\xee\x37\x2b\x3e\x9e\xc7\xe3\xed\xee\xe2\x1b\xac\x8f\xf3\x33\x0c\xc5\x9f\xff\x72\x15\x7f\xfe\xeb\x99\x78\x12\xf6\x5a\x44\xb3\x4f\x51\x34\xfb\xd5\x6e\xe2\xee\x7e\x8c\x65\x1f\xd9\x24\x9a\x5d\x8b\x3b\xef\xe2\x69\x7d\xf1\xd5\xfa\xee\xfd\xfc\x8b\xee\x7e\x3c\x8f\x6f\x3e\x2c\xa2\x59\xbf\xfc\x66\xef\xe9\xc5\x57\xcb\xf5\xd6\xcd\x17\xd1\x5b\xf9\x83\x19\xb1\xff\x82\x21\xb7\xd9\x88\xdf\x7a\xb1\xbb\x1f\x2f\xbe\xc4\xf5\xf9\xe2\x9c\x3b\xa2\x4f\x51\xb4\x7b\x7f\xe7\x62\xbb\xdd\xba\x1d\x29\xbf\xef\x77\x58\x09\xf1\xe9\x79\x44\xb3\x69\x35\xae\xe3\x78\xbd\xbd\xf8\xc7\xb4\x74\xdf\xae\xc6\xf5\xc3\x3a\x3d\xc2\xfd\xf5\x03\x0b\xe1\x0c\xe3\x58\x8f\x31\x9a\x6d\xa7\x0f\xe1\xf3\xb4\xda\x55\x45\x34\xbb\xa5\x37\xe3\x07\xa3\xff\x5c\x0f\x2e\x5c\xfc\x71\xba\x75\x31\x65\x72\xc1\x3b\xf6\x09\xa5\x32\x1f\xa7\xe7\x7b\x2d\xe2\xef\xec\xad\x9b\x2f\x74\x07\xf6\xd4\x28\xc7\xe9\x82\xdd\xa3\x4f\xbf\xb1\xf6\x87\xe9\x03\x6b\x83\x37\x4f\x97\xe2\xe8\x6f\x2e\xc5\xd7\xf9\xe2\xd0\xf3\xa7\x06\x08\xed\xf7\x0c\x10\xdc\x7c\xf1\x18\xe8\x91\x05\x8d\xfe\x65\x23\xdf\x6e\xbf\x9e\x36\xf3\x45\xdc\xad\xd7\xcb\xc3\xd5\x76\xb9\xfd\x9d\xc8\xdf\x6f\x25\x70\xb7\x19\x6d\xef\x3e\x7e\x3a\x58\xad\x25\x41\x95\x5f\x5f\x1f\x20\xe2\x4f\x77\x3f\xfc\xb2\x8c\xdf\x69\x41\xcc\xcf\x8c\x4f\x47\xe3\x9b\xce\xf8\xa4\x31\x3e\x49\x4e\xbf\x46\xee\x29\x8c\x6f\x53\xe3\xfb\xd4\xf8\xc2\x19\xdf\xe7\xc6\xe7\x7c\xdf\x1b\xdf\x54\xc6\xbb\xd1\xf8\xba\x35\x3e\xb1\xc6\x0f\xa3\xf1\x43\x65\x7c\x61\x8d\xcf\x3b\xe3\xdb\xc2\xf8\xaa\x35\xde\x26\xc6\x17\xad\x5c\xcb\x52\xe3\xbb\xc2\xf8\x24\x37\x3e\xa9\xc5\x06\x7b\xf4\x95\xf1\x5d\x2b\x6b\xcb\xce\xf8\xae\x36\xbe\xcb\x8d\x2f\x1a\xe3\xdb\xde\xf8\xbe\x15\x1b\x55\x62\x7c\x3d\x18\x5f\x77\xc6\x0f\x85\xf1\xb6\x32\xbe\xc4\xa7\x52\xbe\x73\x99\xf1\xae\x32\x7e\xb4\xc6\x8f\xb9\xf1\x63\x6d\x7c\xce\x3e\xad\xf1\x59\x67\xbc\xc3\xef\x46\xec\xb3\xd7\x50\x1a\xdf\x64\xc6\xe7\xd6\xf8\x8c\xb8\x0a\xe3\xcb\xc1\xf8\xb4\x95\xf7\x95\x35\xbe\x49\xe5\x1a\x39\xc9\x7b\xe3\x5b\x7c\x1f\x8d\x4f\x9d\xf1\x36\x33\xbe\xa8\x8d\x1f\x53\xe3\x33\x2b\xbe\x84\xfb\x12\xc9\x45\x56\x8a\x6f\x5c\x2b\x79\xa5\x72\x7f\xda\x1b\xef\x12\xe3\x33\xf6\x28\x8c\xef\x4a\xe3\xc7\xc2\xf8\x31\x91\xfd\xf2\x41\xf6\xea\x9c\x9c\x55\x49\xee\xf1\x9f\xbd\x06\xe3\x87\xdc\xf8\x81\xcf\xce\xf8\xaa\x94\x78\x72\xce\x8b\xf5\x4e\xce\xab\x2d\x8d\xef\xd5\x76\x38\x03\xfc\x50\x3b\x43\x2a\x79\xb1\xce\xf8\x2c\x97\x58\x38\xc3\xb1\x91\xbc\x96\x99\xec\xcb\x5a\xfc\xb3\x9d\xc4\xda\x37\xc6\x37\xb5\x9c\xbb\x4b\xe5\x3d\xb1\x34\x83\x9c\x4f\x9d\x1b\x5f\x35\x12\x73\xdb\xca\x3a\xce\xb5\x3b\x58\x9f\xe6\x52\x0b\xe9\x20\x2f\xa7\xe7\xc7\x3d\xdd\x28\xe7\xe0\x06\x89\xb3\xad\x25\xdf\x15\x75\x55\x49\xde\x5d\x67\xfc\xd8\x4b\x1e\x73\xf2\x47\xad\xe9\xd9\x96\xad\xf1\xe5\x68\x7c\x35\x18\x9f\x55\x52\x93\xdc\x87\x2f\xe4\xb6\x1a\xa5\x66\xd8\x0b\x7f\xa9\xc3\x8e\x3a\xe8\xa5\x06\xf1\x85\x7a\xe6\xdc\x33\x3d\xab\x84\x7c\xb5\xc6\xf7\x99\xd6\x43\x2e\xbd\xe3\x4a\x8d\x09\xdf\xc9\x77\x23\xf9\x1e\xec\x63\xae\x87\x4c\xfa\x88\x7a\x2a\xb5\x3e\x5c\x23\x7e\x10\x3b\xf5\x9f\x37\x72\x3e\xd4\x43\xa7\xe7\x3f\x92\xbb\x41\x6a\x88\xd8\xca\xde\x78\xdb\x4a\xdc\xd8\xa3\x07\x38\x5f\xee\x49\xe9\x89\x4c\x73\x9f\x4b\x3e\xb2\x56\xeb\x61\x90\x5e\x0d\x35\x53\x18\x5f\x0c\x72\x1e\xbd\x13\x7f\x12\xed\xb7\xb1\x14\x7f\x0e\x7b\x9f\x57\xd2\x8a\xbf\x3d\x79\x4c\x8c\x4f\xc1\x8b\x6c\x7f\xdf\xd9\x5e\x0a\x1c\x81\x8d\xb2\xd4\x29\xf6\xdf\x73\xd9\x81\x7a\x88\x66\xb3\x63\xbc\x3a\x8f\x66\xb3\xb3\x63\x59\x77\x76\x1e\xcd\x16\x0f\xc4\x72\xb4\x8a\x3d\xff\x16\xe8\xf0\x70\xcf\xc0\x87\x0f\xa2\xe3\x25\x6f\x7f\x8f\xd7\x1f\xe8\x38\x10\xea\xd5\xbb\xe7\xe0\xfc\x11\xda\xba\x8a\x4f\x3a\x1d\xc3\x4b\x57\x71\x99\x57\xe7\x31\x0c\x73\x75\x48\x40\xf3\x22\xaf\x16\xe1\x3a\xbc\x71\x25\xbc\xf2\xd3\x6a\xf2\xf3\xb4\x2a\xeb\xb4\xc8\xd2\xbc\x3c\x8f\x93\xc5\xa7\x68\x66\xd9\xf7\x8b\x10\xe0\xc7\x10\xd5\x55\xac\xc1\xe1\xd4\x55\xf8\xff\xd3\x43\x92\xed\xf9\x09\x4e\x78\xd0\xc3\xaf\xa7\x05\x20\xb9\x19\xa5\x8d\x7a\x6d\x89\x50\x1e\x89\xb4\xe9\xd8\x49\x89\x36\x56\x4a\xb1\x56\xb8\xe0\x2f\xf7\x5a\x2d\xcb\x50\x82\x85\xc0\x20\x2d\x43\xf9\x17\x0a\xcf\xb6\x97\x32\xcd\x9a\xc7\x36\xa5\x15\x81\xfe\x24\x55\x78\x07\x16\x80\xde\x5a\xa0\xbe\x4d\xb4\xed\x07\xb1\x51\x01\x11\xad\x50\x0d\x6d\x6f\x73\xa1\xb3\x76\x30\xbe\xe4\xb3\x35\xbe\xea\xa5\x65\xa1\x0c\xe2\xae\xb4\x45\x68\x23\xda\x1d\xc8\x62\x4d\x91\x19\x5f\x16\x8f\x79\x00\x76\xcb\x52\xa0\x76\x74\x02\xef\xd0\x09\xbe\x54\xa9\xc0\x09\xb0\x01\xf4\x10\x2b\xd0\x42\xeb\xd4\x7b\x08\xb3\x02\x9f\x01\x36\x72\xa1\xa0\x00\xc1\x83\xe4\xaa\x55\xba\x84\x4a\x88\xa1\x23\x5f\xb5\xf1\x43\x23\xd7\xb3\x41\xda\x92\x36\x07\xce\x81\x69\x72\x0f\xe5\x12\x03\xf4\x0b\x2d\x91\x07\xce\xa8\x4e\x04\x8e\x89\xb1\x55\x9a\x20\x0f\x29\xed\x5c\x6a\xde\x15\x6e\x68\x79\x20\xb8\xb5\x02\x81\xec\xc7\x7b\x68\x98\x73\x07\x6a\x0b\xa0\xce\x09\xdd\x06\xbf\xf0\x29\x13\xca\x0a\x14\xab\xfe\x65\x7c\x2e\x85\xce\x2d\xf4\x52\x8b\x4d\xab\x14\xe5\x34\x66\xe8\x0e\x08\x03\x32\xb9\x96\x66\xc7\x70\x94\x6b\x9c\xd4\x80\x6b\x25\xff\xd4\xc2\x49\x38\x7a\x5a\xe7\xaf\x45\xa4\xa7\x56\x1e\x41\xe9\xf9\x54\x79\x0a\x97\x9e\xae\xfd\xe3\xd0\x74\xd2\xf3\x37\x45\xa7\x63\xef\x15\xa0\xf2\x22\xfd\xb3\x00\xd5\x96\x65\x95\x36\xd9\xdb\x01\x54\xfe\xd7\x01\xca\x16\x52\xe4\xbd\x82\x50\xa3\xba\x15\xad\x02\x47\xef\x75\x2b\xdf\xed\x0b\xab\xdf\x17\xaf\x02\x0a\xda\x8d\x46\x4e\x53\x59\x83\x06\x84\x87\xd3\xda\xf8\x5a\xc1\x08\x80\x40\x03\x00\x62\x68\x11\x40\x22\x77\xc2\xe7\x00\x20\x40\x88\x26\x65\x0d\xc5\x0e\x80\x00\x18\x34\x5a\x68\xcc\x56\xfc\x02\xcc\xd0\x61\xc1\xf7\x56\x9a\x0b\xbd\x4a\x81\xd3\x4c\x80\x0b\x0d\x9d\x56\xb2\x0f\xc0\x41\xb3\x35\x7b\xcd\x69\x05\x2c\xf7\x00\x86\x0e\x74\x85\x80\x03\x9a\x8a\x5c\xd0\x38\x68\x6d\xb4\x24\x7a\x2a\x00\x31\xc0\xa2\xfe\x15\xe8\x84\x4c\x80\x0f\x1d\x98\x16\x7a\x1f\x40\x50\x49\x6c\x75\x2a\xf6\x58\x03\x10\x05\xfd\xd2\x4a\x1c\x68\x2d\x7c\xce\x2b\xb1\x81\x26\x02\x28\x00\xf2\x21\x11\x7d\x8e\xf6\x04\x74\xd1\x80\x80\xc0\xa0\x60\x88\x9d\x3d\x20\xa3\x6d\x69\xee\x5a\x41\x0b\xf0\x02\x10\xd0\xbb\x00\x2d\x79\x4b\x14\x80\x88\x27\xeb\xc5\xaf\x70\xa6\x80\x69\x22\x40\x1f\x00\x3d\x13\xe0\x45\x5b\x67\xaa\x5d\x88\x8d\x3c\x17\x9d\xc4\x81\x16\x23\xc7\xd4\x15\xc4\x36\xec\xd7\x74\xa2\x8b\x3b\x05\xb3\xfd\x0c\x50\x8c\xa2\x9b\xc9\x2f\xe0\x53\xf7\xe2\x07\x31\x13\x03\x5a\x12\x52\xc1\x16\xf7\xa7\x56\x74\x2b\x5a\x1a\x7d\x4a\x3d\x8d\xaa\xfd\xd1\xaa\x81\x30\x7a\xc9\x31\x40\x0c\xd0\x07\x30\xec\xe5\x5c\xad\x12\x05\xb5\x89\x1e\x26\xbf\xc4\x0e\xe1\x3d\xaf\xfb\xa0\x35\x7b\xd1\xf6\xe4\x3b\x55\xc2\x79\x51\xb3\xe5\x6f\x02\x92\xf9\x0b\x20\xf9\xfc\x09\xdb\x29\x90\xcc\x5f\x09\x92\x27\x3d\x7f\x53\x90\x3c\xf6\x5e\x41\xb2\xca\xdb\xd7\x80\x64\xf1\x96\x2a\x4e\x9f\x51\xbe\x1e\x22\x6b\x1d\xed\x03\xa7\x76\x02\x41\xb9\x6a\x38\xda\xb1\xd6\x51\x13\x88\xe1\x7d\xd3\xeb\x48\x94\x6b\x0b\x69\xfb\x03\x0b\x99\x8e\xba\x94\x7f\xa3\xba\x85\x96\x64\xb4\x06\xd6\x58\x93\xab\x8e\xe8\x6b\xd1\x00\x40\x21\x23\x09\x50\xc8\x7d\xf8\x93\x29\x94\x84\x31\x70\x94\xef\xc2\x18\x5c\xe8\xe3\x04\x85\x07\xab\x3a\x10\x0d\xc3\x48\xcc\xda\x44\x5b\x94\xf6\x43\x47\x02\x95\x01\x7a\x7b\xd1\x70\x79\x26\xd0\x5e\xe9\xf8\x4c\x1b\x72\x6f\x4a\xae\x2a\xd1\x2a\xc0\x36\x9a\x96\x18\x52\x85\x15\x46\x23\xf2\x04\xa4\x94\xcd\x63\x5e\x81\x26\x34\x18\xfa\x07\x7b\x9d\x42\x08\xf6\x52\xd5\x39\x8c\x74\xc0\x58\xaa\x50\x32\xea\xa8\x87\x1e\x0d\x63\xf5\x20\xd0\x80\x36\xcd\x54\xf7\x42\x13\xe8\x51\x62\x64\x0c\x47\x1b\xa2\xb3\x80\x5b\xec\x90\xc7\x00\x2d\xb9\xf8\x96\xeb\x63\x03\x46\x40\xa7\x70\xd6\x6a\xee\xd1\x9e\xe8\x36\xa0\x26\xd0\x52\x29\x90\x8c\xaf\x56\xe1\x1f\xf8\xb5\xb5\xe4\x2f\xe4\xb2\x56\x7f\x2b\xa9\x93\x00\xcb\x9d\x40\x14\x7b\x10\x5b\xe5\x24\xd7\xc0\x51\xa8\x0f\x2b\x7f\xd1\x80\xd0\x0b\xfa\xb1\x50\x4d\x18\x28\xad\x16\x98\xce\x75\x2c\x1f\x75\xb4\x25\x9f\x68\x56\x34\x22\xf0\x38\xe8\x38\x8d\x0d\x6a\x05\x5d\xd9\xef\xe9\xc6\xa9\xb6\xed\xd5\x67\x2b\xf9\x21\xa6\x40\x39\xb9\xc0\x3f\x36\x6a\x85\x3d\xf2\x04\x85\x06\xb8\x1e\xa4\xa6\x80\x6d\xe8\xd4\x2a\x55\x37\x4a\x29\x9d\x9e\x3f\x30\x8c\x16\xaf\x74\xdc\x27\x86\x60\x77\x94\xc7\x48\xec\xcf\xb9\x03\xf9\x01\xea\x55\x87\x32\x87\x40\x6f\x48\x8e\x42\x73\x8d\x56\xe6\x1c\x7a\xd5\xb6\x81\x52\xd5\x1f\x62\xe4\x9c\x80\xe6\x3c\x17\xfa\xde\x3f\x4a\xa1\x1f\xa1\x33\xf2\xd3\xeb\xec\x90\x29\x95\x8f\xad\xd0\x32\x5a\x1a\x2a\x62\x6e\xe2\x1a\xfb\xb0\x16\xdb\x41\x2a\x58\xa1\x75\x66\x09\xa8\x8c\xfc\x31\x0f\x30\x73\x05\x6a\x29\x8f\xa9\xa3\x50\xca\x0c\x33\xd6\xa0\xb3\xcb\x4b\xfa\xfa\x10\x81\x5e\x4b\x1c\x87\x36\x1e\x69\xe3\xe9\xef\x2f\xa7\x48\xe3\x70\xdd\x1f\xa7\x8c\x13\x1e\xbf\x29\x61\x3c\xf7\x5b\xe9\xa2\x48\xfe\x3c\x5d\xd4\x79\x99\x54\xf5\xdb\xd1\xc5\xc3\x6f\x57\x7f\xed\x59\x30\x5a\x0c\xc2\x48\x9c\x68\xcc\x4c\x9f\x05\x53\x4c\x68\x3c\x74\x12\xcd\xee\x74\x48\xa5\xa0\x0b\x7d\xe6\x5a\x29\x01\x94\x3a\x88\x86\xc6\xc9\xa4\x90\x01\x66\x1a\x3d\x3c\xf3\xd3\x17\xcd\x85\x3e\x62\xa8\x46\xfb\x01\x32\x68\xde\xcc\xca\xfe\xe1\xf9\x59\x2f\x36\x00\xa3\xd0\x04\xfa\x82\x44\xd0\x3e\xce\x89\x6f\xf8\x0d\xe8\xd2\x44\x68\x78\x0a\x3c\x00\x6c\x27\x8d\x38\x0c\xfa\x10\xc2\x49\x03\xd3\xfc\x68\x50\x1a\x0f\x20\x1f\x74\x98\x06\x20\x8b\x56\xc1\xa3\x14\x62\xc3\xa7\xf0\xb9\x3e\x6e\x28\xc0\x1b\xdd\xc6\x7c\x40\x63\xd6\xf9\x61\x5e\x9f\x35\xd4\xd3\x33\x7a\x6d\x4b\x3d\xb5\xf2\xd8\x54\xcf\x7f\xbd\x3c\xd5\x56\x4f\xd7\xfe\xf1\xc6\x3a\xe9\xf9\x9b\xb6\xd6\xb1\xf7\xda\x5c\x69\x5a\xfe\xe9\xe6\x6a\x93\x22\x4f\xde\x50\x8b\x3d\xfc\xfe\xfb\x17\x06\x56\x7d\xda\x45\x03\x81\xc2\x7d\xa5\x6a\x4c\x7f\x1c\x19\xf5\x47\x01\x18\x11\x55\x52\xe8\x53\xae\xc0\xbe\x3a\xdc\xa4\x3a\x18\xa6\xfa\xc4\x2c\x3c\xec\x2f\x45\xa1\xa5\xfa\x10\x99\xa1\x07\x45\xd0\x3a\xfd\xb1\xa6\x11\x16\x64\x4f\x58\x93\x62\x86\xed\x18\x2e\xc2\x60\xab\xdf\xc1\x54\x9d\xfe\x78\x80\x42\x62\x0d\xca\x25\x3c\x90\xd6\x07\xc4\xa8\x8a\xa1\x15\x20\x40\x6d\x85\x18\x3a\x51\x86\x34\x1f\x76\x61\x5f\x7c\x66\x30\x1d\xf5\x07\x11\x06\x6f\xfc\x71\xea\x27\xcc\xf5\xff\x00\x00\x00\xff\xff\xa1\x90\x50\xae\x00\x20\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 20480, mode: os.FileMode(436), modTime: time.Unix(1659906006, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\xb1\x0d\xc5\x20\x0c\x04\xd0\x9e\x29\x6e\x01\xa0\xff\xdb\xdc\x4f\xac\x13\x42\xb1\x11\xf1\xfe\x4a\x93\x22\xf5\x7b\x8b\xc7\xa4\x0c\xd7\xd0\x66\x8e\xf0\xbb\x94\xde\x15\x3f\x99\xdb\x66\x1a\x14\xf5\x3f\xfc\x64\x12\x75\x4d\x7d\x26\x6a\xe0\xa5\xa6\x00\x5a\x79\x02\x00\x00\xff\xff\xe6\x24\xd8\x86\x4e\x00\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 78, mode: os.FileMode(436), modTime: time.Unix(1656363775, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init.up.sql":     _000001_initUpSql,
	"000002_indexes.up.sql":  _000002_indexesUpSql,
	"000003_indexes.up.sql":  _000003_indexesUpSql,
	"000004_posts.up.sql":    _000004_postsUpSql,
	"000005_collate.up.sql":  _000005_collateUpSql,
	"000006_charset.up.sql":  _000006_charsetUpSql,
	"000007_dtupdate.up.sql": _000007_dtupdateUpSql,
	"000008_delupd.up.sql":   _000008_delupdUpSql,
	"bindata.go":             bindataGo,
	"migrations.go":          migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init.up.sql":     &bintree{_000001_initUpSql, map[string]*bintree{}},
	"000002_indexes.up.sql":  &bintree{_000002_indexesUpSql, map[string]*bintree{}},
	"000003_indexes.up.sql":  &bintree{_000003_indexesUpSql, map[string]*bintree{}},
	"000004_posts.up.sql":    &bintree{_000004_postsUpSql, map[string]*bintree{}},
	"000005_collate.up.sql":  &bintree{_000005_collateUpSql, map[string]*bintree{}},
	"000006_charset.up.sql":  &bintree{_000006_charsetUpSql, map[string]*bintree{}},
	"000007_dtupdate.up.sql": &bintree{_000007_dtupdateUpSql, map[string]*bintree{}},
	"000008_delupd.up.sql":   &bintree{_000008_delupdUpSql, map[string]*bintree{}},
	"bindata.go":             &bintree{bindataGo, map[string]*bintree{}},
	"migrations.go":          &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
