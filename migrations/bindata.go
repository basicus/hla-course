// Code generated by go-bindata.
// sources:
// 000001_init.up.sql
// 000002_indexes.up.sql
// 000003_indexes.up.sql
// 000004_posts.up.sql
// 000005_collate.up.sql
// 000006_charset.up.sql
// 000007_dtupdate.up.sql
// 000008_delupd.up.sql
// 000009_dialogs.up.sql
// 000010_user_shard.up.sql
// bindata.go
// migrations.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\xdf\xd6\x4a\x3b\x94\x69\xa0\x49\x3b\x21\xb4\x03\x07\x86\x84\xc6\xb9\x4a\x5b\xb7\xb3\x48\x9c\xc9\x49\x60\x7d\x7b\xd4\xa6\x53\x35\x60\xe2\xe6\xfa\xf3\xf7\x37\x89\x2b\xec\x88\xb7\x4a\xd5\x82\x3a\x20\x04\x5d\x19\x04\x6a\x81\x5d\x00\x3c\x93\x0f\x1e\xa2\x47\xf1\x2a\x53\x00\x30\xd6\x25\x35\x00\x50\x51\x47\x1c\xe0\x24\x64\xb5\xf4\xf0\x81\x3d\x3c\xbe\x1f\x5e\xcb\xe7\xfd\xd3\xdb\xee\x65\xb7\x3f\x80\x8e\xc1\x95\xc4\xb5\xa0\x45\x0e\xcb\xd1\x37\xae\x23\x1e\x0a\xf8\xd4\x52\x1f\xb5\x64\xab\xa2\xc8\x87\xef\xe1\x87\x1c\x8d\x49\x73\x68\x35\x99\xab\xb9\xbb\xa2\xc8\x13\x3b\x1d\x1d\xe3\x35\xbb\xbf\x20\xed\xfd\x97\x93\x66\x46\x0f\xeb\xfc\x47\x34\x6b\x9b\xec\x59\x5f\x6d\x26\xdf\x47\x99\xf0\x6f\xa6\xbb\x49\x03\xba\xdc\xc6\xe3\x79\x6a\x21\x47\x0b\xd9\xc2\x6a\x83\x8b\xe5\xa2\xc5\xb1\x98\xc4\xda\x45\x0e\xd2\xff\x19\x5a\x53\xe8\x6f\x1d\x86\x38\xa0\xe0\xb0\x81\xf9\xad\xd6\x9b\x5c\xa9\xfc\xff\x7d\x95\xad\x10\x72\x73\x63\x6b\x29\x3f\x8d\x0c\xfd\xd4\x4d\xb9\xce\x5a\x0a\x5b\xf5\x1d\x00\x00\xff\xff\x09\xe8\xcf\x40\x18\x02\x00\x00")

func _000001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initUpSql,
		"000001_init.up.sql",
	)
}

func _000001_initUpSql() (*asset, error) {
	bytes, err := _000001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init.up.sql", size: 536, mode: os.FileMode(436), modTime: time.Unix(1657142135, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_indexesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xbb\xca\x83\x40\x10\x46\xfb\x7d\x8a\x29\x7f\xe1\x7f\x83\xad\x0c\x5a\x04\x24\x45\xb0\x48\xb7\xac\xce\x28\x03\xba\x0b\x7b\x01\xf3\xf6\x41\x27\xf7\x90\x26\xdd\xb7\x67\x39\x07\xa6\xa3\x91\x9d\x56\xaa\x6c\xda\xfa\x08\x6d\xb9\x6b\x6a\xc8\x91\x42\x54\x00\x00\x65\x55\xc1\xfe\x50\xd5\x27\x61\xc6\xd9\x99\x0c\xe3\x02\x7f\xeb\xfa\x87\x98\xc3\x3a\x0a\xfd\xe1\x9b\x21\x30\x39\xbc\x57\xd8\x21\x2d\xcf\x3f\xd1\x64\x46\x69\x6d\x94\xf1\xb7\xca\x70\xab\x08\x90\x8e\x9d\x12\x05\x48\xb6\x9b\xe8\xed\x9a\x47\x21\x9a\xc9\x8f\xec\x44\xde\xe6\x57\xd1\x22\xbe\x88\xbd\xcf\x2e\x85\xb3\xa8\xd7\x47\xa1\x95\xea\xfd\x3c\x73\xd2\xea\x12\x00\x00\xff\xff\x31\x64\x7b\xe9\x55\x01\x00\x00")

func _000002_indexesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_indexesUpSql,
		"000002_indexes.up.sql",
	)
}

func _000002_indexesUpSql() (*asset, error) {
	bytes, err := _000002_indexesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_indexes.up.sql", size: 341, mode: os.FileMode(436), modTime: time.Unix(1659556182, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_indexesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xcd\x8a\x83\x30\x1c\xc4\xef\x79\x8a\xff\x31\xc2\xbe\x81\x27\x25\x61\x11\xc4\x5d\x5c\x17\x7a\x0b\x6a\xa2\x04\x34\x42\x3e\xa0\x7d\xfb\xe2\x17\x95\x54\xc1\xb6\xb7\xc9\x30\xf3\x23\xff\xa9\x44\x2b\x55\x88\x50\x94\x16\x34\x87\x22\x8a\x53\x0a\xce\x08\x6d\x80\xe4\x3f\xbf\x90\x64\x84\x5e\x66\x83\xa9\xb2\x17\x4c\xf2\x6b\xf8\x14\x66\x8d\x96\x42\x71\xbf\xb2\xd8\x86\x39\xc9\xdf\x2b\x36\x6b\xb1\xec\xac\xd0\x60\xcb\xaa\x13\x47\xdf\xeb\x86\x56\xaa\xd3\xe9\x7a\x70\xca\xea\xdb\xfe\xb7\x0c\x44\x84\x2c\x71\xef\x78\xc0\xa3\xfa\x02\xe3\xf4\x28\x02\xf8\xff\x4b\xb2\x6f\x88\x8b\x9c\xd2\xe3\xfb\x1e\xb8\xbd\x5d\x00\x4f\xae\xe4\x01\x7c\x84\x6b\x56\xdc\x6c\x9c\x00\x1a\x0f\xb5\x59\x11\xf0\x24\x5f\x27\x6c\x96\x05\xbc\x3c\x7c\x0a\xaa\x87\xbe\x97\x36\x44\xf7\x00\x00\x00\xff\xff\x1c\x37\x60\x12\x7f\x02\x00\x00")

func _000003_indexesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_indexesUpSql,
		"000003_indexes.up.sql",
	)
}

func _000003_indexesUpSql() (*asset, error) {
	bytes, err := _000003_indexesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_indexes.up.sql", size: 639, mode: os.FileMode(436), modTime: time.Unix(1659556435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000004_postsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x31\x6b\xf3\x30\x10\x86\x77\xfd\x8a\x77\x8c\x21\x43\xf8\xf8\x86\x42\x26\x25\x56\x8b\x21\x71\x82\x23\x43\x37\x21\xc7\xd7\x54\xd4\xb6\x82\x74\x29\xc9\xbf\x2f\xb6\x3c\xb4\x94\x6a\xd3\xab\x7b\x8e\xe7\x74\x0d\x5d\xdc\xb0\x16\xe2\x1c\xc8\x32\x81\x6d\xd3\x11\xdc\x1b\x06\xcf\xa0\xbb\x8b\x1c\x71\xf5\x91\xa3\x58\x08\x00\x70\x2d\xe6\xd3\xb8\x8b\x1b\x18\xd7\xe0\x7a\x1b\x1e\xf8\xa0\x07\x64\xad\x0f\xa6\x28\xb7\x95\xda\xab\x52\xc3\xde\xd8\x1b\x37\x9c\x03\xf5\x34\xf0\x72\xe2\x6f\x91\x82\x99\x9a\x24\x3e\xa5\xec\xb8\xa3\xa9\xeb\xa7\x0d\xe7\x77\x1b\x16\xff\x56\xab\x6c\x72\x18\x6e\x5d\x97\x8a\x7a\x8a\xd1\x5e\xe8\x47\xd1\xff\xa7\x2c\x3d\x26\xfd\xd6\x58\x46\x2e\xb5\xd2\xc5\x5e\x21\x57\xcf\xb2\xde\x69\x6c\xeb\xaa\x52\xa5\x36\x63\x78\xd2\x72\x7f\x9c\x55\xae\xed\x2f\xe4\x50\xa2\x3e\x8e\xb7\xbf\xa0\x96\x3a\x62\x6a\xd1\x78\xdf\x89\x6c\x2d\x84\xdc\x69\x55\x41\xcb\xcd\x4e\xa5\x8f\x82\xcc\x73\x14\x65\xae\x5e\x91\x02\x33\xce\x1c\x8d\x6b\xef\x58\xcc\xe3\x2f\xbf\xf9\x66\xa8\x4f\x45\xf9\x82\x8d\xae\x94\x1a\x17\xe1\xfb\xde\xf1\x5a\x7c\x05\x00\x00\xff\xff\x4a\x02\x7b\x0d\x99\x01\x00\x00")

func _000004_postsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_postsUpSql,
		"000004_posts.up.sql",
	)
}

func _000004_postsUpSql() (*asset, error) {
	bytes, err := _000004_postsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_posts.up.sql", size: 409, mode: os.FileMode(436), modTime: time.Unix(1659735067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000005_collateUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xca\x31\x0e\x80\x20\x0c\x05\xd0\xbd\xa7\xe8\x21\x1c\x4c\x88\x67\x21\x50\xab\x69\x52\xa8\x81\xcf\xfd\x9d\x9d\xdc\x5f\xd5\xdb\x7a\x22\x2a\x0e\x1d\x8c\x52\x5d\xf9\x89\x89\xc9\x12\xee\x05\xca\x07\x2f\x5c\x7b\xab\x5b\x5e\xdd\x24\x4e\xcd\x62\xe9\xe3\xd7\xd4\xf1\xe7\x49\xa2\x35\x43\x22\xa2\x37\x00\x00\xff\xff\xc3\xbe\x04\xae\x73\x00\x00\x00")

func _000005_collateUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_collateUpSql,
		"000005_collate.up.sql",
	)
}

func _000005_collateUpSql() (*asset, error) {
	bytes, err := _000005_collateUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_collate.up.sql", size: 115, mode: os.FileMode(436), modTime: time.Unix(1659904305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000006_charsetUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xce\xbd\x4a\xc6\x30\x14\xc6\xf1\x3d\x57\x71\x46\xdd\x8a\x74\x28\x14\x87\x18\x03\x0e\xc5\x42\x1b\x5c\x4b\x9a\x9e\xd6\x48\x3e\x4a\x72\x22\x78\xf7\xa2\x0e\x4a\x91\xbe\xcb\xbb\x3e\x0f\xfc\xf8\xcf\xb8\xd9\xd0\x32\xc6\x3b\x25\x07\x78\xe4\x8a\x3f\xf0\x51\xc2\x9e\xe2\x1b\x1a\x02\xf1\xc4\x07\x2e\xbe\xae\x51\x2a\xb8\x87\x42\x6b\xe3\xe7\x1a\x44\xdf\x75\x5c\xc9\xdf\x65\x2a\xc1\x9a\xb8\xe0\x64\x6c\xcb\xb4\x23\x4c\x40\x7a\x76\x08\x7b\xcc\x94\x41\xf4\xcf\x2f\x72\x50\xa0\xfa\x03\x79\x04\x2f\x71\x25\x63\xba\x22\xf7\x53\xe7\xe3\x62\xd7\x0f\x20\x4b\x0e\xe1\x5d\x27\xf3\xaa\xd3\xcd\x5d\x55\xdd\x82\x89\xce\x69\xc2\x7f\x1c\x08\x91\x20\x14\xe7\x4e\x40\x8f\x39\xeb\xed\x2f\x59\x37\xe7\xe6\xb7\x67\xa2\xf7\x96\x5a\xc6\xd8\x67\x00\x00\x00\xff\xff\x2a\x15\x86\x74\x9e\x01\x00\x00")

func _000006_charsetUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000006_charsetUpSql,
		"000006_charset.up.sql",
	)
}

func _000006_charsetUpSql() (*asset, error) {
	bytes, err := _000006_charsetUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000006_charset.up.sql", size: 414, mode: os.FileMode(436), modTime: time.Unix(1659904721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000007_dtupdateUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x4b\x0a\x02\x31\x10\x84\xe1\x7d\x9f\xa2\x97\x7a\x86\xe0\x59\x86\x9e\xa4\xd4\x40\xe7\x41\x52\xc1\xeb\x8b\x8c\xe2\x6c\x8b\xbf\xbe\x1d\x8f\x5c\x83\x88\x98\x13\x43\x69\xbb\x43\x7b\x9b\x9c\xaa\xc7\x14\x9b\xaf\x52\x75\xf5\x64\x44\xda\x8c\x3a\x41\x4d\xb8\xdb\x72\x6a\x5c\x63\xa0\x72\x63\x2e\x98\xb4\xd2\x2f\xd7\x20\x47\xfb\x65\x3e\xf5\xff\x7c\x8b\x03\x3f\xe7\xf5\xc4\xc0\x19\xce\x53\xeb\x72\x0f\x22\xb1\x95\x92\x19\xde\x01\x00\x00\xff\xff\xab\x03\x95\x78\x9e\x00\x00\x00")

func _000007_dtupdateUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000007_dtupdateUpSql,
		"000007_dtupdate.up.sql",
	)
}

func _000007_dtupdateUpSql() (*asset, error) {
	bytes, err := _000007_dtupdateUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000007_dtupdate.up.sql", size: 158, mode: os.FileMode(436), modTime: time.Unix(1659905446, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000008_delupdUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\xc1\xad\x02\x31\x0c\x84\xe1\xbb\xab\x98\x3e\xa2\x57\x4c\xf2\x3c\x81\x48\x4e\xbc\x5a\x3b\x42\x74\xcf\x01\x96\x02\xb8\xff\xf3\x4d\xe3\x6d\xac\x22\x22\xd5\x92\x27\xb2\x36\x23\x0e\x8f\x0c\x01\x80\xe9\x3a\xfa\x13\x4a\x63\x52\xd1\xdc\x0d\xca\x5e\xb7\x25\x7a\xb5\x60\x91\x7d\x68\xcd\x6b\x13\xcc\x2b\xfe\x7b\x07\xf2\xb8\xf3\xe4\x57\x18\x81\xb5\xcd\xca\xaf\x7f\x58\x9e\x1f\x41\xfe\x7d\xce\x91\xe5\x15\x00\x00\xff\xff\x5f\x20\x90\xba\xc3\x00\x00\x00")

func _000008_delupdUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000008_delupdUpSql,
		"000008_delupd.up.sql",
	)
}

func _000008_delupdUpSql() (*asset, error) {
	bytes, err := _000008_delupdUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000008_delupd.up.sql", size: 195, mode: os.FileMode(436), modTime: time.Unix(1659906006, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000009_dialogsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x8a\xdb\x30\x10\x86\xef\x7e\x8a\x39\x26\x90\x43\xda\xd3\x42\x4e\xde\xb5\x5a\x02\x89\x5b\xbc\x0a\xf4\x26\xc6\xd6\xd8\x3b\x54\x96\x83\x34\x2e\xd9\xb7\x2f\x8e\x9d\xb4\x1b\x87\x5d\x68\x75\x32\x23\xe9\xf7\xa7\x4f\xa3\x92\x1a\xf6\x9b\x24\xa9\x02\xa1\x10\x08\x96\x8e\x80\x6b\xf0\x9d\x00\x9d\x38\x4a\x84\xea\x05\x25\x26\x8b\x04\x00\x80\x2d\x5c\x46\xc9\x0d\x7b\x81\x63\xe0\x16\xc3\x2b\xfc\xa4\x57\x48\x0f\xfa\x9b\xd9\xe6\x4f\x85\xda\xab\x5c\x03\xf6\xd2\x19\xf6\x55\xa0\x96\xbc\xac\xce\x01\xc2\xe2\x68\x0c\xf8\x85\xa1\x7a\xc1\xb0\xf8\xbc\x5e\x2f\xe1\xfe\x18\x28\x7c\xef\x1c\x54\x9d\x73\x03\x5f\x2f\xf5\x83\x69\xc8\x53\x40\x67\x2a\x1e\x33\x47\x76\x6b\x50\x20\x4b\xb5\xd2\xdb\xbd\x82\x4c\x7d\x49\x0f\x3b\x0d\x4f\x87\xa2\x50\xb9\x36\x43\xf1\x59\xa7\xfb\xef\xd7\xcc\x69\xaf\xeb\x22\x8d\x87\x2a\xbb\xce\x9d\x3f\x2c\xd5\xd8\x3b\x81\x1a\x5d\xa4\xbb\x3c\xc9\x72\x93\x24\xe9\x4e\xab\x02\x74\xfa\xb8\x53\x93\xa3\x61\x49\x9a\x65\xb0\xcd\x33\xf5\x63\xac\x99\x3e\x52\x88\x86\xed\x09\x16\x7f\x38\x97\x70\x78\xde\xe6\x5f\xe1\x51\x17\x4a\x6d\x92\x0f\xf5\x9b\x23\x06\xe1\x8a\x8f\xe8\x67\x57\xf1\x6f\xf7\x70\x4e\x65\x3b\xed\x1e\x6b\x03\xea\x6d\x2d\x0a\x4a\x1f\x01\xd8\xcb\xc3\x55\xcc\xa7\xb7\x22\xd0\x09\x85\x89\x7d\x4e\x3b\xa4\xa0\xb5\xc0\xde\xd2\x69\x3e\x3f\xa9\x19\x71\x56\x17\x86\xd5\xf4\xe3\x25\xf4\x91\x7d\x03\xa5\x04\xa2\xf7\xdb\xb4\xa5\x18\xb1\xa1\x79\xa7\xfe\x9f\xa0\xeb\xfe\x9b\x16\xf8\x4b\x59\x1d\xba\xf6\xdd\x55\x91\xfc\xb9\x3b\x01\x2c\x0a\x09\xb7\x74\x6f\xd5\x74\x80\xb7\x2f\x63\xbd\xfc\xf0\x11\x24\xb3\x4b\xb8\xaa\xb8\xe3\xfe\x32\x77\xe3\x7d\x42\x9c\xf9\xee\xda\x96\x65\xf3\x3b\x00\x00\xff\xff\x65\x58\xbd\x40\x26\x04\x00\x00")

func _000009_dialogsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000009_dialogsUpSql,
		"000009_dialogs.up.sql",
	)
}

func _000009_dialogsUpSql() (*asset, error) {
	bytes, err := _000009_dialogsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000009_dialogs.up.sql", size: 1062, mode: os.FileMode(436), modTime: time.Unix(1660159705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000010_user_shardUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\x31\xae\x03\x21\x0c\x84\xe1\x9e\x53\x4c\xb7\xef\x75\x49\x91\x0a\xe5\x2c\xc8\x0b\xd6\x62\xc9\xb0\x91\x31\xc9\xf5\x23\x94\x62\xa7\xfd\x34\xff\xce\x87\x74\xc4\x10\x48\x9d\x0d\x4e\xbb\x32\xe6\x60\x1b\xa0\x52\x90\x4f\x9d\xad\x63\x54\xb2\x92\xa4\xe0\x4d\x96\x2b\xd9\xdf\xe3\x7f\x91\x92\x33\x94\x5c\xfa\x3d\x1d\xdc\xd9\x48\x53\x96\x18\xe6\xab\x2c\xf9\x65\x06\xfb\xf5\x7f\x62\xbb\xad\x6d\xf8\x54\x36\xbe\x40\x06\xfa\x54\x8d\x21\xe4\xb3\x35\xf1\x6f\x00\x00\x00\xff\xff\xc7\x6e\x7b\x81\x98\x00\x00\x00")

func _000010_user_shardUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000010_user_shardUpSql,
		"000010_user_shard.up.sql",
	)
}

func _000010_user_shardUpSql() (*asset, error) {
	bytes, err := _000010_user_shardUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000010_user_shard.up.sql", size: 152, mode: os.FileMode(436), modTime: time.Unix(1660582857, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x9a\xdb\x6f\xe3\xc6\x92\xc6\x9f\xa5\xbf\x82\xc7\xc0\x39\xb0\x16\x5e\x0f\xc9\xe6\xd5\xc0\xbc\xe4\xb2\x40\x1e\x36\x01\x36\xc9\xd3\xf6\xc2\x68\x92\x4d\x47\x58\xdb\x72\x24\x39\xdb\x33\x83\xf9\xdf\x17\xbf\xae\x92\x75\x75\x32\xf1\x28\x80\x33\x12\x45\x76\x57\x57\x57\x7d\xdf\x57\xd5\x7c\xf7\x2e\xf9\x76\x31\xf8\xe4\xce\x3f\xfa\xa5\x5b\xfb\x21\xe9\x3e\x24\x77\x8b\x7f\xef\xe6\x8f\x83\x5b\xbb\xeb\xe9\xbb\x77\xc9\x6a\xf1\xbc\xec\xfd\xea\x86\xcf\x29\xff\x65\xb7\xf3\xc7\xf9\xfa\xfa\xf9\xe9\x7a\xf5\xfb\xfd\xcb\xd5\xfc\x76\xfe\x38\xf8\xe0\x57\x87\x3f\x98\xd7\x7e\x28\x6e\x9f\x16\xab\xf5\xd1\xe5\xf2\xb6\x5f\xdc\xdf\xbb\xb5\x3f\xfc\xa1\xba\xed\x7f\x73\xcb\x95\x3f\x9a\xba\xbe\x1d\xd6\xcf\x4f\xc3\x89\x47\x9a\xdb\xc1\xdf\x3f\x3f\x0d\x87\xd7\xdb\xdb\x61\xee\xee\x17\x77\x87\x93\x67\xe9\xed\xf3\xca\x2f\x6f\x57\xbf\xb9\xe5\xee\x43\x1b\x7f\xdc\x2d\xf8\xf6\x30\xbf\x5b\xba\xf5\x7c\xf1\xb8\xd2\x0b\xdf\xfd\x94\xfc\xf8\xd3\x2f\xc9\xf7\xdf\xfd\xf0\xcb\x3f\xa6\xd3\x27\xd7\xff\xaf\xbb\xf3\x3b\xb7\x4d\xa7\xf3\x87\xa7\xc5\x72\x9d\x5c\x4e\x27\x17\xdd\x87\xb5\x5f\x5d\x4c\x27\x17\xfd\xe2\xe1\x69\xe9\x57\xab\x77\x77\x1f\xe7\x4f\x5c\x18\x1f\xd6\xfc\x33\x5f\xc8\xff\xdf\xcd\x17\xcf\xeb\xf9\x3d\x5f\x16\xf1\x81\x27\xb7\xfe\xed\xdd\x38\xbf\xf7\x7c\xe0\xc2\x6a\xbd\x9c\x3f\xde\xc5\xdf\xd6\xf3\x07\x7f\x31\x9d\x4d\xa7\xe3\xf3\x63\xbf\xb1\xf7\xbf\xbc\x1b\x2e\xf9\x90\xfc\xf7\xff\x30\xed\x55\xf2\xe8\x1e\x7c\x22\x8f\xcd\x92\xcb\xcd\x55\xbf\x5c\x2e\x96\xb3\xe4\xd3\x74\x72\xf7\x31\x7e\x4b\x6e\xde\x27\x58\x75\xfd\xa3\xff\x3f\x06\xf1\xcb\xcb\x68\x36\xdf\xbf\x79\x1e\x47\xbf\x8c\xc3\xce\x66\xd3\xc9\x7c\x8c\x0f\xfc\xe3\x7d\xf2\x38\xbf\x67\x88\xc9\xd2\xaf\x9f\x97\x8f\x7c\xbd\x4a\xc6\x87\xf5\xf5\xf7\x8c\x3e\x5e\x5e\x30\x50\xf2\xcf\xdf\x6f\x92\x7f\xfe\x71\x21\x96\xc4\xb9\x66\xd3\xc9\xe7\xe9\x74\xf2\x87\x5b\x26\xdd\xf3\x98\xc8\x3c\x32\xc9\x74\x72\x2b\xe6\xbc\x4f\xe6\x8b\xeb\x6f\x17\x4f\x1f\x2e\xff\xd5\x3d\x8f\x57\xc9\xdd\xc7\xd9\x74\xd2\xdf\x7f\xbf\xb1\xf4\xfa\xdb\xfb\xc5\xca\x5f\xce\xa6\xe7\xb2\x87\x61\x64\xfc\x57\x06\xf2\xcb\xa5\xd8\xad\x17\xbb\xe7\xf1\xfa\x1b\x4c\xbf\x9c\x5d\x71\xc7\xf4\xf3\x74\xba\xfe\xf0\xe4\x13\xb7\x5a\xf9\x35\x2e\x7f\xee\xd7\x8c\x12\xd7\xa7\xfb\x31\x9d\xcc\x1f\xc7\x45\x92\x2c\x56\xd7\xff\x31\xbf\xf7\x3f\x3c\x8e\x8b\x97\xe7\x74\x0b\x37\xd7\x77\x46\x88\x7b\x98\x24\xba\x8d\xd3\xc9\x6a\xfe\x31\x7e\x9f\x3f\xae\xab\x62\x3a\x79\x20\xa1\x93\x97\x41\xff\x73\x31\xf8\x78\xf1\x97\xf9\x83\x4f\x08\x93\x6b\x3e\x31\x4f\x0c\x95\xcb\x71\x7e\x38\xd7\x2c\xf9\xd1\x3d\xf8\xcb\x99\xce\xc0\x9c\xba\xca\x71\x7e\xcd\xec\xd3\xcf\x7f\xf2\xec\xcf\xf3\x8f\x3c\x1b\xad\xd9\x7f\x14\x43\xff\xf4\x51\x6c\xbd\x9c\xed\x5a\xbe\x3f\x00\x4b\xfb\xab\x01\x58\xdc\xe5\x6c\xbb\xd0\xa3\x11\x74\xf5\xaf\x0f\xf2\xc3\xea\xbb\xf9\xf2\x72\x96\x74\x8b\xc5\xfd\xee\xd3\xee\x7e\xf5\x17\x2b\xff\xb0\x92\x85\xfb\xe5\xe8\x7a\xff\xe9\xf3\xce\xd3\x1a\x12\x44\xf9\xed\xed\x0e\x8c\xfe\xfa\xf4\xf3\xef\xf7\xc9\x7b\x0d\x88\xcb\x0b\x1b\xb2\xd1\x86\xa6\xb3\x21\x6d\x6c\x48\xd3\xd3\x7f\x23\xf7\x14\x36\xb4\x99\x0d\x7d\x66\x43\xe1\x6d\xe8\x8d\x0d\x86\xdf\x7b\x1b\x9a\xca\x06\x3f\xda\x50\xb7\x36\xa4\xce\x86\x61\xb4\x61\xa8\x6c\x28\x9c\x0d\xa6\xb3\xa1\x2d\x6c\xa8\x5a\x1b\x5c\x6a\x43\xd1\xca\xb5\x3c\xb3\xa1\x2b\x6c\x48\x8d\x0d\x69\x2d\x63\x30\x47\x5f\xd9\xd0\xb5\xf2\x6c\xd9\xd9\xd0\xd5\x36\x74\xc6\x86\xa2\xb1\xa1\xed\x6d\xe8\x5b\x19\xa3\x4a\x6d\xa8\x07\x1b\xea\xce\x86\xa1\xb0\xc1\x55\x36\x94\xd8\x54\xca\x6f\x3e\xb7\xc1\x57\x36\x8c\xce\x86\xd1\xd8\x30\xd6\x36\x18\xe6\x69\x6d\xc8\x3b\x1b\x3c\x76\x37\x32\x3e\x73\x0d\xa5\x0d\x4d\x6e\x83\x71\x36\xe4\xac\xab\xb0\xa1\x1c\x6c\xc8\x5a\xf9\x5c\x39\x1b\x9a\x4c\xae\xe1\x13\xd3\xdb\xd0\x62\xfb\x68\x43\xe6\x6d\x70\xb9\x0d\x45\x6d\xc3\x98\xd9\x90\x3b\xb1\x25\xde\x97\x8a\x2f\xf2\x52\x6c\xe3\x5a\xc9\x5f\x26\xf7\x67\xbd\x0d\x3e\xb5\x21\x67\x8e\xc2\x86\xae\xb4\x61\x2c\x6c\x18\x53\x99\xcf\x0c\x32\x57\xe7\x65\xaf\x4a\x7c\x8f\xfd\xcc\x35\xd8\x30\x18\x1b\x06\xbe\x7b\x1b\xaa\x52\xd6\x63\xd8\x2f\x9e\xf7\xb2\x5f\x6d\x69\x43\xaf\x63\xc7\x3d\xc0\x0e\x1d\x67\xc8\xc4\x2f\xce\xdb\x90\x1b\x59\x0b\x7b\x38\x36\xe2\xd7\x32\x97\x79\x79\x16\xfb\x5c\x27\x6b\xed\x1b\x1b\x9a\x5a\xf6\xdd\x67\xf2\x99\xb5\x34\x83\xec\x4f\x6d\x6c\xa8\x1a\x59\x73\xdb\xca\x73\xec\x6b\xb7\xf3\x7c\x66\x24\x16\xb2\x41\xfe\xbc\xee\x1f\xf7\x74\xa3\xec\x83\x1f\x64\x9d\x6d\x2d\xfe\xae\x88\xab\x4a\xfc\xee\x3b\x1b\xc6\x5e\xfc\x68\xf0\x1f\xb1\xa6\x7b\x5b\xb6\x36\x94\xa3\x0d\xd5\x60\x43\x5e\x49\x4c\x72\x1f\xb6\xe0\xdb\x6a\x94\x98\x61\x2e\xec\x25\x0e\x3b\xe2\xa0\x97\x18\xc4\x16\xe2\x99\x7d\xcf\x75\xaf\x52\xfc\xd5\xda\xd0\xe7\x1a\x0f\x46\x72\xc7\x97\xba\x26\x6c\xc7\xdf\x8d\xf8\x7b\x70\x5b\x5f\x0f\xb9\xe4\x11\xf1\x54\x6a\x7c\xf8\x46\xec\x60\xed\xc4\xbf\x69\x64\x7f\x88\x87\x4e\xf7\x7f\xc4\x77\x83\xc4\x10\x6b\x2b\x7b\x1b\x5c\x2b\xeb\x66\x3c\x72\x80\xfd\xe5\x9e\x8c\x9c\xc8\xd5\xf7\x46\xfc\x91\xb7\x1a\x0f\x83\xe4\x6a\x8c\x99\xc2\x86\x62\x90\xfd\xe8\xbd\xd8\x93\x6a\xbe\x8d\xa5\xd8\xb3\x9b\xfb\xfc\xa5\xad\xd8\xdb\xe3\xc7\xd4\x86\x0c\xbc\xc8\x37\xf7\x5d\x6c\xa4\xc0\x11\xd8\x28\x4b\x9d\x62\xff\x0d\x97\xed\xa8\x87\xe9\x64\x72\x8c\x57\x57\xd3\xc9\xe4\xe2\x58\x0b\x5e\x5c\x4d\x27\xb3\x17\x62\x39\x7a\x8a\x39\xff\x2d\xd2\xe1\xee\x9c\x91\x0f\x5f\x44\xc7\x6b\xd6\xfe\x15\xaf\xbf\xd0\x71\x24\xd4\x9b\xf7\x87\xe0\xfc\x09\xda\xba\x49\x4e\x1a\x9d\xc0\x4b\x37\x49\x69\xaa\xab\x04\x86\xb9\xd9\x25\xa0\xcb\xc2\x54\xb3\x78\x1d\xde\xb8\x11\x5e\xf9\xf5\x71\x1e\x2e\xb3\xaa\xac\xb3\x22\xcf\x4c\x79\x95\xa4\xb3\xcf\xd3\x89\x63\xde\x7f\xc5\x05\x7e\x8a\xab\xba\x49\x74\x71\x18\x75\x13\xff\xff\xf9\xc5\xc9\xee\xea\x04\x27\xbc\x88\xe8\xb7\xd3\x02\x90\xdc\x8c\x92\x46\xbd\xa6\x44\x0c\x8f\x54\xd2\x74\xec\x24\x44\x1b\x27\xa1\x58\x2b\x5c\xf0\x2f\xf7\x3a\x0d\xcb\x18\x82\x85\xc0\x20\x29\x43\xf8\x17\x0a\xcf\xae\x97\x30\xcd\x9b\x6d\x9a\x92\x8a\x40\x7f\x9a\x29\xbc\x03\x0b\x40\x6f\x2d\x50\xdf\xa6\x9a\xf6\x83\x8c\x51\x01\x11\xad\x50\x0d\x69\xef\x8c\xd0\x59\x3b\xd8\x50\xf2\xdd\xd9\x50\xf5\x92\xb2\x50\x06\xeb\xae\x34\x45\x48\x23\xd2\x1d\xc8\xe2\x99\x22\xb7\xa1\x2c\xb6\x7e\x00\x76\xcb\x52\xa0\x76\xf4\x02\xef\xd0\x09\xb6\x54\x99\xc0\x09\xb0\x01\xf4\xb0\x56\xa0\x85\xd4\xa9\x37\x10\xe6\x04\x3e\x23\x6c\x18\xa1\xa0\x08\xc1\x83\xf8\xaa\x55\xba\x84\x4a\x58\x43\x87\xbf\x6a\x1b\x86\x46\xae\xe7\x83\xa4\x25\x69\x0e\x9c\x03\xd3\xf8\x1e\xca\x65\x0d\xd0\x2f\xb4\x84\x1f\xd8\xa3\x3a\x15\x38\x66\x8d\xad\xd2\x04\x7e\xc8\x48\xe7\x52\xfd\xae\x70\x43\xca\x03\xc1\xad\x13\x08\x64\x3e\x3e\x43\xc3\xec\x3b\x50\x5b\x00\x75\x5e\xe8\x36\xda\x85\x4d\xb9\x50\x56\xa4\x58\xb5\x2f\xe7\x7b\x29\x74\xee\xa0\x97\x5a\xc6\x74\x4a\x51\x5e\xd7\x0c\xdd\x01\x61\x40\x26\xd7\xb2\xfc\x18\x8e\x8c\xae\x93\x18\xf0\xad\xf8\x9f\x58\x38\x09\x47\xfb\x71\xfe\x56\x44\xda\x1f\x65\x0b\x4a\x87\xa5\xe8\x29\x5c\xda\x7f\xf6\xcb\xa1\xe9\xa4\xe5\x67\x45\xa7\x63\xeb\x15\xa0\x4c\x91\xfd\x5d\x80\x6a\xcb\xb2\xca\x9a\xfc\x7c\x00\x65\xbe\x1e\xa0\x5c\x21\x41\xde\x2b\x08\x35\xaa\x5b\xd1\x2a\x70\xf4\x46\xb7\xf2\xdb\x26\xb0\xfa\x4d\xf0\x2a\xa0\xa0\xdd\x48\xe4\x2c\x93\x67\xd0\x80\xf0\x70\x56\xdb\x50\x2b\x18\x01\x10\x68\x00\x40\x0c\x2d\x02\x48\x18\x2f\x7c\x0e\x00\x02\x84\x68\x52\x9e\x21\xd8\x01\x10\x00\x83\x44\x8b\x89\xd9\x8a\x5d\x80\x19\x3a\x2c\xda\xde\x4a\x72\xa1\x57\x09\x70\x92\x09\x70\x21\xa1\xb3\x4a\xe6\x01\x38\x48\xb6\x66\xa3\x39\x9d\x80\xe5\x06\xc0\xd0\x81\xbe\x10\x70\x40\x53\xe1\x0b\x12\x07\xad\x8d\x96\x44\x4f\x45\x20\x06\x58\xd4\xbe\x02\x9d\x90\x0b\xf0\xa1\x03\xb3\x42\xef\x03\x08\x2a\x59\x5b\x9d\xc9\x78\x3c\x03\x10\x45\xfd\xd2\xca\x3a\xd0\x5a\xd8\x6c\x2a\x19\x03\x4d\x04\x50\x00\xe4\x43\x2a\xfa\x1c\xed\x09\xe8\xa2\x01\x01\x81\x41\xc1\x90\x71\x36\x80\x8c\xb6\x25\xb9\x6b\x05\x2d\xc0\x0b\x40\x40\xef\x02\xb4\xf8\x2d\x55\x00\x62\x3d\x79\x2f\x76\xc5\x3d\x05\x4c\x53\x01\xfa\x08\xe8\xb9\x00\x2f\xda\x3a\x57\xed\xc2\xda\xf0\x73\xd1\xc9\x3a\xd0\x62\xf8\x98\xb8\x82\xd8\x86\xcd\x33\x9d\xe8\xe2\x4e\xc1\x6c\x53\x03\x14\xa3\xe8\x66\xfc\x0b\xf8\xd4\xbd\xd8\xc1\x9a\x59\x03\x5a\x12\x52\x61\x2c\xee\xcf\x9c\xe8\x56\xb4\x34\xfa\x94\x78\x1a\x55\xfb\xa3\x55\x23\x61\xf4\xe2\x63\x80\x18\xa0\x8f\x60\xd8\xcb\xbe\x3a\x25\x0a\x62\x13\x3d\x8c\x7f\x59\x3b\x84\x77\x18\xf7\x51\x6b\xf6\xa2\xed\xf1\x77\xa6\x84\xf3\xaa\x66\x33\x67\x01\x49\xf3\x0a\x48\x1e\xb6\xe5\x4e\x81\xa4\x79\x23\x48\x9e\xb4\xfc\xac\x20\x79\x6c\xbd\x82\x64\x65\xda\xb7\x80\x64\x71\x4e\x15\xa7\x8d\xcd\xb7\x43\x64\xad\xa5\x7d\xe4\xd4\x4e\x20\xc8\xa8\x86\x23\x1d\x6b\x2d\x35\x81\x18\x3e\x37\xbd\x96\x44\x46\x53\x48\xd3\x1f\x58\xc8\xb5\xd4\x25\xfc\x1b\xd5\x2d\xa4\x24\xa5\x35\xb0\xc6\x33\x46\x75\x44\x5f\x8b\x06\x00\x0a\x29\x49\x80\x42\xee\xc3\x9e\x5c\xa1\x24\x96\x81\xa3\xfc\x16\xcb\xe0\x42\xdb\x09\x0a\x0f\x4e\x75\x20\x1a\x86\x92\x98\x67\x53\x4d\x51\xd2\x0f\x1d\x09\x54\x46\xe8\xed\x45\xc3\x99\x5c\xa0\xbd\xd2\xf2\x99\x34\xe4\xde\x0c\x5f\x55\xa2\x55\x80\x6d\x34\x2d\x6b\xc8\x14\x56\x28\x8d\xf0\x13\x90\x52\x36\x5b\xbf\x02\x4d\x68\x30\xf4\x0f\xe3\x75\x0a\x21\x8c\x97\xa9\xce\xa1\xa4\x03\xc6\x32\x85\x92\x51\x4b\x3d\xf4\x68\x2c\xab\x07\x81\x06\xb4\x69\xae\xba\x17\x9a\x40\x8f\xb2\x46\xca\x70\xb4\x21\x3a\x0b\xb8\x65\x1c\xfc\x18\xa1\xc5\x88\x6d\x46\xdb\x06\x94\x80\x5e\xe1\xac\x55\xdf\xa3\x3d\xd1\x6d\x40\x4d\xa4\xa5\x52\x20\x19\x5b\x9d\xc2\x3f\xf0\xeb\x6a\xf1\x5f\xf4\x65\xad\xf6\x56\x12\x27\x11\x96\x3b\x81\x28\xe6\x60\x6d\x95\x17\x5f\x03\x47\x31\x3e\x9c\xfc\x8b\x06\x84\x5e\xd0\x8f\x85\x6a\xc2\x48\x69\xb5\xc0\xb4\xd1\xb2\x7c\xd4\xd2\x16\x7f\xa2\x59\xd1\x88\xc0\xe3\xa0\xe5\x34\x63\x10\x2b\xe8\xca\x7e\x43\x37\x5e\xb5\x6d\xaf\x36\x3b\xf1\x0f\x6b\x8a\x94\x63\x04\xfe\x19\xa3\x56\xd8\xc3\x4f\x50\x68\x84\xeb\x41\x62\x0a\xd8\x86\x4e\x9d\x52\x75\xa3\x94\xd2\xe9\xfe\x03\xc3\x68\xf1\x4a\xcb\x7d\xd6\x10\xc7\x1d\xa5\x8d\xc4\xfc\xec\x3b\x90\x1f\xa1\x5e\x75\x28\x75\x08\xf4\x86\xe4\x28\xd4\xd7\x68\x65\xf6\xa1\x57\x6d\x1b\x29\x55\xed\x61\x8d\xec\x13\xd0\x6c\x8c\xd0\xf7\xa6\x95\x42\x3e\x42\x67\xf8\xa7\xd7\xda\x21\x57\x2a\x1f\x5b\xa1\x65\xb4\x34\x54\x44\xdd\xc4\x35\xe6\xe1\x59\xc6\x8e\x52\xc1\x09\xad\x53\x4b\x40\x65\xf8\x8f\x7a\x80\x9a\x2b\x52\x4b\x79\x4c\x1d\x85\x52\x66\xac\xb1\x06\xad\x5d\x5e\xd3\xd7\xbb\x08\xf4\x56\xe2\xd8\x1d\x63\x4b\x1b\xfb\x87\x36\xa7\x48\x63\xf7\xb9\x2f\xa7\x8c\x13\x16\x9f\x95\x30\x0e\xed\x56\xba\x28\xd2\xbf\x4f\x17\xb5\x29\xd3\xaa\x3e\x1f\x5d\xbc\x1c\x78\x7d\x5d\x2f\x18\x2d\x06\x61\xa4\x5e\x34\x66\xae\xbd\x60\x82\x09\x8d\x87\x4e\x22\xd9\xbd\x16\xa9\x04\x74\xa1\x3d\xd7\x4a\x09\xa0\xd4\x42\x34\x26\x4e\x2e\x81\x0c\x30\x93\xe8\xb1\xe7\xa7\x7f\x24\x17\xfa\x88\xa2\x1a\xed\x07\xc8\xa0\x79\x73\x27\xf3\xc7\xfe\x59\x2f\x63\x00\x46\x31\x09\xf4\x0f\x12\x41\xfb\x78\x2f\xb6\x61\x37\xa0\x4b\x12\xa1\xe1\x09\xf0\x08\xb0\x9d\x24\xe2\x30\x68\x13\xc2\x4b\x02\x93\xfc\x68\x50\x12\x0f\x20\x1f\xb4\x98\x06\x20\x8b\x56\xc1\xa3\x14\x62\xc3\xa6\xf8\xbd\x3e\x4e\x28\xc0\x1b\xdd\x46\x7d\x40\x62\xd6\x66\xd7\xaf\x07\x09\xb5\xbf\x47\x6f\x4d\xa9\xfd\x51\xb6\x49\x75\x78\xe4\x79\x2a\xad\xf6\x9f\xfd\xf2\xc4\x3a\x69\xf9\x59\x53\xeb\xd8\x7a\x4d\xae\x2c\x2b\xff\x76\x72\xb5\x69\x61\xd2\x33\x6a\xb1\x97\x43\xe3\xaf\x28\x58\xb5\xdb\x45\x02\x81\xc2\x7d\xa5\x6a\x4c\x0f\x47\x46\x3d\x14\x80\x11\x51\x25\x85\x76\xb9\x22\xfb\x6a\x71\x93\x69\x61\x98\x69\xc7\x2c\x36\xfb\x4b\x51\x68\x99\x36\x91\x29\x7a\x50\x04\xad\xd7\xc3\x9a\x46\x58\x90\x39\x61\x4d\x82\x19\xb6\xa3\xb8\x88\x85\xad\xfe\x06\x53\x75\x7a\x78\x80\x42\xe2\x19\x94\x4b\x6c\x48\x6b\x83\x18\x55\x31\xb4\x02\x04\xa8\xad\xb8\x86\x4e\x94\x21\xc9\xc7\xb8\xb0\x2f\x36\x53\x98\x8e\x7a\x20\x42\xe1\x8d\x3d\x5e\xed\xcc\x94\x85\x46\x2d\xbc\x63\xe2\x7a\x99\x3f\x32\xa7\x1e\xb6\x74\x7a\x18\x51\x68\xd1\x4a\xb2\x92\xa0\x3c\x1f\xbb\x53\xa8\xdc\x52\xd6\xbd\x29\x50\x61\x5f\x9e\xed\xb5\xa3\xc5\x18\x5e\x8b\x63\x98\x3d\xae\xaf\x50\xd5\xda\x4b\x57\x33\x16\xa2\x95\xec\x21\xc0\x01\x23\xc3\xb0\x30\x3e\x85\x65\xaf\x6a\x15\xff\x45\x70\x4b\xb5\xf8\xd4\xc3\x84\xd8\xe1\x1c\x65\xdf\x62\x53\x41\xbb\x99\xf8\x1a\x3f\x97\x6a\x37\xf6\x03\x3c\x00\x4e\xaa\x07\x21\xec\x17\x7b\xe0\xf5\x10\x2a\x76\x3a\xcd\xb6\x50\xee\x55\xf5\xa2\x40\x62\x3c\xe4\x0a\x80\xaa\x96\x7a\x55\x42\x00\x71\xaa\x9d\xcc\x5c\xe3\x2a\x82\x99\x97\x35\xa2\x54\x8c\xaa\xc1\x8d\x52\xa2\x58\x05\xd4\xa2\x6d\xd5\xb6\xa3\xea\xd4\x6e\x94\x52\xa9\xb1\x3a\x28\xc0\x9f\x2a\x48\xf1\x77\x56\x6a\x55\x51\xc8\x5e\xbf\xaa\x2a\xf6\x73\xe9\xad\x20\xb8\x3f\xca\x16\x04\x0f\x5f\xef\x38\x05\x82\xfb\xcf\x7e\x39\x08\x9e\xb4\xfc\xac\x20\x78\x6c\xfd\x46\x61\x64\xc5\x5b\x40\xb0\xce\xb3\xf3\x81\xe0\xf6\x05\x99\xb7\xa3\x20\x19\xd7\x2b\x4a\xa5\x8a\x02\xc8\x8d\x58\x93\x16\x7a\x86\x80\x3c\x18\x25\x0a\x5b\x6d\xc5\xc5\xa3\xe8\x54\x22\x96\xcf\x44\x98\xd3\xfa\x92\xe8\x8e\x91\x9e\x69\x3d\x95\x69\xcb\xa9\x13\xf9\x10\x6b\xa6\x5e\xbe\xc7\xd6\xd6\x46\x5a\xa8\x54\x88\xc7\x7d\x8d\xf4\xe9\x33\xad\x65\x2b\x3d\xd2\xe4\x73\xad\xc7\x8f\xd4\x1a\x64\x25\xf5\x2d\xd9\xc5\x35\x37\xca\x9c\xa0\xd0\xa8\x47\xa9\x85\x1e\x11\x32\x37\x75\x06\x76\xc5\x63\xb9\x46\x65\x8e\xd6\x1d\xcc\x0d\x52\x38\xad\xed\xf8\x0c\x0a\x62\x07\x08\x45\x9d\x43\x96\x82\x16\x11\x29\x6a\xd1\xf9\x20\x1c\xe8\xcc\x7c\xb1\xce\xd7\xb5\x81\x46\xa0\x6e\x3c\x42\xd6\xa3\xe1\x3e\x95\xa3\xc9\x78\x1c\x68\xc4\x2f\xcc\x15\xd1\x27\xd7\x63\x4d\xea\xdf\x5c\xee\x1b\xf6\x32\x77\x9b\xe1\x4e\xc7\xe7\x5e\x50\x3e\x66\xf8\x6b\x32\xe7\x20\x50\xde\x9a\xe2\x07\xc3\x6c\x73\xfc\xe8\x4d\xad\x53\x49\x7e\xf0\xf4\x97\x67\xf9\x69\xeb\xcf\x9a\xe6\x27\x16\xb0\x11\x3b\x65\xf3\x86\x3c\x2f\x8b\xa2\x3a\x5f\x9e\x6f\x5e\x77\xfb\xba\xd3\x43\x78\x8b\x4c\x8c\x1d\x10\xcd\xf2\xb4\xdf\x66\x79\xa7\x02\xbd\x55\x7d\x42\xb6\x97\x3b\x4d\x6a\xd3\x4b\xd1\x80\x7e\x81\xc3\x3a\x3d\x4d\x44\x6f\x14\xda\x4d\x82\x97\x89\xd6\xd8\x58\xcd\x25\xc3\x62\xc4\x1a\xc9\xb8\xc8\xb7\x83\x68\xaf\x5c\xb5\xcf\xa0\xd1\x0e\xcf\x76\xb9\x74\x16\x72\xd5\x52\x20\x42\x2c\x76\x32\x6d\xb0\xb7\x92\xc1\xe3\xa6\xa1\xed\x24\x4b\xc9\xf8\x41\xbb\x4b\x54\xd1\x14\x1f\xa5\x76\x19\xe0\x7f\x10\xab\xd3\x17\x56\x5a\x45\xb4\xaa\xd1\xc2\xa3\x93\xb1\x40\xc1\x5c\x1b\xde\xb1\x1a\xaf\x65\xdd\x71\x0d\x46\xbb\x18\xaa\xf5\xf0\x03\xe3\xf5\x3a\x17\xa8\x53\x6b\xf7\xa0\xd5\x17\x48\x0a\x3d\xa5\x64\xae\x5e\x3b\x0f\xbe\x14\x5e\x3e\xcc\xe6\x52\xb5\x47\x9b\x8a\x4e\xe9\xff\xac\x68\xd9\x0b\x87\xb7\xe6\xf2\xde\x20\xdb\x4c\x3e\x78\xb3\xf2\x54\x1e\xef\x3d\xf9\xe5\x59\x7c\xca\xea\xb3\xe6\xf0\x91\xe9\x9b\x0c\x6e\xdf\x52\xae\x54\x69\x7a\xc6\x0c\x7e\x79\x31\xf5\x2b\xcf\xd7\x8c\xa4\x70\xa3\x67\x33\xbb\xcd\xe3\x78\x16\xe3\x55\xea\xb7\xd2\xf4\x23\x9c\x20\xcc\x41\xa5\x2b\x69\x4a\xea\x0e\xda\xfc\x2b\x95\xf0\x91\xaf\xf1\x1d\x30\x3d\xff\x88\x67\x37\x95\xca\x4c\x95\x9a\xa4\x79\x59\x48\x6a\xc7\xb3\xbd\x42\xc8\x91\xf2\xa3\xd3\x3a\x7f\x73\xc0\x0d\x59\x52\x56\x50\x2a\x94\x9a\x6a\x10\xb2\xd1\xe6\x34\x69\x1c\xcb\x9d\x5a\xcf\x76\x8c\x12\x9e\x93\x17\x0c\xe2\x41\x7c\x21\xcd\x52\xec\x73\x2a\x48\xa2\x9c\xae\x64\x1e\xe0\x20\x36\xd1\x53\x99\x33\xd5\x7f\x4d\x23\xb0\x10\x61\xcd\x49\x2f\x02\x08\xc8\xb5\x51\x9e\xea\x0b\x05\x8d\x36\x93\x63\x89\x56\x49\xb9\x92\xea\x7b\x6e\xb1\x69\x6d\x44\xe0\x64\x95\xa4\x63\xae\xef\x40\x39\x85\x01\x60\x30\x96\x63\x4e\xec\xc5\x0f\x48\x76\xd6\xd3\xec\x36\x94\x37\x8d\xe3\x4a\x04\x04\xa4\xce\xe7\xb2\xdc\x36\x3f\xbb\x7e\x5b\x8e\xa6\x5a\x9e\x45\x91\xd4\xe8\xbb\x44\x8d\x8c\x89\x1f\x6a\x2d\xa5\xba\x54\xae\x47\x18\xf6\xda\x68\x55\xc8\x01\xa2\x28\x4f\x11\x22\x5e\x4b\x91\xb8\x77\x83\xf6\x43\x8c\x42\xce\x28\xc2\xa4\x51\x81\xd5\x37\x22\x4a\x10\x70\xb1\x77\xe4\xa4\x89\x6e\xf4\xec\xb0\xd6\x73\xc6\x32\xdd\x96\x4a\x9b\x26\x32\xf1\xd8\x69\x39\x04\x65\xd4\xfa\x7e\x1a\x3e\x32\xda\xdc\x8c\xbe\xd1\x72\x86\x31\xba\x56\xcf\xd6\x8c\x36\x4a\x5b\x89\x89\x51\x9b\xb1\x08\xad\x5e\x1b\xbe\x4e\xcf\x2d\x73\x6d\xba\x36\x6a\x5f\x7c\x21\x46\xe3\x0e\xb1\x95\xf7\xda\xbf\xd2\x98\x65\x2f\x89\x2b\xe2\x90\xbd\x8b\xa5\xb4\x96\xa7\x08\x2f\x72\x8a\x58\x23\x26\x63\x13\xb9\xd3\x86\x6c\x21\x7b\xdb\xa9\x4f\xb8\x8f\x38\xad\x32\x59\x17\xa5\x6c\xa5\x2f\xd0\x40\x03\x46\x0f\x07\xa2\x80\xec\xa5\x91\x0b\x8d\x42\x4d\x8d\x1e\xdc\x50\xe6\xa5\xad\xc4\x14\x74\x41\xac\x46\x41\x9d\x6a\xc3\x7b\xf3\x72\x87\xee\x25\x65\x77\xa6\xef\x4d\xc6\x17\x4c\x54\x28\xc6\x03\x92\x4e\x69\xb2\xd2\xf7\x02\x9d\xbe\x28\xd2\xd8\xf0\xff\x01\x00\x00\xff\xff\xab\x13\xb2\x2a\x00\x30\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 28672, mode: os.FileMode(436), modTime: time.Unix(1660582857, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\xb1\x0d\xc5\x20\x0c\x04\xd0\x9e\x29\x6e\x01\xa0\xff\xdb\xdc\x4f\xac\x13\x42\xb1\x11\xf1\xfe\x4a\x93\x22\xf5\x7b\x8b\xc7\xa4\x0c\xd7\xd0\x66\x8e\xf0\xbb\x94\xde\x15\x3f\x99\xdb\x66\x1a\x14\xf5\x3f\xfc\x64\x12\x75\x4d\x7d\x26\x6a\xe0\xa5\xa6\x00\x5a\x79\x02\x00\x00\xff\xff\xe6\x24\xd8\x86\x4e\x00\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 78, mode: os.FileMode(436), modTime: time.Unix(1656363775, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init.up.sql":       _000001_initUpSql,
	"000002_indexes.up.sql":    _000002_indexesUpSql,
	"000003_indexes.up.sql":    _000003_indexesUpSql,
	"000004_posts.up.sql":      _000004_postsUpSql,
	"000005_collate.up.sql":    _000005_collateUpSql,
	"000006_charset.up.sql":    _000006_charsetUpSql,
	"000007_dtupdate.up.sql":   _000007_dtupdateUpSql,
	"000008_delupd.up.sql":     _000008_delupdUpSql,
	"000009_dialogs.up.sql":    _000009_dialogsUpSql,
	"000010_user_shard.up.sql": _000010_user_shardUpSql,
	"bindata.go":               bindataGo,
	"migrations.go":            migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init.up.sql":       &bintree{_000001_initUpSql, map[string]*bintree{}},
	"000002_indexes.up.sql":    &bintree{_000002_indexesUpSql, map[string]*bintree{}},
	"000003_indexes.up.sql":    &bintree{_000003_indexesUpSql, map[string]*bintree{}},
	"000004_posts.up.sql":      &bintree{_000004_postsUpSql, map[string]*bintree{}},
	"000005_collate.up.sql":    &bintree{_000005_collateUpSql, map[string]*bintree{}},
	"000006_charset.up.sql":    &bintree{_000006_charsetUpSql, map[string]*bintree{}},
	"000007_dtupdate.up.sql":   &bintree{_000007_dtupdateUpSql, map[string]*bintree{}},
	"000008_delupd.up.sql":     &bintree{_000008_delupdUpSql, map[string]*bintree{}},
	"000009_dialogs.up.sql":    &bintree{_000009_dialogsUpSql, map[string]*bintree{}},
	"000010_user_shard.up.sql": &bintree{_000010_user_shardUpSql, map[string]*bintree{}},
	"bindata.go":               &bintree{bindataGo, map[string]*bintree{}},
	"migrations.go":            &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
