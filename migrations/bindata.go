// Code generated by go-bindata.
// sources:
// 000001_init.up.sql
// 000002_indexes.up.sql
// 000003_indexes.up.sql
// 000004_posts.up.sql
// 000005_collate.up.sql
// 000006_charset.up.sql
// 000007_dtupdate.up.sql
// 000008_delupd.up.sql
// 000009_dialogs.up.sql
// 000010_user_shard.up.sql
// bindata.go
// migrations.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\xdf\xd6\x4a\x3b\x94\x69\xa0\x49\x3b\x21\xb4\x03\x07\x86\x84\xc6\xb9\x4a\x5b\xb7\xb3\x48\x9c\xc9\x49\x60\x7d\x7b\xd4\xa6\x53\x35\x60\xe2\xe6\xfa\xf3\xf7\x37\x89\x2b\xec\x88\xb7\x4a\xd5\x82\x3a\x20\x04\x5d\x19\x04\x6a\x81\x5d\x00\x3c\x93\x0f\x1e\xa2\x47\xf1\x2a\x53\x00\x30\xd6\x25\x35\x00\x50\x51\x47\x1c\xe0\x24\x64\xb5\xf4\xf0\x81\x3d\x3c\xbe\x1f\x5e\xcb\xe7\xfd\xd3\xdb\xee\x65\xb7\x3f\x80\x8e\xc1\x95\xc4\xb5\xa0\x45\x0e\xcb\xd1\x37\xae\x23\x1e\x0a\xf8\xd4\x52\x1f\xb5\x64\xab\xa2\xc8\x87\xef\xe1\x87\x1c\x8d\x49\x73\x68\x35\x99\xab\xb9\xbb\xa2\xc8\x13\x3b\x1d\x1d\xe3\x35\xbb\xbf\x20\xed\xfd\x97\x93\x66\x46\x0f\xeb\xfc\x47\x34\x6b\x9b\xec\x59\x5f\x6d\x26\xdf\x47\x99\xf0\x6f\xa6\xbb\x49\x03\xba\xdc\xc6\xe3\x79\x6a\x21\x47\x0b\xd9\xc2\x6a\x83\x8b\xe5\xa2\xc5\xb1\x98\xc4\xda\x45\x0e\xd2\xff\x19\x5a\x53\xe8\x6f\x1d\x86\x38\xa0\xe0\xb0\x81\xf9\xad\xd6\x9b\x5c\xa9\xfc\xff\x7d\x95\xad\x10\x72\x73\x63\x6b\x29\x3f\x8d\x0c\xfd\xd4\x4d\xb9\xce\x5a\x0a\x5b\xf5\x1d\x00\x00\xff\xff\x09\xe8\xcf\x40\x18\x02\x00\x00")

func _000001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initUpSql,
		"000001_init.up.sql",
	)
}

func _000001_initUpSql() (*asset, error) {
	bytes, err := _000001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init.up.sql", size: 536, mode: os.FileMode(436), modTime: time.Unix(1657142135, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_indexesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xbb\xca\x83\x40\x10\x46\xfb\x7d\x8a\x29\x7f\xe1\x7f\x83\xad\x0c\x5a\x04\x24\x45\xb0\x48\xb7\xac\xce\x28\x03\xba\x0b\x7b\x01\xf3\xf6\x41\x27\xf7\x90\x26\xdd\xb7\x67\x39\x07\xa6\xa3\x91\x9d\x56\xaa\x6c\xda\xfa\x08\x6d\xb9\x6b\x6a\xc8\x91\x42\x54\x00\x00\x65\x55\xc1\xfe\x50\xd5\x27\x61\xc6\xd9\x99\x0c\xe3\x02\x7f\xeb\xfa\x87\x98\xc3\x3a\x0a\xfd\xe1\x9b\x21\x30\x39\xbc\x57\xd8\x21\x2d\xcf\x3f\xd1\x64\x46\x69\x6d\x94\xf1\xb7\xca\x70\xab\x08\x90\x8e\x9d\x12\x05\x48\xb6\x9b\xe8\xed\x9a\x47\x21\x9a\xc9\x8f\xec\x44\xde\xe6\x57\xd1\x22\xbe\x88\xbd\xcf\x2e\x85\xb3\xa8\xd7\x47\xa1\x95\xea\xfd\x3c\x73\xd2\xea\x12\x00\x00\xff\xff\x31\x64\x7b\xe9\x55\x01\x00\x00")

func _000002_indexesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_indexesUpSql,
		"000002_indexes.up.sql",
	)
}

func _000002_indexesUpSql() (*asset, error) {
	bytes, err := _000002_indexesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_indexes.up.sql", size: 341, mode: os.FileMode(436), modTime: time.Unix(1659556182, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_indexesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xcd\x8a\x83\x30\x1c\xc4\xef\x79\x8a\xff\x31\xc2\xbe\x81\x27\x25\x61\x11\xc4\x5d\x5c\x17\x7a\x0b\x6a\xa2\x04\x34\x42\x3e\xa0\x7d\xfb\xe2\x17\x95\x54\xc1\xb6\xb7\xc9\x30\xf3\x23\xff\xa9\x44\x2b\x55\x88\x50\x94\x16\x34\x87\x22\x8a\x53\x0a\xce\x08\x6d\x80\xe4\x3f\xbf\x90\x64\x84\x5e\x66\x83\xa9\xb2\x17\x4c\xf2\x6b\xf8\x14\x66\x8d\x96\x42\x71\xbf\xb2\xd8\x86\x39\xc9\xdf\x2b\x36\x6b\xb1\xec\xac\xd0\x60\xcb\xaa\x13\x47\xdf\xeb\x86\x56\xaa\xd3\xe9\x7a\x70\xca\xea\xdb\xfe\xb7\x0c\x44\x84\x2c\x71\xef\x78\xc0\xa3\xfa\x02\xe3\xf4\x28\x02\xf8\xff\x4b\xb2\x6f\x88\x8b\x9c\xd2\xe3\xfb\x1e\xb8\xbd\x5d\x00\x4f\xae\xe4\x01\x7c\x84\x6b\x56\xdc\x6c\x9c\x00\x1a\x0f\xb5\x59\x11\xf0\x24\x5f\x27\x6c\x96\x05\xbc\x3c\x7c\x0a\xaa\x87\xbe\x97\x36\x44\xf7\x00\x00\x00\xff\xff\x1c\x37\x60\x12\x7f\x02\x00\x00")

func _000003_indexesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_indexesUpSql,
		"000003_indexes.up.sql",
	)
}

func _000003_indexesUpSql() (*asset, error) {
	bytes, err := _000003_indexesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_indexes.up.sql", size: 639, mode: os.FileMode(436), modTime: time.Unix(1659556435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000004_postsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x31\x6b\xf3\x30\x10\x86\x77\xfd\x8a\x77\x8c\x21\x43\xf8\xf8\x86\x42\x26\x25\x56\x8b\x21\x71\x82\x23\x43\x37\x21\xc7\xd7\x54\xd4\xb6\x82\x74\x29\xc9\xbf\x2f\xb6\x3c\xb4\x94\x6a\xd3\xab\x7b\x8e\xe7\x74\x0d\x5d\xdc\xb0\x16\xe2\x1c\xc8\x32\x81\x6d\xd3\x11\xdc\x1b\x06\xcf\xa0\xbb\x8b\x1c\x71\xf5\x91\xa3\x58\x08\x00\x70\x2d\xe6\xd3\xb8\x8b\x1b\x18\xd7\xe0\x7a\x1b\x1e\xf8\xa0\x07\x64\xad\x0f\xa6\x28\xb7\x95\xda\xab\x52\xc3\xde\xd8\x1b\x37\x9c\x03\xf5\x34\xf0\x72\xe2\x6f\x91\x82\x99\x9a\x24\x3e\xa5\xec\xb8\xa3\xa9\xeb\xa7\x0d\xe7\x77\x1b\x16\xff\x56\xab\x6c\x72\x18\x6e\x5d\x97\x8a\x7a\x8a\xd1\x5e\xe8\x47\xd1\xff\xa7\x2c\x3d\x26\xfd\xd6\x58\x46\x2e\xb5\xd2\xc5\x5e\x21\x57\xcf\xb2\xde\x69\x6c\xeb\xaa\x52\xa5\x36\x63\x78\xd2\x72\x7f\x9c\x55\xae\xed\x2f\xe4\x50\xa2\x3e\x8e\xb7\xbf\xa0\x96\x3a\x62\x6a\xd1\x78\xdf\x89\x6c\x2d\x84\xdc\x69\x55\x41\xcb\xcd\x4e\xa5\x8f\x82\xcc\x73\x14\x65\xae\x5e\x91\x02\x33\xce\x1c\x8d\x6b\xef\x58\xcc\xe3\x2f\xbf\xf9\x66\xa8\x4f\x45\xf9\x82\x8d\xae\x94\x1a\x17\xe1\xfb\xde\xf1\x5a\x7c\x05\x00\x00\xff\xff\x4a\x02\x7b\x0d\x99\x01\x00\x00")

func _000004_postsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_postsUpSql,
		"000004_posts.up.sql",
	)
}

func _000004_postsUpSql() (*asset, error) {
	bytes, err := _000004_postsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_posts.up.sql", size: 409, mode: os.FileMode(436), modTime: time.Unix(1659735067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000005_collateUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xca\x31\x0e\x80\x20\x0c\x05\xd0\xbd\xa7\xe8\x21\x1c\x4c\x88\x67\x21\x50\xab\x69\x52\xa8\x81\xcf\xfd\x9d\x9d\xdc\x5f\xd5\xdb\x7a\x22\x2a\x0e\x1d\x8c\x52\x5d\xf9\x89\x89\xc9\x12\xee\x05\xca\x07\x2f\x5c\x7b\xab\x5b\x5e\xdd\x24\x4e\xcd\x62\xe9\xe3\xd7\xd4\xf1\xe7\x49\xa2\x35\x43\x22\xa2\x37\x00\x00\xff\xff\xc3\xbe\x04\xae\x73\x00\x00\x00")

func _000005_collateUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_collateUpSql,
		"000005_collate.up.sql",
	)
}

func _000005_collateUpSql() (*asset, error) {
	bytes, err := _000005_collateUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_collate.up.sql", size: 115, mode: os.FileMode(436), modTime: time.Unix(1659904305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000006_charsetUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xce\xbd\x4a\xc6\x30\x14\xc6\xf1\x3d\x57\x71\x46\xdd\x8a\x74\x28\x14\x87\x18\x03\x0e\xc5\x42\x1b\x5c\x4b\x9a\x9e\xd6\x48\x3e\x4a\x72\x22\x78\xf7\xa2\x0e\x4a\x91\xbe\xcb\xbb\x3e\x0f\xfc\xf8\xcf\xb8\xd9\xd0\x32\xc6\x3b\x25\x07\x78\xe4\x8a\x3f\xf0\x51\xc2\x9e\xe2\x1b\x1a\x02\xf1\xc4\x07\x2e\xbe\xae\x51\x2a\xb8\x87\x42\x6b\xe3\xe7\x1a\x44\xdf\x75\x5c\xc9\xdf\x65\x2a\xc1\x9a\xb8\xe0\x64\x6c\xcb\xb4\x23\x4c\x40\x7a\x76\x08\x7b\xcc\x94\x41\xf4\xcf\x2f\x72\x50\xa0\xfa\x03\x79\x04\x2f\x71\x25\x63\xba\x22\xf7\x53\xe7\xe3\x62\xd7\x0f\x20\x4b\x0e\xe1\x5d\x27\xf3\xaa\xd3\xcd\x5d\x55\xdd\x82\x89\xce\x69\xc2\x7f\x1c\x08\x91\x20\x14\xe7\x4e\x40\x8f\x39\xeb\xed\x2f\x59\x37\xe7\xe6\xb7\x67\xa2\xf7\x96\x5a\xc6\xd8\x67\x00\x00\x00\xff\xff\x2a\x15\x86\x74\x9e\x01\x00\x00")

func _000006_charsetUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000006_charsetUpSql,
		"000006_charset.up.sql",
	)
}

func _000006_charsetUpSql() (*asset, error) {
	bytes, err := _000006_charsetUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000006_charset.up.sql", size: 414, mode: os.FileMode(436), modTime: time.Unix(1659904721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000007_dtupdateUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xe1\x0a\x82\x30\x10\xc0\xf1\xef\x7b\x8a\x7b\x01\x9f\x60\xf4\x41\x6a\x41\xa0\x16\x3a\x3f\xcb\xd4\xab\x06\x3b\x27\xee\x46\xf4\xf6\x41\x69\x0c\xea\xdb\xd8\x1d\xbf\xff\xf5\x78\xb3\x93\x14\x42\x64\x19\x18\xc7\xb8\x00\x9b\xde\x21\xcc\x3e\x70\x58\x7f\x06\xef\x22\x4d\x10\xe7\xd1\x30\x8e\x9d\xe1\xf4\xd9\x28\x0d\xfa\x54\xaa\x46\xe7\xe5\x05\xaa\xb3\x86\xaa\x2d\x0a\x38\xa8\x63\xde\x16\x1a\xf6\x6d\x5d\xab\x4a\x77\xdf\x15\x29\x7e\x33\xe4\x47\x7b\x7d\xa6\x2a\x5b\xc2\xc0\x86\x66\x98\xa2\x73\xe0\xb7\xfa\x3f\x6f\x9d\x7c\xa8\x80\xe9\x75\xbb\x61\xc1\x8d\x7c\xdc\x71\xc1\xb4\x61\xc3\x1b\x97\x42\x0c\x9e\xc8\xb2\x7c\x05\x00\x00\xff\xff\xde\x47\xd5\xef\x0c\x01\x00\x00")

func _000007_dtupdateUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000007_dtupdateUpSql,
		"000007_dtupdate.up.sql",
	)
}

func _000007_dtupdateUpSql() (*asset, error) {
	bytes, err := _000007_dtupdateUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000007_dtupdate.up.sql", size: 268, mode: os.FileMode(436), modTime: time.Unix(1662729973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000008_delupdUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\xc1\xad\x02\x31\x0c\x84\xe1\xbb\xab\x98\x3e\xa2\x57\x4c\xf2\x3c\x81\x48\x4e\xbc\x5a\x3b\x42\x74\xcf\x01\x96\x02\xb8\xff\xf3\x4d\xe3\x6d\xac\x22\x22\xd5\x92\x27\xb2\x36\x23\x0e\x8f\x0c\x01\x80\xe9\x3a\xfa\x13\x4a\x63\x52\xd1\xdc\x0d\xca\x5e\xb7\x25\x7a\xb5\x60\x91\x7d\x68\xcd\x6b\x13\xcc\x2b\xfe\x7b\x07\xf2\xb8\xf3\xe4\x57\x18\x81\xb5\xcd\xca\xaf\x7f\x58\x9e\x1f\x41\xfe\x7d\xce\x91\xe5\x15\x00\x00\xff\xff\x5f\x20\x90\xba\xc3\x00\x00\x00")

func _000008_delupdUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000008_delupdUpSql,
		"000008_delupd.up.sql",
	)
}

func _000008_delupdUpSql() (*asset, error) {
	bytes, err := _000008_delupdUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000008_delupd.up.sql", size: 195, mode: os.FileMode(436), modTime: time.Unix(1659906006, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000009_dialogsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x8a\xdb\x30\x10\x86\xef\x7e\x8a\x39\x26\x90\x43\xda\xd3\x42\x4e\xde\xb5\x5a\x02\x89\x5b\xbc\x0a\xf4\x26\xc6\xd6\xd8\x3b\x54\x96\x83\x34\x2e\xd9\xb7\x2f\x8e\x9d\xb4\x1b\x87\x5d\x68\x75\x32\x23\xe9\xf7\xa7\x4f\xa3\x92\x1a\xf6\x9b\x24\xa9\x02\xa1\x10\x08\x96\x8e\x80\x6b\xf0\x9d\x00\x9d\x38\x4a\x84\xea\x05\x25\x26\x8b\x04\x00\x80\x2d\x5c\x46\xc9\x0d\x7b\x81\x63\xe0\x16\xc3\x2b\xfc\xa4\x57\x48\x0f\xfa\x9b\xd9\xe6\x4f\x85\xda\xab\x5c\x03\xf6\xd2\x19\xf6\x55\xa0\x96\xbc\xac\xce\x01\xc2\xe2\x68\x0c\xf8\x85\xa1\x7a\xc1\xb0\xf8\xbc\x5e\x2f\xe1\xfe\x18\x28\x7c\xef\x1c\x54\x9d\x73\x03\x5f\x2f\xf5\x83\x69\xc8\x53\x40\x67\x2a\x1e\x33\x47\x76\x6b\x50\x20\x4b\xb5\xd2\xdb\xbd\x82\x4c\x7d\x49\x0f\x3b\x0d\x4f\x87\xa2\x50\xb9\x36\x43\xf1\x59\xa7\xfb\xef\xd7\xcc\x69\xaf\xeb\x22\x8d\x87\x2a\xbb\xce\x9d\x3f\x2c\xd5\xd8\x3b\x81\x1a\x5d\xa4\xbb\x3c\xc9\x72\x93\x24\xe9\x4e\xab\x02\x74\xfa\xb8\x53\x93\xa3\x61\x49\x9a\x65\xb0\xcd\x33\xf5\x63\xac\x99\x3e\x52\x88\x86\xed\x09\x16\x7f\x38\x97\x70\x78\xde\xe6\x5f\xe1\x51\x17\x4a\x6d\x92\x0f\xf5\x9b\x23\x06\xe1\x8a\x8f\xe8\x67\x57\xf1\x6f\xf7\x70\x4e\x65\x3b\xed\x1e\x6b\x03\xea\x6d\x2d\x0a\x4a\x1f\x01\xd8\xcb\xc3\x55\xcc\xa7\xb7\x22\xd0\x09\x85\x89\x7d\x4e\x3b\xa4\xa0\xb5\xc0\xde\xd2\x69\x3e\x3f\xa9\x19\x71\x56\x17\x86\xd5\xf4\xe3\x25\xf4\x91\x7d\x03\xa5\x04\xa2\xf7\xdb\xb4\xa5\x18\xb1\xa1\x79\xa7\xfe\x9f\xa0\xeb\xfe\x9b\x16\xf8\x4b\x59\x1d\xba\xf6\xdd\x55\x91\xfc\xb9\x3b\x01\x2c\x0a\x09\xb7\x74\x6f\xd5\x74\x80\xb7\x2f\x63\xbd\xfc\xf0\x11\x24\xb3\x4b\xb8\xaa\xb8\xe3\xfe\x32\x77\xe3\x7d\x42\x9c\xf9\xee\xda\x96\x65\xf3\x3b\x00\x00\xff\xff\x65\x58\xbd\x40\x26\x04\x00\x00")

func _000009_dialogsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000009_dialogsUpSql,
		"000009_dialogs.up.sql",
	)
}

func _000009_dialogsUpSql() (*asset, error) {
	bytes, err := _000009_dialogsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000009_dialogs.up.sql", size: 1062, mode: os.FileMode(436), modTime: time.Unix(1660159705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000010_user_shardUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\x31\xae\x03\x21\x0c\x84\xe1\x9e\x53\x4c\xb7\xef\x75\x49\x91\x0a\xe5\x2c\xc8\x0b\xd6\x62\xc9\xb0\x91\x31\xc9\xf5\x23\x94\x62\xa7\xfd\x34\xff\xce\x87\x74\xc4\x10\x48\x9d\x0d\x4e\xbb\x32\xe6\x60\x1b\xa0\x52\x90\x4f\x9d\xad\x63\x54\xb2\x92\xa4\xe0\x4d\x96\x2b\xd9\xdf\xe3\x7f\x91\x92\x33\x94\x5c\xfa\x3d\x1d\xdc\xd9\x48\x53\x96\x18\xe6\xab\x2c\xf9\x65\x06\xfb\xf5\x7f\x62\xbb\xad\x6d\xf8\x54\x36\xbe\x40\x06\xfa\x54\x8d\x21\xe4\xb3\x35\xf1\x6f\x00\x00\x00\xff\xff\xc7\x6e\x7b\x81\x98\x00\x00\x00")

func _000010_user_shardUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000010_user_shardUpSql,
		"000010_user_shard.up.sql",
	)
}

func _000010_user_shardUpSql() (*asset, error) {
	bytes, err := _000010_user_shardUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000010_user_shard.up.sql", size: 152, mode: os.FileMode(436), modTime: time.Unix(1660582857, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x9a\xdf\x6e\xe3\xc6\x92\xc6\xaf\xa5\xa7\xe0\x31\x70\x0e\xa4\x85\xd7\x43\xb2\xf9\xd7\xc0\xdc\x9c\x24\x0b\xe4\x62\x73\x80\x4d\x72\xb5\xbd\x30\x9a\x64\xd3\x11\xd6\xb6\x1c\x49\xce\xf6\xcc\x60\xde\x7d\xf1\xeb\x2a\x59\xb2\x24\x27\x33\x1e\x0d\xa0\xb1\x44\xb2\xbb\xab\xaa\xab\xbe\xfa\xaa\x9a\xef\xde\x25\xdf\x2d\x07\x9f\xdc\xfa\x07\xbf\x72\x1b\x3f\x24\xdd\x87\xe4\x76\xf9\xef\xdd\xe2\x61\x70\x1b\x77\x35\x7d\xf7\x2e\x59\x2f\x9f\x56\xbd\x5f\x5f\xf3\x3d\xe5\x5f\x76\xb3\x78\x58\x6c\xae\x9e\x1e\xaf\xd6\xbf\xdf\x3d\x5f\xcd\x6f\x16\x0f\x83\x0f\x7e\x7d\x78\xc3\xbc\x76\xa3\xb8\x79\x5c\xae\x37\x47\x97\xcb\x9b\x7e\x79\x77\xe7\x36\xfe\xf0\x46\x75\xd3\xff\xe6\x56\x6b\x7f\xb4\x74\x7d\x33\x6c\x9e\x1e\x87\x13\x43\x9a\x9b\xc1\xdf\x3d\x3d\x0e\x87\xd7\xdb\x9b\x61\xe1\xee\x96\xb7\x87\x8b\x67\xe9\xcd\xd3\xda\xaf\x6e\xd6\xbf\xb9\xd5\xfe\xa0\xad\x3d\x6e\x97\xfc\xba\x5f\xdc\xae\xdc\x66\xb1\x7c\x58\xeb\x85\xef\xff\x95\xfc\xf4\xaf\x5f\x92\x1f\xbe\xff\xf1\x97\xbf\x4d\xa7\x8f\xae\xff\x5f\x77\xeb\xf7\x1e\x9b\x4e\x17\xf7\x8f\xcb\xd5\x26\x99\x4d\x27\x17\xdd\x87\x8d\x5f\x5f\x4c\x27\x17\xfd\xf2\xfe\x71\xe5\xd7\xeb\x77\xb7\x1f\x17\x8f\x5c\x18\xef\x37\xfc\x59\x2c\xe5\xff\x77\x8b\xe5\xd3\x66\x71\xc7\x8f\x65\x1c\xf0\xe8\x36\xbf\xbd\x1b\x17\x77\x9e\x2f\x5c\x58\x6f\x56\x8b\x87\xdb\x78\x6f\xb3\xb8\xf7\x17\xd3\xf9\x74\x3a\x3e\x3d\xf4\x5b\x79\xff\xcb\xbb\x61\xc6\x97\xe4\xbf\xff\x87\x65\x2f\x93\x07\x77\xef\x13\x19\x36\x4f\x66\xdb\xab\x7e\xb5\x5a\xae\xe6\xc9\xa7\xe9\xe4\xf6\x63\xfc\x95\x5c\xbf\x4f\x90\xea\xea\x27\xff\x7f\x4c\xe2\x57\xb3\x28\x36\xbf\xff\xf9\x34\x8e\x7e\x15\xa7\x9d\xcf\xa7\x93\xc5\x18\x07\xfc\xed\x7d\xf2\xb0\xb8\x63\x8a\xc9\xca\x6f\x9e\x56\x0f\xfc\xbc\x4c\xc6\xfb\xcd\xd5\x0f\xcc\x3e\xce\x2e\x98\x28\xf9\xfb\xef\xd7\xc9\xdf\xff\xb8\x10\x49\xe2\x5a\xf3\xe9\xe4\xf3\x74\x3a\xf9\xc3\xad\x92\xee\x69\x4c\x64\x1d\x59\x64\x3a\xb9\x11\x71\xde\x27\x8b\xe5\xd5\x77\xcb\xc7\x0f\xb3\x7f\x74\x4f\xe3\x65\x72\xfb\x71\x3e\x9d\xf4\x77\x3f\x6c\x25\xbd\xfa\xee\x6e\xb9\xf6\xb3\xf9\xf4\x5c\xf2\x30\x8d\xcc\xff\xca\x44\x7e\xb5\x12\xb9\xf5\x62\xf7\x34\x5e\xfd\x13\xd1\x67\xf3\x4b\x9e\x98\x7e\x9e\x4e\x37\x1f\x1e\x7d\xe2\xd6\x6b\xbf\xc1\xe4\x4f\xfd\x86\x59\xa2\x7e\xba\x1f\xd3\xc9\xe2\x61\x5c\x26\xc9\x72\x7d\xf5\x1f\x8b\x3b\xff\xe3\xc3\xb8\x7c\x1e\xa7\x5b\xb8\xbd\xbe\x37\x43\xdc\xc3\x24\xd1\x6d\x9c\x4e\xd6\x8b\x8f\xf1\xf7\xe2\x61\x53\x15\xd3\xc9\x3d\x01\x9d\x3c\x4f\xfa\x9f\xcb\xc1\xc7\x8b\xbf\x2c\xee\x7d\x82\x9b\x5c\xf1\x8d\x75\xa2\xab\xcc\xc6\xc5\xe1\x5a\xf3\xe4\x27\x77\xef\x67\x73\x5d\x81\x35\x55\xcb\x71\x71\xc5\xea\xd3\xcf\x7f\x32\xf6\xe7\xc5\x47\xc6\x46\x69\x5e\x0e\x45\xd0\x3f\x1d\x8a\xac\xb3\xf9\xbe\xe4\x2f\x27\x40\xb5\xbf\x9a\x00\xe5\x66\xf3\x9d\xa2\x47\x33\xa8\xf6\xaf\x4f\xf2\xe3\xfa\xfb\xc5\x6a\x36\x4f\xba\xe5\xf2\x6e\x7f\xb4\xbb\x5b\xff\x85\xe6\x1f\xd6\xa2\xb8\x5f\x8d\xae\xf7\x9f\x3e\xef\x8d\x56\x97\xc0\xcb\x6f\x6e\xf6\x60\xf4\xd7\xc7\x9f\x7f\xbf\x4b\xde\xab\x43\xcc\x2e\x6c\xc8\x46\x1b\x9a\xce\x86\xb4\xb1\x21\x4d\x4f\x7f\x46\x9e\x29\x6c\x68\x33\x1b\xfa\xcc\x86\xc2\xdb\xd0\x1b\x1b\x0c\xf7\x7b\x1b\x9a\xca\x06\x3f\xda\x50\xb7\x36\xa4\xce\x86\x61\xb4\x61\xa8\x6c\x28\x9c\x0d\xa6\xb3\xa1\x2d\x6c\xa8\x5a\x1b\x5c\x6a\x43\xd1\xca\xb5\x3c\xb3\xa1\x2b\x6c\x48\x8d\x0d\x69\x2d\x73\xb0\x46\x5f\xd9\xd0\xb5\x32\xb6\xec\x6c\xe8\x6a\x1b\x3a\x63\x43\xd1\xd8\xd0\xf6\x36\xf4\xad\xcc\x51\xa5\x36\xd4\x83\x0d\x75\x67\xc3\x50\xd8\xe0\x2a\x1b\x4a\x64\x2a\xe5\x9e\xcf\x6d\xf0\x95\x0d\xa3\xb3\x61\x34\x36\x8c\xb5\x0d\x86\x75\x5a\x1b\xf2\xce\x06\x8f\xdc\x8d\xcc\xcf\x5a\x43\x69\x43\x93\xdb\x60\x9c\x0d\x39\x7a\x15\x36\x94\x83\x0d\x59\x2b\xdf\x2b\x67\x43\x93\xc9\x35\x6c\x62\x7a\x1b\x5a\x64\x1f\x6d\xc8\xbc\x0d\x2e\xb7\xa1\xa8\x6d\x18\x33\x1b\x72\x27\xb2\xc4\xe7\x52\xb1\x45\x5e\x8a\x6c\x5c\x2b\xf9\x64\xf2\x7c\xd6\xdb\xe0\x53\x1b\x72\xd6\x28\x6c\xe8\x4a\x1b\xc6\xc2\x86\x31\x95\xf5\xcc\x20\x6b\x75\x5e\xf6\xaa\xc4\xf6\xc8\xcf\x5a\x83\x0d\x83\xb1\x61\xe0\xb7\xb7\xa1\x2a\x45\x1f\xc3\x7e\x31\xde\xcb\x7e\xb5\xa5\x0d\xbd\xce\x1d\xf7\x00\x39\x74\x9e\x21\x13\xbb\x38\x6f\x43\x6e\x44\x17\xf6\x70\x6c\xc4\xae\x65\x2e\xeb\x32\x16\xf9\x5c\x27\xba\xf6\x8d\x0d\x4d\x2d\xfb\xee\x33\xf9\x8e\x2e\xcd\x20\xfb\x53\x1b\x1b\xaa\x46\x74\x6e\x5b\x19\xc7\xbe\x76\x7b\xe3\x33\x23\xbe\x90\x0d\xf2\xf1\xba\x7f\x3c\xd3\x8d\xb2\x0f\x7e\x10\x3d\xdb\x5a\xec\x5d\xe1\x57\x95\xd8\xdd\x77\x36\x8c\xbd\xd8\xd1\x60\x3f\x7c\x4d\xf7\xb6\x6c\x6d\x28\x47\x1b\xaa\xc1\x86\xbc\x12\x9f\xe4\x39\x64\xc1\xb6\xd5\x28\x3e\xc3\x5a\xc8\x8b\x1f\x76\xf8\x41\x2f\x3e\x88\x2c\xf8\x33\xfb\x9e\xeb\x5e\xa5\xd8\xab\xb5\xa1\xcf\xd5\x1f\x8c\xc4\x8e\x2f\x55\x27\x64\xc7\xde\x8d\xd8\x7b\x70\x3b\x5b\x0f\xb9\xc4\x11\xfe\x54\xaa\x7f\xf8\x46\xe4\x40\x77\xfc\xdf\x34\xb2\x3f\xf8\x43\xa7\xfb\x3f\x62\xbb\x41\x7c\x08\xdd\xca\xde\x06\xd7\x8a\xde\xcc\x47\x0c\xb0\xbf\x3c\x93\x11\x13\xb9\xda\xde\x88\x3d\xf2\x56\xfd\x61\x90\x58\x8d\x3e\x53\xd8\x50\x0c\xb2\x1f\xbd\x17\x79\x52\x8d\xb7\xb1\x14\x79\xf6\x63\x9f\x4f\xda\x8a\xbc\x3d\x76\x4c\x6d\xc8\xc0\x8b\x7c\xfb\xdc\xc5\x96\x0a\x1c\x81\x8d\x66\xa9\x53\xd9\x7f\x9b\xcb\xf6\xd8\xc3\x74\x32\x39\xc6\xab\xcb\xe9\x64\x72\x71\xcc\x05\x2f\x2e\xa7\x93\xf9\x73\x62\x39\x1a\xc5\x9a\xff\x16\xd3\xe1\xfe\x9a\x31\x1f\x3e\x93\x8e\xd7\xa4\xfd\xab\xbc\xfe\x9c\x8e\x63\x42\xbd\x7e\x7f\x08\xce\x9f\x48\x5b\xd7\xc9\x49\xa1\x13\xf2\xd2\x75\x52\x9a\xea\x32\x21\xc3\x5c\xef\x27\xa0\x59\x61\xaa\x79\xbc\x4e\xde\xb8\x96\xbc\xf2\xeb\xc3\x22\xcc\xb2\xaa\xac\xb3\x22\xcf\x4c\x79\x99\xa4\xf3\xcf\xd3\x89\x63\xdd\x7f\x44\x05\x3f\x45\xad\xae\x13\x55\x0e\xa1\xae\xe3\xff\x9f\x9f\x8d\xec\x2e\x4f\xe4\x84\x67\x12\xfd\xf6\xb4\x00\x24\x37\xa3\x84\x51\xaf\x21\x11\xdd\x23\x95\x30\x1d\x3b\x71\xd1\xc6\x89\x2b\xd6\x0a\x17\xfc\xe5\x59\xa7\x6e\x19\x5d\xb0\x10\x18\x24\x64\x70\xff\x42\xe1\xd9\xf5\xe2\xa6\x79\xb3\x0b\x53\x42\x11\xe8\x4f\x33\x85\x77\x60\x01\xe8\xad\x05\xea\xdb\x54\xc3\x7e\x90\x39\x2a\x20\xa2\x95\x54\x43\xd8\x3b\x23\xe9\xac\x1d\x6c\x28\xf9\xed\x6c\xa8\x7a\x09\x59\x52\x06\x7a\x57\x1a\x22\x84\x11\xe1\x0e\x64\x31\xa6\xc8\x6d\x28\x8b\x9d\x1d\x80\xdd\xb2\x14\xa8\x1d\xbd\xc0\x3b\xe9\x04\x59\xaa\x4c\xe0\x04\xd8\x00\x7a\xd0\x15\x68\x21\x74\xea\x2d\x84\x39\x81\xcf\x08\x1b\x46\x52\x50\x84\xe0\x41\x6c\xd5\x6a\xba\x24\x95\xa0\x43\x87\xbd\x6a\x1b\x86\x46\xae\xe7\x83\x84\x25\x61\x0e\x9c\x03\xd3\xd8\x9e\x94\x8b\x0e\xa4\x5f\xd2\x12\x76\x60\x8f\xea\x54\xe0\x18\x1d\x5b\x4d\x13\xd8\x21\x23\x9c\x4b\xb5\xbb\xc2\x0d\x21\x0f\x04\xb7\x4e\x20\x90\xf5\xf8\x4e\x1a\x66\xdf\x81\xda\x02\xa8\xf3\x92\x6e\xa3\x5c\xc8\x94\x4b\xca\x8a\x29\x56\xe5\xcb\xf9\x5d\x4a\x3a\x77\xa4\x97\x5a\xe6\x74\x9a\xa2\xbc\xea\x4c\xba\x03\xc2\x80\x4c\xae\x65\xf9\x31\x1c\x19\xd5\x13\x1f\xf0\xad\xd8\x1f\x5f\x38\x09\x47\x2f\xfd\xfc\xad\x88\xf4\x72\x96\x1d\x28\x1d\x96\xa2\xa7\x70\xe9\xe5\xd8\x2f\x87\xa6\x93\x92\x9f\x15\x9d\x8e\xa5\x57\x80\x32\x45\xf6\xb5\x00\xd5\x96\x65\x95\x35\xf9\xf9\x00\xca\x7c\x3b\x40\xb9\x42\x9c\xbc\x57\x10\x6a\x94\xb7\xc2\x55\xc8\xd1\x5b\xde\xca\xbd\xad\x63\xf5\x5b\xe7\x55\x40\x81\xbb\x11\xc8\x59\x26\x63\xe0\x80\xe4\xe1\xac\xb6\xa1\x56\x30\x02\x20\xe0\x00\x80\x18\x5c\x04\x90\x30\x5e\xf2\x39\x00\x08\x10\xc2\x49\x19\x83\xb3\x03\x20\x00\x06\x81\x16\x03\xb3\x15\xb9\x00\x33\x78\x58\x94\xbd\x95\xe0\x82\xaf\xe2\xe0\x04\x13\xe0\x42\x40\x67\x95\xac\x03\x70\x10\x6c\xcd\x96\x73\x3a\x01\xcb\x2d\x80\xc1\x03\x7d\x21\xe0\x00\xa7\xc2\x16\x04\x0e\x5c\x1b\x2e\x09\x9f\x8a\x40\x0c\xb0\xa8\x7c\x05\x3c\x21\x17\xe0\x83\x07\x66\x85\x3e\x07\x10\x54\xa2\x5b\x9d\xc9\x7c\x8c\x01\x88\x22\x7f\x69\x45\x0f\xb8\x16\x32\x9b\x4a\xe6\x80\x13\x01\x14\x00\xf9\x90\x0a\x3f\x87\x7b\x02\xba\x70\x40\x40\x60\x50\x30\x64\x9e\x2d\x20\xc3\x6d\x09\xee\x5a\x41\x0b\xf0\x02\x10\xe0\xbb\x00\x2d\x76\x4b\x15\x80\xd0\x27\xef\x45\xae\xb8\xa7\x80\x69\x2a\x40\x1f\x01\x3d\x17\xe0\x85\x5b\xe7\xca\x5d\xd0\x0d\x3b\x17\x9d\xe8\x01\x17\xc3\xc6\xf8\x15\x89\x6d\xd8\x8e\xe9\x84\x17\x77\x0a\x66\xdb\x1a\xa0\x18\x85\x37\x63\x5f\xc0\xa7\xee\x45\x0e\x74\x46\x07\xb8\x24\x49\x85\xb9\x78\x3e\x73\xc2\x5b\xe1\xd2\xf0\x53\xfc\x69\x54\xee\x0f\x57\x8d\x09\xa3\x17\x1b\x03\xc4\x00\x7d\x04\xc3\x5e\xf6\xd5\x69\xa2\xc0\x37\xe1\xc3\xd8\x17\xdd\x49\x78\x87\x7e\x1f\xb9\x66\x2f\xdc\x1e\x7b\x67\x9a\x70\x5e\xe5\x6c\xe6\x2c\x20\x69\x5e\x01\xc9\xc3\xb6\xdc\x29\x90\x34\x6f\x04\xc9\x93\x92\x9f\x15\x24\x8f\xa5\x57\x90\xac\x4c\xfb\x16\x90\x2c\xce\xc9\xe2\xb4\xb1\xf9\x76\x88\xac\xb5\xb4\x8f\x39\xb5\x13\x08\x32\xca\xe1\x08\xc7\x5a\x4b\x4d\x20\x86\xef\x4d\xaf\x25\x91\xd1\x10\xd2\xf0\x07\x16\x72\x2d\x75\x71\xff\x46\x79\x0b\x21\x49\x69\x0d\xac\x31\xc6\x28\x8f\xe8\x6b\xe1\x00\x40\x21\x25\x09\x50\xc8\x73\xc8\x93\x2b\x94\xc4\x32\x70\x94\x7b\xb1\x0c\x2e\xb4\x9d\xa0\xf0\xe0\x94\x07\xc2\x61\x28\x89\x19\x9b\x6a\x88\x12\x7e\xf0\x48\xa0\x32\x42\x6f\x2f\x1c\xce\xe4\x02\xed\x95\x96\xcf\x84\x21\xcf\x66\xd8\xaa\x12\xae\x02\x6c\xc3\x69\xd1\x21\x53\x58\xa1\x34\xc2\x4e\x40\x4a\xd9\xec\xec\x0a\x34\xc1\xc1\xe0\x3f\xcc\xd7\x29\x84\x30\x5f\xa6\x3c\x87\x92\x0e\x18\xcb\x14\x4a\x46\x2d\xf5\xe0\xa3\xb1\xac\x1e\x04\x1a\xe0\xa6\xb9\xf2\x5e\xd2\x04\x7c\x14\x1d\x29\xc3\xe1\x86\xf0\x2c\xe0\x96\x79\xb0\x63\x84\x16\x23\xb2\x19\x6d\x1b\x50\x02\x7a\x85\xb3\x56\x6d\x0f\xf7\x84\xb7\x01\x35\x31\x2d\x95\x02\xc9\xc8\xea\x14\xfe\x81\x5f\x57\x8b\xfd\xa2\x2d\x6b\x95\xb7\x12\x3f\x89\xb0\xdc\x09\x44\xb1\x06\xba\x55\x5e\x6c\x0d\x1c\x45\xff\x70\xf2\x17\x0e\x48\x7a\x81\x3f\x16\xca\x09\x63\x4a\xab\x05\xa6\x8d\x96\xe5\xa3\x96\xb6\xd8\x13\xce\x0a\x47\x04\x1e\x07\x2d\xa7\x99\x03\x5f\x81\x57\xf6\xdb\x74\xe3\x95\xdb\xf6\x2a\xb3\x13\xfb\xa0\x53\x4c\x39\x46\xe0\x9f\x39\x6a\x85\x3d\xec\x44\x0a\x8d\x70\x3d\x88\x4f\x01\xdb\xa4\x53\xa7\xa9\xba\xd1\x94\xd2\xe9\xfe\x03\xc3\x70\xf1\x4a\xcb\x7d\x74\x88\xf3\x8e\xd2\x46\x62\x7d\xf6\x1d\xc8\x8f\x50\xaf\x3c\x94\x3a\x84\xf4\x06\xe5\x28\xd4\xd6\x70\x65\xf6\xa1\x57\x6e\x1b\x53\xaa\xca\x83\x8e\xec\x13\xd0\x6c\x8c\xa4\xef\x6d\x2b\x85\x78\x24\x9d\x61\x9f\x5e\x6b\x87\x5c\x53\xf9\xd8\x4a\x5a\x86\x4b\x93\x8a\xa8\x9b\xb8\xc6\x3a\x8c\x65\xee\x48\x15\x9c\xa4\x75\x6a\x09\x52\x19\xf6\xa3\x1e\xa0\xe6\x8a\xa9\xa5\x3c\x4e\x1d\x85\xa6\xcc\x58\x63\x0d\x5a\xbb\xbc\xc6\xaf\xf7\x11\xe8\xad\x89\x63\x7f\x8e\x5d\xda\x78\x79\x68\x73\x2a\x69\xec\x8f\xfb\xf2\x94\x71\x42\xe2\xb3\x26\x8c\x43\xb9\x35\x5d\x14\xe9\xd7\xa7\x8b\xda\x94\x69\x55\x9f\x2f\x5d\x3c\x1f\x78\x7d\x5b\x2f\x18\x2e\x46\xc2\x48\xbd\x70\xcc\x5c\x7b\xc1\x38\x13\x1c\x0f\x9e\x44\xb0\x7b\x2d\x52\x71\xe8\x42\x7b\xae\x95\x26\x80\x52\x0b\xd1\x18\x38\xb9\x38\x32\xc0\x4c\xa0\xc7\x9e\x9f\x7e\x08\x2e\xf8\x11\x45\x35\xdc\x0f\x90\x81\xf3\xe6\x4e\xd6\x8f\xfd\xb3\x5e\xe6\x00\x8c\x62\x10\xe8\x87\x24\x02\xf7\xf1\x5e\x64\x43\x6e\x40\x97\x20\x82\xc3\xe3\xe0\x11\x60\x3b\x09\xc4\x61\xd0\x26\x84\x97\x00\x26\xf8\xe1\xa0\x04\x1e\x40\x3e\x68\x31\x0d\x40\x16\xad\x82\x47\x29\x89\x0d\x99\xe2\xef\xfa\x38\xa0\x00\x6f\x78\x1b\xf5\x01\x81\x59\x9b\x7d\xbb\x1e\x04\xd4\xcb\x3d\x7a\x6b\x48\xbd\x9c\x65\x17\x54\x87\x47\x9e\xa7\xc2\xea\xe5\xd8\x2f\x0f\xac\x93\x92\x9f\x35\xb4\x8e\xa5\xd7\xe0\xca\xb2\xf2\xab\x83\xab\x4d\x0b\x93\x9e\x91\x8b\x3d\x1f\x1a\x7f\x43\xc1\xaa\xdd\x2e\x02\x08\x14\xee\x2b\x65\x63\x7a\x38\x32\xea\xa1\x00\x19\x11\x56\x52\x68\x97\x2b\x66\x5f\x2d\x6e\x32\x2d\x0c\x33\xed\x98\xc5\x66\x7f\x29\x0c\x2d\xd3\x26\x32\x45\x0f\x8c\xa0\xf5\x7a\x58\xd3\x48\x16\x64\x4d\xb2\x26\xce\x4c\xb6\xa3\xb8\x88\x85\xad\xde\x23\x53\x75\x7a\x78\x00\x43\x62\x0c\xcc\x25\x36\xa4\xb5\x41\x0c\xab\x18\x5a\x01\x02\xd8\x56\xd4\xa1\x13\x66\x48\xf0\x31\x2f\xd9\x17\x99\x29\x4c\x47\x3d\x10\xa1\xf0\x46\x1e\xaf\x72\x66\x9a\x85\x46\x2d\xbc\x63\xe0\x7a\x59\x3f\x66\x4e\x3d\x6c\xe9\xf4\x30\xa2\xd0\xa2\x95\x60\x25\x40\x19\x1f\xbb\x53\xb0\xdc\x52\xf4\xde\x16\xa8\x64\x5f\xc6\xf6\xda\xd1\x62\x0e\xaf\xc5\x31\x99\x3d\xea\x57\x28\x6b\xed\xa5\xab\x19\x0b\xd1\x4a\xf6\x10\xe0\x20\x23\x93\x61\xc9\xf8\x14\x96\xbd\xb2\x55\xec\x17\xc1\x2d\xd5\xe2\x53\x0f\x13\x62\x87\x73\x94\x7d\x8b\x4d\x05\xed\x66\x62\x6b\xec\x5c\xaa\xdc\xc8\x0f\xf0\x00\x38\xa9\x1e\x84\xb0\x5f\xec\x81\xd7\x43\xa8\xd8\xe9\x34\xbb\x42\xb9\x57\xd6\x0b\x03\x89\xfe\x90\x2b\x00\x2a\x5b\xea\x95\x09\x01\xc4\xa9\x76\x32\x73\xf5\xab\x08\x66\x5e\x74\x84\xa9\x18\x65\x83\x5b\xa6\x44\xb1\x0a\xa8\x45\xd9\xaa\x5d\x47\xd5\xa9\xdc\x30\xa5\x52\x7d\x75\x50\x80\x3f\x55\x90\x62\xef\xac\xd4\xaa\xa2\x90\xbd\x7e\x95\x55\xbc\x8c\xa5\xb7\x82\xe0\xcb\x59\x76\x20\x78\xf8\x7a\xc7\x29\x10\x7c\x39\xf6\xcb\x41\xf0\xa4\xe4\x67\x05\xc1\x63\xe9\xb7\x0c\x23\x2b\xde\x02\x82\x75\x9e\x9d\x0f\x04\x77\x2f\xc8\xbc\x1d\x05\x2b\x45\x41\xbc\x3d\x75\x7a\x34\xab\x35\x69\x9f\x6a\x0a\x1e\xb5\xf6\x73\xbb\xb3\x80\x76\x94\x76\xc7\xa8\x51\x09\x6f\xe7\xaf\xd3\x3a\xd0\x28\xe2\xf4\xdb\x63\x63\xad\xf9\x22\x3a\xd5\x42\x13\xe2\xb9\x45\xb1\x3b\x53\xa8\xb6\x7d\x7b\x6d\x3d\xc5\xfa\x6b\x50\x0e\x3e\x4a\xed\x05\xa2\x75\x46\x8e\x28\x33\x6d\xff\x81\x24\x59\x2b\x28\x4c\xad\xdb\xa9\xce\xad\x72\xf0\x58\x03\xf7\x82\xa0\xd4\x90\x70\xfc\xd8\xa2\xd1\xe3\x74\x50\xa1\xd0\x63\x3d\xaf\x35\x94\xd9\xeb\xd7\x7b\x45\x1d\x90\x36\xb6\xb4\x06\x41\x1b\xea\x69\x50\x01\x3d\x62\xc4\x96\x42\x7d\xb8\x86\x8c\x8d\xb6\xd7\xa8\x5d\xb0\x6d\x3c\x76\x6c\x04\x8d\x90\x0b\x3b\x81\x9c\xe8\x5f\x29\xaa\x60\xa7\x42\xeb\x7f\xd0\x93\x28\x8e\xe7\x39\x5e\x6a\x16\xd0\x9c\x3a\xaf\xd6\xf3\x9e\x58\xc7\xea\x91\x22\xc8\xd3\x6b\x2f\x81\x7a\xa5\x6d\x04\x39\xa0\x40\xf1\xa8\xb3\x16\xb9\xd9\x97\x58\xb3\x0e\x52\x97\x44\x3a\x98\x6a\x0b\x50\x8f\x85\x2b\x7d\x05\xa1\xd1\x67\x06\xad\xcd\x7b\x7d\x9d\x20\xde\x37\x92\x3d\x5a\xcd\x08\xec\x1d\x48\x43\xed\x4f\xfd\xf8\x5a\xcd\x83\xee\xb1\x56\x2d\xc5\xfe\x91\xce\xbe\x86\x4e\x07\x4e\xfe\x56\x78\x3a\x98\x66\x87\x4f\x47\x6f\x99\x9d\x02\xa8\x83\xd1\x5f\x8e\x50\xa7\xa5\x3f\x2b\x44\x9d\x50\x40\x31\x2a\xaf\x9a\xaf\xc4\xa8\x2a\xaf\xf3\xb6\xad\xcd\xf9\x30\x6a\xfb\xaa\xde\xb7\x9d\x7c\x92\x73\xf1\xbc\xd8\xbd\xc9\xb5\x20\xd2\x26\x30\xd1\xd9\x69\x71\xd1\x2a\xb7\xc2\xeb\xcb\xbd\x06\xbb\xe9\xa5\xe0\x81\x7b\x91\x7f\x3b\x3d\x09\x05\x8d\x0a\xed\x84\xc1\x29\x22\xb2\x55\xb2\x46\xa7\x4d\x6b\x72\x7f\xa1\x2f\x4d\x10\xa5\xf0\xc6\x5c\x79\x1b\x1e\xdc\xe6\x82\x68\x78\xbc\xa9\x84\xc7\xc4\x62\x6d\xcf\xb3\xb7\xd1\x65\xf4\xd4\x33\x36\xe3\x9d\x20\x01\xc5\xd4\xa0\x9d\x31\x90\x85\xc2\xa9\xd4\x0e\x09\xdc\x05\x2e\xd4\xe9\xcb\x36\x70\x09\xa2\xbe\x6a\xb4\x68\xea\x64\x2e\xd0\x2d\xd7\x66\x7d\x44\xe8\x5a\xf4\x8e\x3a\x28\x6a\x94\xca\x53\xb1\x03\xf3\xf5\xba\x96\x1b\x05\x0d\x41\xc5\x56\x5f\x7e\x29\xf4\x84\x95\xb5\x7a\xed\x9a\x80\x6e\xd9\x89\x68\x2e\x95\x37\xb5\xa9\x70\xac\xfe\xcf\x0a\xae\x17\xee\xf0\xd6\x58\x7e\x31\xc9\x2e\x92\x0f\xde\x0a\x3d\x15\xc7\x2f\x46\x7e\x79\x14\x9f\x92\xfa\xac\x31\x7c\x24\xfa\xb6\xd4\x6a\xdf\x52\x6a\x55\x69\x5a\x9d\x2f\x82\x9f\x5f\xaa\xfd\xc6\xb3\x41\xa3\x09\x45\x93\xfb\x7e\xe3\x3b\x12\x0c\xaf\x65\x4a\x2b\x0d\x4b\xdc\x89\x5a\x7f\x50\xda\x4d\x98\x12\xba\x83\x36\x2e\x4b\x2d\x59\xa0\xde\xf1\xfd\x35\x3d\xbb\x89\xe7\x4e\x95\x52\x64\xa5\xc9\x84\x39\xc9\xba\xd5\x33\x38\x53\x48\x79\x43\x42\xef\xb4\x47\xb1\x4d\xf6\x24\x37\x92\x1a\x65\x4e\xa9\xa1\x46\x52\x34\xda\x58\x27\x8c\x63\xa9\x56\xeb\xb9\x94\x11\x08\xd8\x26\xf2\xf8\x12\x41\x21\x8d\x5e\xe4\x73\x99\xe8\x19\x4b\x81\x4a\xd6\x01\x0e\xe2\x01\x40\x2a\x6b\xa6\xfa\x17\x82\x00\x2c\x44\x58\x73\x92\x3c\x81\x80\x5c\x9b\xfc\xa9\xbe\x0c\xd1\x68\x23\x3c\x96\x97\x95\x94\x5a\xa9\xbe\xa3\x17\x1b\xee\x9a\xf0\x21\x18\x84\x63\xae\xef\x6f\x39\x85\x01\x60\x30\x96\x92\x4e\x49\x52\x2b\xe5\x06\xfa\x34\xfb\xcd\xf0\x6d\xd3\xbb\x92\x26\x2f\x24\x8b\xef\x65\xb9\x6b\xdc\x76\xfd\xae\x94\x4e\xb5\xb4\x8c\x4d\xf1\x46\xdf\x83\x6a\x64\x4e\xec\x50\x6b\x19\xd8\xa5\x72\x3d\xc2\xb0\xd7\x26\xb1\x42\x0e\x10\x05\xc9\x82\x3c\x78\x2d\xa3\xe2\xde\x0d\xda\xcb\x31\x0a\x39\x4a\x08\xd9\xcf\x58\x76\x35\x52\xd6\x51\x5a\xc5\xbe\x97\x93\x03\x00\xa3\xe7\x9e\xb5\x9e\x91\x96\xe9\xae\xcc\xdb\x36\xc0\xf1\xc7\x4e\x4b\x39\x52\x46\xad\xef\xd6\x61\x23\xa3\x8d\xd9\x68\x1b\x2d\xc5\x98\xa3\x6b\xf5\x5c\xd0\x68\x93\xb7\x15\x9f\x18\xb5\x91\x4c\x49\xd9\x6b\xb3\xda\xe9\x99\x6b\xae\x0d\xe3\x46\xe5\x8b\x2f\xf3\xa8\xdf\x41\xca\xf2\x5e\x7b\x6f\xea\xb3\xec\x25\x7e\x15\x89\x61\xa1\x6d\x00\x2d\xad\x29\x7d\x89\x29\x7c\x0d\x9f\x8c\x0d\xf0\x4e\x7c\xee\xff\x03\x00\x00\xff\xff\xfe\x4b\x7d\x91\x00\x30\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 28672, mode: os.FileMode(436), modTime: time.Unix(1662729985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\xb1\x0d\xc5\x20\x0c\x04\xd0\x9e\x29\x6e\x01\xa0\xff\xdb\xdc\x4f\xac\x13\x42\xb1\x11\xf1\xfe\x4a\x93\x22\xf5\x7b\x8b\xc7\xa4\x0c\xd7\xd0\x66\x8e\xf0\xbb\x94\xde\x15\x3f\x99\xdb\x66\x1a\x14\xf5\x3f\xfc\x64\x12\x75\x4d\x7d\x26\x6a\xe0\xa5\xa6\x00\x5a\x79\x02\x00\x00\xff\xff\xe6\x24\xd8\x86\x4e\x00\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 78, mode: os.FileMode(436), modTime: time.Unix(1656363775, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init.up.sql":       _000001_initUpSql,
	"000002_indexes.up.sql":    _000002_indexesUpSql,
	"000003_indexes.up.sql":    _000003_indexesUpSql,
	"000004_posts.up.sql":      _000004_postsUpSql,
	"000005_collate.up.sql":    _000005_collateUpSql,
	"000006_charset.up.sql":    _000006_charsetUpSql,
	"000007_dtupdate.up.sql":   _000007_dtupdateUpSql,
	"000008_delupd.up.sql":     _000008_delupdUpSql,
	"000009_dialogs.up.sql":    _000009_dialogsUpSql,
	"000010_user_shard.up.sql": _000010_user_shardUpSql,
	"bindata.go":               bindataGo,
	"migrations.go":            migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init.up.sql":       &bintree{_000001_initUpSql, map[string]*bintree{}},
	"000002_indexes.up.sql":    &bintree{_000002_indexesUpSql, map[string]*bintree{}},
	"000003_indexes.up.sql":    &bintree{_000003_indexesUpSql, map[string]*bintree{}},
	"000004_posts.up.sql":      &bintree{_000004_postsUpSql, map[string]*bintree{}},
	"000005_collate.up.sql":    &bintree{_000005_collateUpSql, map[string]*bintree{}},
	"000006_charset.up.sql":    &bintree{_000006_charsetUpSql, map[string]*bintree{}},
	"000007_dtupdate.up.sql":   &bintree{_000007_dtupdateUpSql, map[string]*bintree{}},
	"000008_delupd.up.sql":     &bintree{_000008_delupdUpSql, map[string]*bintree{}},
	"000009_dialogs.up.sql":    &bintree{_000009_dialogsUpSql, map[string]*bintree{}},
	"000010_user_shard.up.sql": &bintree{_000010_user_shardUpSql, map[string]*bintree{}},
	"bindata.go":               &bintree{bindataGo, map[string]*bintree{}},
	"migrations.go":            &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
