// Code generated by go-bindata.
// sources:
// 000001_init.up.sql
// 000002_indexes.up.sql
// 000003_indexes.up.sql
// bindata.go
// migrations.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\xdf\xd6\x4a\x3b\x94\x69\xa0\x49\x3b\x21\xb4\x03\x07\x86\x84\xc6\xb9\x4a\x5b\xb7\xb3\x48\x9c\xc9\x49\x60\x7d\x7b\xd4\xa6\x53\x35\x60\xe2\xe6\xfa\xf3\xf7\x37\x89\x2b\xec\x88\xb7\x4a\xd5\x82\x3a\x20\x04\x5d\x19\x04\x6a\x81\x5d\x00\x3c\x93\x0f\x1e\xa2\x47\xf1\x2a\x53\x00\x30\xd6\x25\x35\x00\x50\x51\x47\x1c\xe0\x24\x64\xb5\xf4\xf0\x81\x3d\x3c\xbe\x1f\x5e\xcb\xe7\xfd\xd3\xdb\xee\x65\xb7\x3f\x80\x8e\xc1\x95\xc4\xb5\xa0\x45\x0e\xcb\xd1\x37\xae\x23\x1e\x0a\xf8\xd4\x52\x1f\xb5\x64\xab\xa2\xc8\x87\xef\xe1\x87\x1c\x8d\x49\x73\x68\x35\x99\xab\xb9\xbb\xa2\xc8\x13\x3b\x1d\x1d\xe3\x35\xbb\xbf\x20\xed\xfd\x97\x93\x66\x46\x0f\xeb\xfc\x47\x34\x6b\x9b\xec\x59\x5f\x6d\x26\xdf\x47\x99\xf0\x6f\xa6\xbb\x49\x03\xba\xdc\xc6\xe3\x79\x6a\x21\x47\x0b\xd9\xc2\x6a\x83\x8b\xe5\xa2\xc5\xb1\x98\xc4\xda\x45\x0e\xd2\xff\x19\x5a\x53\xe8\x6f\x1d\x86\x38\xa0\xe0\xb0\x81\xf9\xad\xd6\x9b\x5c\xa9\xfc\xff\x7d\x95\xad\x10\x72\x73\x63\x6b\x29\x3f\x8d\x0c\xfd\xd4\x4d\xb9\xce\x5a\x0a\x5b\xf5\x1d\x00\x00\xff\xff\x09\xe8\xcf\x40\x18\x02\x00\x00")

func _000001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initUpSql,
		"000001_init.up.sql",
	)
}

func _000001_initUpSql() (*asset, error) {
	bytes, err := _000001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init.up.sql", size: 536, mode: os.FileMode(436), modTime: time.Unix(1657142135, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_indexesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xbb\xca\x83\x40\x10\x46\xfb\x7d\x8a\x29\x7f\xe1\x7f\x83\xad\x0c\x5a\x04\x24\x45\xb0\x48\xb7\xac\xce\x28\x03\xba\x0b\x7b\x01\xf3\xf6\x41\x27\xf7\x90\x26\xdd\xb7\x67\x39\x07\xa6\xa3\x91\x9d\x56\xaa\x6c\xda\xfa\x08\x6d\xb9\x6b\x6a\xc8\x91\x42\x54\x00\x00\x65\x55\xc1\xfe\x50\xd5\x27\x61\xc6\xd9\x99\x0c\xe3\x02\x7f\xeb\xfa\x87\x98\xc3\x3a\x0a\xfd\xe1\x9b\x21\x30\x39\xbc\x57\xd8\x21\x2d\xcf\x3f\xd1\x64\x46\x69\x6d\x94\xf1\xb7\xca\x70\xab\x08\x90\x8e\x9d\x12\x05\x48\xb6\x9b\xe8\xed\x9a\x47\x21\x9a\xc9\x8f\xec\x44\xde\xe6\x57\xd1\x22\xbe\x88\xbd\xcf\x2e\x85\xb3\xa8\xd7\x47\xa1\x95\xea\xfd\x3c\x73\xd2\xea\x12\x00\x00\xff\xff\x31\x64\x7b\xe9\x55\x01\x00\x00")

func _000002_indexesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_indexesUpSql,
		"000002_indexes.up.sql",
	)
}

func _000002_indexesUpSql() (*asset, error) {
	bytes, err := _000002_indexesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_indexes.up.sql", size: 341, mode: os.FileMode(436), modTime: time.Unix(1659556182, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_indexesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xcd\x8a\x83\x30\x1c\xc4\xef\x79\x8a\xff\x31\xc2\xbe\x81\x27\x25\x61\x11\xc4\x5d\x5c\x17\x7a\x0b\x6a\xa2\x04\x34\x42\x3e\xa0\x7d\xfb\xe2\x17\x95\x54\xc1\xb6\xb7\xc9\x30\xf3\x23\xff\xa9\x44\x2b\x55\x88\x50\x94\x16\x34\x87\x22\x8a\x53\x0a\xce\x08\x6d\x80\xe4\x3f\xbf\x90\x64\x84\x5e\x66\x83\xa9\xb2\x17\x4c\xf2\x6b\xf8\x14\x66\x8d\x96\x42\x71\xbf\xb2\xd8\x86\x39\xc9\xdf\x2b\x36\x6b\xb1\xec\xac\xd0\x60\xcb\xaa\x13\x47\xdf\xeb\x86\x56\xaa\xd3\xe9\x7a\x70\xca\xea\xdb\xfe\xb7\x0c\x44\x84\x2c\x71\xef\x78\xc0\xa3\xfa\x02\xe3\xf4\x28\x02\xf8\xff\x4b\xb2\x6f\x88\x8b\x9c\xd2\xe3\xfb\x1e\xb8\xbd\x5d\x00\x4f\xae\xe4\x01\x7c\x84\x6b\x56\xdc\x6c\x9c\x00\x1a\x0f\xb5\x59\x11\xf0\x24\x5f\x27\x6c\x96\x05\xbc\x3c\x7c\x0a\xaa\x87\xbe\x97\x36\x44\xf7\x00\x00\x00\xff\xff\x1c\x37\x60\x12\x7f\x02\x00\x00")

func _000003_indexesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_indexesUpSql,
		"000003_indexes.up.sql",
	)
}

func _000003_indexesUpSql() (*asset, error) {
	bytes, err := _000003_indexesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_indexes.up.sql", size: 639, mode: os.FileMode(436), modTime: time.Unix(1659556435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdb\x8e\xdb\xc8\x11\x7d\x26\xbf\xa2\x57\xc0\x2e\xc4\x40\xd1\xf0\x7e\x11\x30\x2f\x6b\x3b\x80\x1f\xe2\x05\xb2\xde\xa7\x54\x30\x68\x92\xdd\x0a\x11\x49\x94\x49\x6a\x53\x33\xc6\xfc\x7b\x70\x58\xad\x19\xcd\xc5\xeb\xc4\xb1\x01\x8e\xc8\x66\x77\xd5\xa9\xdb\x39\xf4\xd5\x95\x7a\xd3\xb7\x46\x6d\xcd\xc1\x0c\x7a\x32\xad\xaa\x6f\xd5\xb6\xff\x73\xdd\x1d\x5a\x3d\xe9\xb5\x7f\x75\xa5\xc6\xfe\x34\x34\x66\xdc\xe0\x3e\xc4\xbf\xe8\xa6\x3b\x74\xd3\xfa\x74\x5c\x8f\x9f\x76\x0f\xab\xf1\x4d\x77\x68\x0d\x9b\xf1\xf9\x8b\xe4\x95\x17\x67\xfb\xdb\x1e\x4f\xfb\x6e\x3b\xe8\xa9\xeb\x0f\xa3\x5b\x78\xfb\x8b\xfa\xf0\xcb\x47\xf5\xee\xed\xfb\x8f\x3f\xf8\xfe\x51\x37\xff\xd2\x5b\x73\xb1\xcd\xf7\xbb\xfd\xb1\x1f\x26\xb5\xf4\xbd\x45\x7d\x3b\x99\x71\xe1\x7b\x8b\xa6\xdf\x1f\x07\x33\x8e\x57\xdb\xbb\xee\x88\x05\xbb\x9f\xf0\xd3\xf5\xf2\xf7\xaa\xeb\x4f\x53\xb7\xc3\x43\x3f\x1f\x38\xea\xe9\x9f\x57\xb6\xdb\x19\xdc\x60\x61\x9c\x86\xee\xb0\x9d\xdf\x4d\xdd\xde\x2c\xfc\xc0\xf7\xed\xe9\xd0\x9c\xf1\xfe\xcd\xe8\x76\x89\x1b\xf5\xf7\x7f\xc0\xed\x4a\x1d\xf4\xde\x28\x39\x16\xa8\xe5\x79\xd5\x0c\x43\x3f\x04\xea\xb3\xef\x6d\xef\xe6\x27\xb5\xb9\x56\x40\xb5\xfe\x60\xfe\x0d\x23\x66\x58\xce\xb0\xf1\xfc\xf3\xc9\x5a\x33\xcc\x66\x83\xc0\xf7\x3a\x3b\x1f\xf8\xe1\x5a\x1d\xba\x1d\x4c\x78\x83\x99\x4e\xc3\x01\x8f\x2b\x65\xf7\xd3\xfa\x1d\xac\xdb\xe5\x02\x86\xd4\x8f\x9f\x36\xea\xc7\xdf\x17\x82\x64\xf6\x15\xf8\xde\xbd\xef\x7b\xbf\xeb\x41\xd5\x27\xab\xc4\x8f\x38\xf1\xbd\x1b\x81\x73\xad\xba\x7e\xfd\xa6\x3f\xde\x2e\x7f\xaa\x4f\x76\xa5\xb6\x77\x81\xef\x35\xbb\x77\x67\xa4\xeb\x37\xbb\x7e\x34\xcb\xc0\xff\x5e\x78\x60\x46\xec\x7f\xc1\x90\x19\x06\xc1\xed\x16\xeb\x93\x5d\xff\x0c\xe8\xcb\x60\x85\x1d\xfe\xbd\xef\x4f\xb7\x47\xa3\xf4\x38\x9a\x09\x29\x3f\x35\x13\xac\xcc\xf1\xb9\x7a\xf8\x5e\x77\xb0\xbd\x52\xfd\xb8\xfe\x4b\xb7\x33\xef\x0f\xb6\x7f\x38\xe7\x4a\x78\x5e\xbf\xb0\x30\xd7\x50\x29\x57\x46\xdf\x1b\xbb\xbb\xf9\xb9\x3b\x4c\x79\xea\x7b\x7b\x0c\x88\x7a\x30\xfa\xd7\xbe\x35\xf3\xe2\xc7\x6e\x6f\x14\xda\x64\x8d\x3b\xf8\x99\x5b\x65\x69\xbb\xe7\xbe\x02\xf5\x41\xef\xcd\x32\x70\x1e\xe0\xd3\x45\x69\xbb\x35\xbc\xfb\xf7\x7f\x70\xf6\xd7\xee\x0e\x67\x67\x34\x4f\x8f\x02\xe8\x1f\x1e\x05\xd6\x65\x70\x89\xfc\xa9\x01\x84\xf6\x35\x03\x08\x6e\x19\x3c\x06\xfa\xc2\x82\x8b\xfe\xcb\x46\xde\x8f\x6f\xbb\x61\x19\xa8\xba\xef\x77\x97\xa7\xf5\x6e\xfc\x4a\xe4\xb7\xa3\x04\x6e\x06\xab\x1b\xf3\xf9\xfe\xe2\xb4\x6b\x09\x74\xf9\xcd\xcd\x05\x2d\xfd\x76\xfc\xf5\xd3\x4e\x5d\xbb\x86\x58\x2e\x88\x23\x4b\x5c\xd6\xc4\x61\x49\x1c\x86\xaf\x5f\x16\x7b\x52\xe2\x2a\x22\x6e\x22\xe2\xd4\x10\x37\x09\x71\x82\xf7\x0d\x71\x99\x13\x1b\x4b\x5c\x54\xc4\xa1\x26\x6e\x2d\x71\x9b\x13\xa7\x9a\x38\xa9\x89\xab\x94\x38\xaf\x88\x75\x48\x9c\x56\xb2\x16\x47\xc4\x75\x4a\x1c\x26\xc4\x61\x21\x36\xe0\xa3\xc9\x89\xeb\x4a\xce\x66\x35\x71\x5d\x10\xd7\x09\x71\x5a\x12\x57\x0d\x71\x53\x89\x8d\x3c\x24\x2e\x5a\xe2\xa2\x26\x6e\x53\x62\x9d\x13\x67\xc0\x94\xc9\x3b\x13\x13\x9b\x9c\xd8\x6a\x62\x9b\x10\xdb\x82\x38\x81\x9f\x8a\x38\xae\x89\x0d\x70\x97\x62\x1f\xbe\xda\x8c\xb8\x8c\x89\x13\x4d\x1c\x23\xae\x94\x38\x6b\x89\xa3\x4a\xee\x73\x4d\x5c\x46\xb2\x86\x9c\x24\x0d\x71\x05\xec\x96\x38\x32\xc4\x3a\x26\x4e\x0b\x62\x1b\x11\xc7\x5a\xb0\xcc\xfb\x42\xc9\x45\x9c\x09\x36\xac\x65\xb8\x22\xd9\x1f\x35\xc4\x26\x24\x8e\xe1\x23\x25\xae\x33\x62\x9b\x12\xdb\x50\xfc\x25\xad\xf8\xaa\x8d\xd4\x2a\x43\xee\x81\x1f\xbe\x5a\xe2\x36\x21\x6e\xf1\x6c\x88\xf3\x4c\xe2\x49\x50\x2f\x9c\x37\x52\xaf\x2a\x23\x6e\x9c\xed\xb9\x06\xc0\xe1\xec\xb4\x91\xe4\x45\x1b\xe2\x38\x91\x58\x50\x43\x5b\x4a\x5e\xb3\x58\xfc\xe2\x2c\xf0\xe9\x5a\x62\x6d\x4a\xe2\xb2\x90\xba\x9b\x48\xee\x11\x4b\xd9\x4a\x7d\x8a\x84\x38\x2f\x25\xe6\xaa\x92\x73\xa8\x6b\x7d\x71\x3e\x4a\xa4\x17\xa2\x56\x2e\xe3\xea\x87\x3d\xb5\x95\x3a\x98\x56\xe2\xac\x0a\xc9\x77\x8e\xbe\xca\x25\xef\xa6\x26\xb6\x8d\xe4\x31\x41\xfe\xd0\x6b\xae\xb6\x59\x45\x9c\x59\xe2\xbc\x25\x8e\x73\xe9\x49\xec\x03\x16\xe4\x36\xb7\xd2\x33\xf0\x05\xbc\xe8\xc3\x1a\x7d\xd0\x48\x0f\x02\x0b\xfa\x19\x75\x8f\x5d\xad\x42\xe4\xab\x22\x6e\x62\xd7\x0f\x89\xcc\x8e\xc9\x5c\x4c\xc0\x8e\x7c\x97\x92\xef\x56\x3f\xe6\xba\x8d\x65\x8e\xd0\x4f\x99\xeb\x0f\x53\x0a\x0e\xc4\x8e\xfe\x4f\x4a\xa9\x0f\xfa\xa1\x76\xf5\xb7\xc8\x5d\x2b\x3d\x84\xd8\xb2\x86\x58\x57\x12\x37\xec\x61\x06\x50\x5f\xec\x89\x30\x13\xb1\xcb\x7d\x22\xf9\x88\x2b\xd7\x0f\xad\xcc\xea\xdc\x33\x29\x71\xda\x4a\x3d\x1a\x23\x78\x42\x37\x6f\x36\x13\x3c\x97\xb3\x8f\x2b\xac\x04\x6f\x83\x3c\x86\xc4\x11\xf8\x22\x3e\xef\x5b\x9c\x3f\x05\x5e\x90\x8d\x53\xa9\xd7\xd4\xff\xac\x65\x17\x5f\x0f\xbe\xe7\xbd\xe4\xab\x95\xef\x79\x8b\x97\xdf\x56\x8b\x95\xef\x05\x0f\xc2\xf2\xe2\x14\x7c\xfe\x69\x96\xc3\x4b\x9f\xb3\x1e\x3e\x7c\x74\x7c\x09\xed\xd7\x74\xfd\x41\x8e\x67\x41\xdd\x5c\x3f\x27\xe7\xcf\x90\xad\x8d\x7a\x15\xb4\x82\x2e\x6d\x54\x96\xe4\x2b\x05\x85\xd9\x5c\x0a\xd0\x32\x4d\xf2\x60\x5e\x87\x6e\x6c\x44\x57\x7e\x3b\x74\xbc\x8c\xf2\xac\x88\xd2\x38\x4a\xb2\x95\x0a\x83\x7b\xdf\xd3\xf0\xfb\xd3\x1c\xe0\xe7\x39\xaa\x8d\x72\xc1\x01\xd4\x66\xfe\x7b\xff\x90\x64\xbd\x7a\x45\x13\x1e\x3e\x4a\xbf\x5d\x16\x40\xc9\xa5\x95\x31\x6a\xdc\x48\xcc\xed\x11\xca\x98\xda\x5a\x5a\xb4\xd4\xd2\x8a\x85\xa3\x0b\xfc\x62\xaf\x76\x6d\x39\xb7\x60\x2a\x34\x88\x91\x41\xfb\xa7\x8e\x9e\x75\x23\x6d\x1a\x97\x8f\x63\x8a\x51\x04\xf5\x87\x91\xa3\x77\xd0\x02\xa8\xb7\x10\xaa\xaf\x42\x37\xf6\xad\xd8\xc8\x41\x11\x95\x48\x0d\xc6\x5e\x27\x22\x67\x55\x4b\x9c\xe1\x59\x13\xe7\x8d\x8c\x2c\x24\x03\x71\xe7\x6e\x44\x30\x46\x18\x77\x50\x16\xce\xa4\x31\x71\x96\x3e\xe6\x01\xb4\x9b\x65\x42\xb5\xd6\x08\xbd\x43\x4e\x80\x25\x8f\x84\x4e\x40\x1b\xa0\x1e\xc4\x0a\x6a\xc1\xe8\x14\x67\x0a\xd3\x42\x9f\x33\x6d\x24\x22\x41\x33\x05\xb7\x92\xab\xca\xc9\x25\xa4\x04\x31\xd4\xc8\x57\x41\xdc\x96\xb2\x1e\xb7\x32\x96\x18\x73\xd0\x39\x68\x1a\xb9\x87\xe4\x22\x06\xc8\x2f\x64\x09\x79\x40\x8d\x8a\x50\xe8\x18\x31\x56\x4e\x26\x90\x87\x08\xe3\x9c\xb9\xbc\x3b\xba\xc1\xc8\x83\x82\x2b\x2d\x14\x08\x7f\xb8\x87\x0c\xa3\xee\xa0\xda\x14\x54\x67\x44\x6e\x67\x5c\xc0\x14\x8b\x64\xcd\x12\xeb\xf0\xc5\x78\xce\x44\xce\x35\xe4\xa5\x10\x9b\xda\x49\x94\x71\x31\x43\xee\x40\x61\xa0\x4c\xac\x45\xf1\x4b\x3a\x4a\x5c\x9c\xe8\x01\x53\x49\xfe\xd1\x0b\xaf\xd2\xd1\xd3\x3e\xff\x56\x46\x7a\x6a\xe5\x91\x94\x9e\xff\xd7\xee\x35\x5e\x7a\x7a\xf6\xbf\xa7\xa6\x57\x91\x7f\x57\x76\x7a\x89\xde\x11\x54\x92\x46\xff\x2b\x41\x55\x59\x96\x47\x65\xfc\xfd\x08\x2a\xf9\xff\x09\x4a\xa7\xd2\xe4\x8d\x23\xa1\xd2\x7d\xb7\xe2\x5b\x05\x1a\x7d\xfe\x6e\xc5\xbb\x73\x63\x35\xae\x79\xff\x13\x00\x00\xff\xff\xf7\xbb\x8f\xd2\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(436), modTime: time.Unix(1659643887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\xb1\x0d\xc5\x20\x0c\x04\xd0\x9e\x29\x6e\x01\xa0\xff\xdb\xdc\x4f\xac\x13\x42\xb1\x11\xf1\xfe\x4a\x93\x22\xf5\x7b\x8b\xc7\xa4\x0c\xd7\xd0\x66\x8e\xf0\xbb\x94\xde\x15\x3f\x99\xdb\x66\x1a\x14\xf5\x3f\xfc\x64\x12\x75\x4d\x7d\x26\x6a\xe0\xa5\xa6\x00\x5a\x79\x02\x00\x00\xff\xff\xe6\x24\xd8\x86\x4e\x00\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 78, mode: os.FileMode(436), modTime: time.Unix(1656363775, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init.up.sql":    _000001_initUpSql,
	"000002_indexes.up.sql": _000002_indexesUpSql,
	"000003_indexes.up.sql": _000003_indexesUpSql,
	"bindata.go":            bindataGo,
	"migrations.go":         migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init.up.sql":    &bintree{_000001_initUpSql, map[string]*bintree{}},
	"000002_indexes.up.sql": &bintree{_000002_indexesUpSql, map[string]*bintree{}},
	"000003_indexes.up.sql": &bintree{_000003_indexesUpSql, map[string]*bintree{}},
	"bindata.go":            &bintree{bindataGo, map[string]*bintree{}},
	"migrations.go":         &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
