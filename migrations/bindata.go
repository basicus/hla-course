// Code generated by go-bindata.
// sources:
// 000001_init.up.sql
// 000002_indexes.up.sql
// 000003_indexes.up.sql
// 000004_posts.up.sql
// 000005_collate.up.sql
// 000006_charset.up.sql
// 000007_dtupdate.up.sql
// 000008_delupd.up.sql
// 000009_dialogs.up.sql
// bindata.go
// migrations.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\xdf\xd6\x4a\x3b\x94\x69\xa0\x49\x3b\x21\xb4\x03\x07\x86\x84\xc6\xb9\x4a\x5b\xb7\xb3\x48\x9c\xc9\x49\x60\x7d\x7b\xd4\xa6\x53\x35\x60\xe2\xe6\xfa\xf3\xf7\x37\x89\x2b\xec\x88\xb7\x4a\xd5\x82\x3a\x20\x04\x5d\x19\x04\x6a\x81\x5d\x00\x3c\x93\x0f\x1e\xa2\x47\xf1\x2a\x53\x00\x30\xd6\x25\x35\x00\x50\x51\x47\x1c\xe0\x24\x64\xb5\xf4\xf0\x81\x3d\x3c\xbe\x1f\x5e\xcb\xe7\xfd\xd3\xdb\xee\x65\xb7\x3f\x80\x8e\xc1\x95\xc4\xb5\xa0\x45\x0e\xcb\xd1\x37\xae\x23\x1e\x0a\xf8\xd4\x52\x1f\xb5\x64\xab\xa2\xc8\x87\xef\xe1\x87\x1c\x8d\x49\x73\x68\x35\x99\xab\xb9\xbb\xa2\xc8\x13\x3b\x1d\x1d\xe3\x35\xbb\xbf\x20\xed\xfd\x97\x93\x66\x46\x0f\xeb\xfc\x47\x34\x6b\x9b\xec\x59\x5f\x6d\x26\xdf\x47\x99\xf0\x6f\xa6\xbb\x49\x03\xba\xdc\xc6\xe3\x79\x6a\x21\x47\x0b\xd9\xc2\x6a\x83\x8b\xe5\xa2\xc5\xb1\x98\xc4\xda\x45\x0e\xd2\xff\x19\x5a\x53\xe8\x6f\x1d\x86\x38\xa0\xe0\xb0\x81\xf9\xad\xd6\x9b\x5c\xa9\xfc\xff\x7d\x95\xad\x10\x72\x73\x63\x6b\x29\x3f\x8d\x0c\xfd\xd4\x4d\xb9\xce\x5a\x0a\x5b\xf5\x1d\x00\x00\xff\xff\x09\xe8\xcf\x40\x18\x02\x00\x00")

func _000001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initUpSql,
		"000001_init.up.sql",
	)
}

func _000001_initUpSql() (*asset, error) {
	bytes, err := _000001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init.up.sql", size: 536, mode: os.FileMode(436), modTime: time.Unix(1657142135, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_indexesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xbb\xca\x83\x40\x10\x46\xfb\x7d\x8a\x29\x7f\xe1\x7f\x83\xad\x0c\x5a\x04\x24\x45\xb0\x48\xb7\xac\xce\x28\x03\xba\x0b\x7b\x01\xf3\xf6\x41\x27\xf7\x90\x26\xdd\xb7\x67\x39\x07\xa6\xa3\x91\x9d\x56\xaa\x6c\xda\xfa\x08\x6d\xb9\x6b\x6a\xc8\x91\x42\x54\x00\x00\x65\x55\xc1\xfe\x50\xd5\x27\x61\xc6\xd9\x99\x0c\xe3\x02\x7f\xeb\xfa\x87\x98\xc3\x3a\x0a\xfd\xe1\x9b\x21\x30\x39\xbc\x57\xd8\x21\x2d\xcf\x3f\xd1\x64\x46\x69\x6d\x94\xf1\xb7\xca\x70\xab\x08\x90\x8e\x9d\x12\x05\x48\xb6\x9b\xe8\xed\x9a\x47\x21\x9a\xc9\x8f\xec\x44\xde\xe6\x57\xd1\x22\xbe\x88\xbd\xcf\x2e\x85\xb3\xa8\xd7\x47\xa1\x95\xea\xfd\x3c\x73\xd2\xea\x12\x00\x00\xff\xff\x31\x64\x7b\xe9\x55\x01\x00\x00")

func _000002_indexesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_indexesUpSql,
		"000002_indexes.up.sql",
	)
}

func _000002_indexesUpSql() (*asset, error) {
	bytes, err := _000002_indexesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_indexes.up.sql", size: 341, mode: os.FileMode(436), modTime: time.Unix(1659556182, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_indexesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xcd\x8a\x83\x30\x1c\xc4\xef\x79\x8a\xff\x31\xc2\xbe\x81\x27\x25\x61\x11\xc4\x5d\x5c\x17\x7a\x0b\x6a\xa2\x04\x34\x42\x3e\xa0\x7d\xfb\xe2\x17\x95\x54\xc1\xb6\xb7\xc9\x30\xf3\x23\xff\xa9\x44\x2b\x55\x88\x50\x94\x16\x34\x87\x22\x8a\x53\x0a\xce\x08\x6d\x80\xe4\x3f\xbf\x90\x64\x84\x5e\x66\x83\xa9\xb2\x17\x4c\xf2\x6b\xf8\x14\x66\x8d\x96\x42\x71\xbf\xb2\xd8\x86\x39\xc9\xdf\x2b\x36\x6b\xb1\xec\xac\xd0\x60\xcb\xaa\x13\x47\xdf\xeb\x86\x56\xaa\xd3\xe9\x7a\x70\xca\xea\xdb\xfe\xb7\x0c\x44\x84\x2c\x71\xef\x78\xc0\xa3\xfa\x02\xe3\xf4\x28\x02\xf8\xff\x4b\xb2\x6f\x88\x8b\x9c\xd2\xe3\xfb\x1e\xb8\xbd\x5d\x00\x4f\xae\xe4\x01\x7c\x84\x6b\x56\xdc\x6c\x9c\x00\x1a\x0f\xb5\x59\x11\xf0\x24\x5f\x27\x6c\x96\x05\xbc\x3c\x7c\x0a\xaa\x87\xbe\x97\x36\x44\xf7\x00\x00\x00\xff\xff\x1c\x37\x60\x12\x7f\x02\x00\x00")

func _000003_indexesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_indexesUpSql,
		"000003_indexes.up.sql",
	)
}

func _000003_indexesUpSql() (*asset, error) {
	bytes, err := _000003_indexesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_indexes.up.sql", size: 639, mode: os.FileMode(436), modTime: time.Unix(1659556435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000004_postsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x31\x6b\xf3\x30\x10\x86\x77\xfd\x8a\x77\x8c\x21\x43\xf8\xf8\x86\x42\x26\x25\x56\x8b\x21\x71\x82\x23\x43\x37\x21\xc7\xd7\x54\xd4\xb6\x82\x74\x29\xc9\xbf\x2f\xb6\x3c\xb4\x94\x6a\xd3\xab\x7b\x8e\xe7\x74\x0d\x5d\xdc\xb0\x16\xe2\x1c\xc8\x32\x81\x6d\xd3\x11\xdc\x1b\x06\xcf\xa0\xbb\x8b\x1c\x71\xf5\x91\xa3\x58\x08\x00\x70\x2d\xe6\xd3\xb8\x8b\x1b\x18\xd7\xe0\x7a\x1b\x1e\xf8\xa0\x07\x64\xad\x0f\xa6\x28\xb7\x95\xda\xab\x52\xc3\xde\xd8\x1b\x37\x9c\x03\xf5\x34\xf0\x72\xe2\x6f\x91\x82\x99\x9a\x24\x3e\xa5\xec\xb8\xa3\xa9\xeb\xa7\x0d\xe7\x77\x1b\x16\xff\x56\xab\x6c\x72\x18\x6e\x5d\x97\x8a\x7a\x8a\xd1\x5e\xe8\x47\xd1\xff\xa7\x2c\x3d\x26\xfd\xd6\x58\x46\x2e\xb5\xd2\xc5\x5e\x21\x57\xcf\xb2\xde\x69\x6c\xeb\xaa\x52\xa5\x36\x63\x78\xd2\x72\x7f\x9c\x55\xae\xed\x2f\xe4\x50\xa2\x3e\x8e\xb7\xbf\xa0\x96\x3a\x62\x6a\xd1\x78\xdf\x89\x6c\x2d\x84\xdc\x69\x55\x41\xcb\xcd\x4e\xa5\x8f\x82\xcc\x73\x14\x65\xae\x5e\x91\x02\x33\xce\x1c\x8d\x6b\xef\x58\xcc\xe3\x2f\xbf\xf9\x66\xa8\x4f\x45\xf9\x82\x8d\xae\x94\x1a\x17\xe1\xfb\xde\xf1\x5a\x7c\x05\x00\x00\xff\xff\x4a\x02\x7b\x0d\x99\x01\x00\x00")

func _000004_postsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_postsUpSql,
		"000004_posts.up.sql",
	)
}

func _000004_postsUpSql() (*asset, error) {
	bytes, err := _000004_postsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_posts.up.sql", size: 409, mode: os.FileMode(436), modTime: time.Unix(1659735067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000005_collateUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xca\x31\x0e\x80\x20\x0c\x05\xd0\xbd\xa7\xe8\x21\x1c\x4c\x88\x67\x21\x50\xab\x69\x52\xa8\x81\xcf\xfd\x9d\x9d\xdc\x5f\xd5\xdb\x7a\x22\x2a\x0e\x1d\x8c\x52\x5d\xf9\x89\x89\xc9\x12\xee\x05\xca\x07\x2f\x5c\x7b\xab\x5b\x5e\xdd\x24\x4e\xcd\x62\xe9\xe3\xd7\xd4\xf1\xe7\x49\xa2\x35\x43\x22\xa2\x37\x00\x00\xff\xff\xc3\xbe\x04\xae\x73\x00\x00\x00")

func _000005_collateUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_collateUpSql,
		"000005_collate.up.sql",
	)
}

func _000005_collateUpSql() (*asset, error) {
	bytes, err := _000005_collateUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_collate.up.sql", size: 115, mode: os.FileMode(436), modTime: time.Unix(1659904305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000006_charsetUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xce\xbd\x4a\xc6\x30\x14\xc6\xf1\x3d\x57\x71\x46\xdd\x8a\x74\x28\x14\x87\x18\x03\x0e\xc5\x42\x1b\x5c\x4b\x9a\x9e\xd6\x48\x3e\x4a\x72\x22\x78\xf7\xa2\x0e\x4a\x91\xbe\xcb\xbb\x3e\x0f\xfc\xf8\xcf\xb8\xd9\xd0\x32\xc6\x3b\x25\x07\x78\xe4\x8a\x3f\xf0\x51\xc2\x9e\xe2\x1b\x1a\x02\xf1\xc4\x07\x2e\xbe\xae\x51\x2a\xb8\x87\x42\x6b\xe3\xe7\x1a\x44\xdf\x75\x5c\xc9\xdf\x65\x2a\xc1\x9a\xb8\xe0\x64\x6c\xcb\xb4\x23\x4c\x40\x7a\x76\x08\x7b\xcc\x94\x41\xf4\xcf\x2f\x72\x50\xa0\xfa\x03\x79\x04\x2f\x71\x25\x63\xba\x22\xf7\x53\xe7\xe3\x62\xd7\x0f\x20\x4b\x0e\xe1\x5d\x27\xf3\xaa\xd3\xcd\x5d\x55\xdd\x82\x89\xce\x69\xc2\x7f\x1c\x08\x91\x20\x14\xe7\x4e\x40\x8f\x39\xeb\xed\x2f\x59\x37\xe7\xe6\xb7\x67\xa2\xf7\x96\x5a\xc6\xd8\x67\x00\x00\x00\xff\xff\x2a\x15\x86\x74\x9e\x01\x00\x00")

func _000006_charsetUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000006_charsetUpSql,
		"000006_charset.up.sql",
	)
}

func _000006_charsetUpSql() (*asset, error) {
	bytes, err := _000006_charsetUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000006_charset.up.sql", size: 414, mode: os.FileMode(436), modTime: time.Unix(1659904721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000007_dtupdateUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x4b\x0a\x02\x31\x10\x84\xe1\x7d\x9f\xa2\x97\x7a\x86\xe0\x59\x86\x9e\xa4\xd4\x40\xe7\x41\x52\xc1\xeb\x8b\x8c\xe2\x6c\x8b\xbf\xbe\x1d\x8f\x5c\x83\x88\x98\x13\x43\x69\xbb\x43\x7b\x9b\x9c\xaa\xc7\x14\x9b\xaf\x52\x75\xf5\x64\x44\xda\x8c\x3a\x41\x4d\xb8\xdb\x72\x6a\x5c\x63\xa0\x72\x63\x2e\x98\xb4\xd2\x2f\xd7\x20\x47\xfb\x65\x3e\xf5\xff\x7c\x8b\x03\x3f\xe7\xf5\xc4\xc0\x19\xce\x53\xeb\x72\x0f\x22\xb1\x95\x92\x19\xde\x01\x00\x00\xff\xff\xab\x03\x95\x78\x9e\x00\x00\x00")

func _000007_dtupdateUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000007_dtupdateUpSql,
		"000007_dtupdate.up.sql",
	)
}

func _000007_dtupdateUpSql() (*asset, error) {
	bytes, err := _000007_dtupdateUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000007_dtupdate.up.sql", size: 158, mode: os.FileMode(436), modTime: time.Unix(1659905446, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000008_delupdUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\xc1\xad\x02\x31\x0c\x84\xe1\xbb\xab\x98\x3e\xa2\x57\x4c\xf2\x3c\x81\x48\x4e\xbc\x5a\x3b\x42\x74\xcf\x01\x96\x02\xb8\xff\xf3\x4d\xe3\x6d\xac\x22\x22\xd5\x92\x27\xb2\x36\x23\x0e\x8f\x0c\x01\x80\xe9\x3a\xfa\x13\x4a\x63\x52\xd1\xdc\x0d\xca\x5e\xb7\x25\x7a\xb5\x60\x91\x7d\x68\xcd\x6b\x13\xcc\x2b\xfe\x7b\x07\xf2\xb8\xf3\xe4\x57\x18\x81\xb5\xcd\xca\xaf\x7f\x58\x9e\x1f\x41\xfe\x7d\xce\x91\xe5\x15\x00\x00\xff\xff\x5f\x20\x90\xba\xc3\x00\x00\x00")

func _000008_delupdUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000008_delupdUpSql,
		"000008_delupd.up.sql",
	)
}

func _000008_delupdUpSql() (*asset, error) {
	bytes, err := _000008_delupdUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000008_delupd.up.sql", size: 195, mode: os.FileMode(436), modTime: time.Unix(1659906006, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000009_dialogsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x8a\xdb\x30\x10\x86\xef\x7e\x8a\x39\x26\x90\x43\xda\xd3\x42\x4e\xde\xb5\x5a\x02\x89\x5b\xbc\x0a\xf4\x26\xc6\xd6\xd8\x3b\x54\x96\x83\x34\x2e\xd9\xb7\x2f\x8e\x9d\xb4\x1b\x87\x5d\x68\x75\x32\x23\xe9\xf7\xa7\x4f\xa3\x92\x1a\xf6\x9b\x24\xa9\x02\xa1\x10\x08\x96\x8e\x80\x6b\xf0\x9d\x00\x9d\x38\x4a\x84\xea\x05\x25\x26\x8b\x04\x00\x80\x2d\x5c\x46\xc9\x0d\x7b\x81\x63\xe0\x16\xc3\x2b\xfc\xa4\x57\x48\x0f\xfa\x9b\xd9\xe6\x4f\x85\xda\xab\x5c\x03\xf6\xd2\x19\xf6\x55\xa0\x96\xbc\xac\xce\x01\xc2\xe2\x68\x0c\xf8\x85\xa1\x7a\xc1\xb0\xf8\xbc\x5e\x2f\xe1\xfe\x18\x28\x7c\xef\x1c\x54\x9d\x73\x03\x5f\x2f\xf5\x83\x69\xc8\x53\x40\x67\x2a\x1e\x33\x47\x76\x6b\x50\x20\x4b\xb5\xd2\xdb\xbd\x82\x4c\x7d\x49\x0f\x3b\x0d\x4f\x87\xa2\x50\xb9\x36\x43\xf1\x59\xa7\xfb\xef\xd7\xcc\x69\xaf\xeb\x22\x8d\x87\x2a\xbb\xce\x9d\x3f\x2c\xd5\xd8\x3b\x81\x1a\x5d\xa4\xbb\x3c\xc9\x72\x93\x24\xe9\x4e\xab\x02\x74\xfa\xb8\x53\x93\xa3\x61\x49\x9a\x65\xb0\xcd\x33\xf5\x63\xac\x99\x3e\x52\x88\x86\xed\x09\x16\x7f\x38\x97\x70\x78\xde\xe6\x5f\xe1\x51\x17\x4a\x6d\x92\x0f\xf5\x9b\x23\x06\xe1\x8a\x8f\xe8\x67\x57\xf1\x6f\xf7\x70\x4e\x65\x3b\xed\x1e\x6b\x03\xea\x6d\x2d\x0a\x4a\x1f\x01\xd8\xcb\xc3\x55\xcc\xa7\xb7\x22\xd0\x09\x85\x89\x7d\x4e\x3b\xa4\xa0\xb5\xc0\xde\xd2\x69\x3e\x3f\xa9\x19\x71\x56\x17\x86\xd5\xf4\xe3\x25\xf4\x91\x7d\x03\xa5\x04\xa2\xf7\xdb\xb4\xa5\x18\xb1\xa1\x79\xa7\xfe\x9f\xa0\xeb\xfe\x9b\x16\xf8\x4b\x59\x1d\xba\xf6\xdd\x55\x91\xfc\xb9\x3b\x01\x2c\x0a\x09\xb7\x74\x6f\xd5\x74\x80\xb7\x2f\x63\xbd\xfc\xf0\x11\x24\xb3\x4b\xb8\xaa\xb8\xe3\xfe\x32\x77\xe3\x7d\x42\x9c\xf9\xee\xda\x96\x65\xf3\x3b\x00\x00\xff\xff\x65\x58\xbd\x40\x26\x04\x00\x00")

func _000009_dialogsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000009_dialogsUpSql,
		"000009_dialogs.up.sql",
	)
}

func _000009_dialogsUpSql() (*asset, error) {
	bytes, err := _000009_dialogsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000009_dialogs.up.sql", size: 1062, mode: os.FileMode(436), modTime: time.Unix(1660159705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x9a\x6f\x6f\xe3\x46\x92\xc6\x5f\x4b\x9f\x82\x6b\x60\x17\xd2\xc1\xe7\x21\xd9\xfc\x6b\x60\xde\x6c\x92\x03\xf2\xe2\xb2\xc0\x6d\xf6\xd5\xf5\xc1\x68\x92\x4d\xaf\x70\xb6\xe5\x48\xf2\x5e\xcf\x04\xf3\xdd\x0f\xbf\xae\x92\xf5\xd7\xc9\xc4\xa3\x00\xce\x48\x14\xd9\x5d\x5d\x5d\xf5\x3c\x4f\x55\xf3\xc3\x87\xe4\xbb\xe5\xe0\x93\x7b\xff\xe4\x57\x6e\xe3\x87\xa4\xfb\x94\xdc\x2f\xff\xbd\x5b\x3c\x0d\x6e\xe3\x6e\xa6\x1f\x3e\x24\xeb\xe5\xcb\xaa\xf7\xeb\x5b\x3e\xa7\xfc\x97\xdd\x2d\x9e\x16\x9b\x9b\x97\xe7\x9b\xf5\x2f\x0f\xaf\x57\xf3\xbb\xc5\xd3\xe0\x83\x5f\x1f\xff\x60\xde\xfa\xa1\xb8\x7b\x5e\xae\x37\x27\x97\xcb\xbb\x7e\xf9\xf0\xe0\x36\xfe\xf8\x87\xea\xae\xff\xa7\x5b\xad\xfd\xc9\xd4\xf5\xdd\xb0\x79\x79\x1e\xce\x3c\xd2\xdc\x0d\xfe\xe1\xe5\x79\x38\xbe\xde\xde\x0d\x0b\xf7\xb0\xbc\xdf\x9f\x7c\xbb\xe6\xfb\x25\xdf\x1e\x17\xf7\x2b\xb7\x59\x2c\x9f\xd6\x7a\xe1\xfb\xbf\x25\x3f\xfd\xed\xe7\xe4\x87\xef\x7f\xfc\xf9\x4f\xd3\xe9\xb3\xeb\xff\xd7\xdd\xfb\xbd\xdb\xa6\xd3\xc5\xe3\xf3\x72\xb5\x49\x66\xd3\xc9\x55\xf7\x69\xe3\xd7\x57\xd3\xc9\x55\xbf\x7c\x7c\x5e\xf9\xf5\xfa\xc3\xfd\xe7\xc5\x33\x17\xc6\xc7\x0d\xff\x2c\x96\xf2\xff\x0f\x8b\xe5\xcb\x66\xf1\xc0\x97\x65\x7c\xe0\xd9\x6d\xfe\xf9\x61\x5c\x3c\x78\x3e\x70\x61\xbd\x59\x2d\x9e\xee\xe3\x6f\x9b\xc5\xa3\xbf\x9a\xce\xa7\xd3\xf1\xe5\xa9\xdf\xda\xfb\x5f\xde\x0d\x33\x3e\x24\xff\xfd\x3f\x4c\x7b\x9d\x3c\xb9\x47\x9f\xc8\x63\xf3\x64\xb6\xbd\xea\x57\xab\xe5\x6a\x9e\xfc\x3a\x9d\xdc\x7f\x8e\xdf\x92\xdb\x8f\x09\x56\xdd\xfc\xe4\xff\x8f\x41\xfc\x6a\x16\xcd\xe6\xfb\x5f\x5f\xc6\xd1\xaf\xe2\xb0\xf3\xf9\x74\xb2\x18\xe3\x03\x7f\xfa\x98\x3c\x2d\x1e\x18\x62\xb2\xf2\x9b\x97\xd5\x13\x5f\xaf\x93\xf1\x71\x73\xf3\x03\xa3\x8f\xb3\x2b\x06\x4a\xfe\xfc\xcb\x6d\xf2\xe7\x7f\x5d\x89\x25\x71\xae\xf9\x74\xf2\x65\x3a\x9d\xfc\xcb\xad\x92\xee\x65\x4c\x64\x1e\x99\x64\x3a\xb9\x13\x73\x3e\x26\x8b\xe5\xcd\x77\xcb\xe7\x4f\xb3\xbf\x74\x2f\xe3\x75\x72\xff\x79\x3e\x9d\xf4\x0f\x3f\x6c\x2d\xbd\xf9\xee\x61\xb9\xf6\xb3\xf9\xf4\x52\xf6\x30\x8c\x8c\xff\xc6\x40\x7e\xb5\x12\xbb\xf5\x62\xf7\x32\xde\xfc\x15\xd3\x67\xf3\x6b\xee\x98\x7e\x99\x4e\x37\x9f\x9e\x7d\xe2\xd6\x6b\xbf\xc1\xe5\x2f\xfd\x86\x51\xe2\xfa\x74\x3f\xa6\x93\xc5\xd3\xb8\x4c\x92\xe5\xfa\xe6\x3f\x16\x0f\xfe\xc7\xa7\x71\xf9\xfa\x9c\x6e\xe1\xf6\xfa\xde\x08\x71\x0f\x93\x44\xb7\x71\x3a\x59\x2f\x3e\xc7\xef\x8b\xa7\x4d\x55\x4c\x27\x8f\x24\x6d\xf2\x3a\xe8\x7f\x2e\x07\x1f\x2f\xfe\xbc\x78\xf4\x09\x61\x72\xc3\x27\xe6\x89\xa1\x32\x1b\x17\xc7\x73\xcd\x93\x9f\xdc\xa3\x9f\xcd\x75\x06\xe6\xd4\x55\x8e\x8b\x1b\x66\x9f\x7e\xf9\x8d\x67\xff\xbe\xf8\xcc\xb3\xd1\x9a\xc3\x47\x31\xf4\x37\x1f\xc5\xd6\xd9\x7c\xdf\xf2\xc3\x01\x58\xda\xef\x0d\xc0\xe2\x66\xf3\xdd\x42\x4f\x46\xd0\xd5\xbf\x3d\xc8\x8f\xeb\xef\x17\xab\xd9\x3c\xe9\x96\xcb\x87\xfd\xa7\xdd\xc3\xfa\x77\x56\xfe\x69\x2d\x0b\xf7\xab\xd1\xf5\xfe\xd7\x2f\x7b\x4f\x6b\x48\x10\xe5\x77\x77\x7b\x50\xf9\x8f\xe7\xbf\xff\xf2\x90\x7c\xd4\x80\x98\x5d\xd9\x90\x8d\x36\x34\x9d\x0d\x69\x63\x43\x9a\x9e\xff\x1b\xb9\xa7\xb0\xa1\xcd\x6c\xe8\x33\x1b\x0a\x6f\x43\x6f\x6c\x30\xfc\xde\xdb\xd0\x54\x36\xf8\xd1\x86\xba\xb5\x21\x75\x36\x0c\xa3\x0d\x43\x65\x43\xe1\x6c\x30\x9d\x0d\x6d\x61\x43\xd5\xda\xe0\x52\x1b\x8a\x56\xae\xe5\x99\x0d\x5d\x61\x43\x6a\x6c\x48\x6b\x19\x83\x39\xfa\xca\x86\xae\x95\x67\xcb\xce\x86\xae\xb6\xa1\x33\x36\x14\x8d\x0d\x6d\x6f\x43\xdf\xca\x18\x55\x6a\x43\x3d\xd8\x50\x77\x36\x0c\x85\x0d\xae\xb2\xa1\xc4\xa6\x52\x7e\xf3\xb9\x0d\xbe\xb2\x61\x74\x36\x8c\xc6\x86\xb1\xb6\xc1\x30\x4f\x6b\x43\xde\xd9\xe0\xb1\xbb\x91\xf1\x99\x6b\x28\x6d\x68\x72\x1b\x8c\xb3\x21\x67\x5d\x85\x0d\xe5\x60\x43\xd6\xca\xe7\xca\xd9\xd0\x64\x72\x0d\x9f\x98\xde\x86\x16\xdb\x47\x1b\x32\x6f\x83\xcb\x6d\x28\x6a\x1b\xc6\xcc\x86\xdc\x89\x2d\xf1\xbe\x54\x7c\x91\x97\x62\x1b\xd7\x4a\xfe\x32\xb9\x3f\xeb\x6d\xf0\xa9\x0d\x39\x73\x14\x36\x74\xa5\x0d\x63\x61\xc3\x98\xca\x7c\x66\x90\xb9\x3a\x2f\x7b\x55\xe2\x7b\xec\x67\xae\xc1\x86\xc1\xd8\x30\xf0\xdd\xdb\x50\x95\xb2\x1e\xc3\x7e\xf1\xbc\x97\xfd\x6a\x4b\x1b\x7a\x1d\x3b\xee\x01\x76\xe8\x38\x43\x26\x7e\x71\xde\x86\xdc\xc8\x5a\xd8\xc3\xb1\x11\xbf\x96\xb9\xcc\xcb\xb3\xd8\xe7\x3a\x59\x6b\xdf\xd8\xd0\xd4\xb2\xef\x3e\x93\xcf\xac\xa5\x19\x64\x7f\x6a\x63\x43\xd5\xc8\x9a\xdb\x56\x9e\x63\x5f\xbb\xbd\xe7\x33\x23\xb1\x90\x0d\xf2\xe7\x75\xff\xb8\xa7\x1b\x65\x1f\xfc\x20\xeb\x6c\x6b\xf1\x77\x45\x5c\x55\xe2\x77\xdf\xd9\x30\xf6\xe2\x47\x83\xff\x88\x35\xdd\xdb\xb2\xb5\xa1\x1c\x6d\xa8\x06\x1b\xf2\x4a\x62\x92\xfb\xb0\x05\xdf\x56\xa3\xc4\x0c\x73\x61\x2f\x71\xd8\x11\x07\xbd\xc4\x20\xb6\x10\xcf\xec\x7b\xae\x7b\x95\xe2\xaf\xd6\x86\x3e\xd7\x78\x30\x92\x3b\xbe\xd4\x35\x61\x3b\xfe\x6e\xc4\xdf\x83\xdb\xf9\x7a\xc8\x25\x8f\x88\xa7\x52\xe3\xc3\x37\x62\x07\x6b\x27\xfe\x4d\x23\xfb\x43\x3c\x74\xba\xff\x23\xbe\x1b\x24\x86\x58\x5b\xd9\xdb\xe0\x5a\x59\x37\xe3\x91\x03\xec\x2f\xf7\x64\xe4\x44\xae\xbe\x37\xe2\x8f\xbc\xd5\x78\x18\x24\x57\x63\xcc\x14\x36\x14\x83\xec\x47\xef\xc5\x9e\x54\xf3\x6d\x2c\xc5\x9e\xfd\xdc\xe7\x2f\x6d\xc5\xde\x1e\x3f\xa6\x36\x64\xe0\x45\xbe\xbd\xef\x6a\x2b\x05\x4e\xc0\x46\x59\xea\x1c\xfb\x6f\xb9\x6c\x4f\x3d\x4c\x27\x93\x53\xbc\xba\x9e\x4e\x26\x57\xa7\x7a\xef\xea\x7a\x3a\x99\xbf\x12\xcb\xc9\x53\xcc\xf9\x6f\x91\x0e\xf7\xe7\x8c\x7c\xf8\x2a\x3a\xde\xb2\xf6\xf7\x78\xfd\x95\x8e\x23\xa1\xde\x7e\x3c\x06\xe7\x5f\xa1\xad\xdb\xe4\xac\xd1\x09\xbc\x74\x9b\x94\xa6\xba\x4e\x60\x98\xdb\x7d\x02\x9a\x15\xa6\x9a\xc7\xeb\xf0\xc6\xad\xf0\xca\x3f\x9e\x16\x61\x96\x55\x65\x9d\x15\x79\x66\xca\xeb\x24\x9d\x7f\x99\x4e\x1c\xf3\xfe\x25\x2e\xf0\xd7\xb8\xaa\xdb\x44\x17\x87\x51\xb7\xf1\xff\x5f\x5e\x9d\xec\xae\xcf\x70\xc2\xab\x50\x7e\x3f\x2d\x00\xc9\xcd\x28\x69\xd4\x6b\x4a\xc4\xf0\x48\x25\x4d\xc7\x4e\x42\xb4\x71\x12\x8a\xb5\xc2\x05\xff\x72\xaf\xd3\xb0\x8c\x21\x58\x08\x0c\x92\x32\x84\x7f\xa1\xf0\xec\x7a\x09\xd3\xbc\xd9\xa5\x29\xa9\x08\xf4\xa7\x99\xc2\x3b\xb0\x00\xf4\xd6\x02\xf5\x6d\xaa\x69\x3f\xc8\x18\x15\x10\xd1\x0a\xd5\x90\xf6\xce\x08\x9d\xb5\x83\x0d\x25\xdf\x9d\x0d\x55\x2f\x29\x0b\x65\xb0\xee\x4a\x53\x84\x34\x22\xdd\x81\x2c\x9e\x29\x72\x1b\xca\x62\xe7\x07\x60\xb7\x2c\x05\x6a\x47\x2f\xf0\x0e\x9d\x60\x4b\x95\x09\x9c\x00\x1b\x40\x0f\x6b\x05\x5a\x48\x9d\x7a\x0b\x61\x4e\xe0\x33\xc2\x86\x11\x0a\x8a\x10\x3c\x88\xaf\x5a\xa5\x4b\xa8\x84\x35\x74\xf8\xab\xb6\x61\x68\xe4\x7a\x3e\x48\x5a\x92\xe6\xc0\x39\x30\x8d\xef\xa1\x5c\xd6\x00\xfd\x42\x4b\xf8\x81\x3d\xaa\x53\x81\x63\xd6\xd8\x2a\x4d\xe0\x87\x8c\x74\x2e\xd5\xef\x0a\x37\xa4\x3c\x10\xdc\x3a\x81\x40\xe6\xe3\x33\x34\xcc\xbe\x03\xb5\x05\x50\xe7\x85\x6e\xa3\x5d\xd8\x94\x0b\x65\x45\x8a\x55\xfb\x72\xbe\x97\x42\xe7\x0e\x7a\xa9\x65\x4c\xa7\x14\xe5\x75\xcd\xd0\x1d\x10\x06\x64\x72\x2d\xcb\x4f\xe1\xc8\xe8\x3a\x89\x01\xdf\x8a\xff\x89\x85\xb3\x70\x74\x18\xe7\xef\x45\xa4\xc3\x51\x76\xa0\x74\x5c\x6e\x9e\xc3\xa5\xc3\x67\xbf\x1e\x9a\xce\x5a\x7e\x51\x74\x3a\xb5\x5e\x01\xca\x14\xd9\x1f\x05\xa8\xb6\x2c\xab\xac\xc9\x2f\x07\x50\xe6\xdb\x01\xca\x15\x12\xe4\xbd\x82\x50\xa3\xba\x15\xad\x02\x47\x6f\x75\x2b\xbf\x6d\x03\xab\xdf\x06\xaf\x02\x0a\xda\x8d\x44\xce\x32\x79\x06\x0d\x08\x0f\x67\xb5\x0d\xb5\x82\x11\x00\x81\x06\x00\xc4\xd0\x22\x80\x84\xf1\xc2\xe7\x00\x20\x40\x88\x26\xe5\x19\x82\x1d\x00\x01\x30\x48\xb4\x98\x98\xad\xd8\x05\x98\xa1\xc3\xa2\xed\xad\x24\x17\x7a\x95\x00\x27\x99\x00\x17\x12\x3a\xab\x64\x1e\x80\x83\x64\x6b\xb6\x9a\xd3\x09\x58\x6e\x01\x0c\x1d\xe8\x0b\x01\x07\x34\x15\xbe\x20\x71\xd0\xda\x68\x49\xf4\x54\x04\x62\x80\x45\xed\x2b\xd0\x09\xb9\x00\x1f\x3a\x30\x2b\xf4\x3e\x80\xa0\x92\xb5\xd5\x99\x8c\xc7\x33\x00\x51\xd4\x2f\xad\xac\x03\xad\x85\xcd\xa6\x92\x31\xd0\x44\x00\x05\x40\x3e\xa4\xa2\xcf\xd1\x9e\x80\x2e\x1a\x10\x10\x18\x14\x0c\x19\x67\x0b\xc8\x68\x5b\x92\xbb\x56\xd0\x02\xbc\x00\x04\xf4\x2e\x40\x8b\xdf\x52\x05\x20\xd6\x93\xf7\x62\x57\xdc\x53\xc0\x34\x15\xa0\x8f\x80\x9e\x0b\xf0\xa2\xad\x73\xd5\x2e\xac\x0d\x3f\x17\x9d\xac\x03\x2d\x86\x8f\x89\x2b\x88\x6d\xd8\x3e\xd3\x89\x2e\xee\x14\xcc\xb6\x35\x40\x31\x8a\x6e\xc6\xbf\x80\x4f\xdd\x8b\x1d\xac\x99\x35\xa0\x25\x21\x15\xc6\xe2\xfe\xcc\x89\x6e\x45\x4b\xa3\x4f\x89\xa7\x51\xb5\x3f\x5a\x35\x12\x46\x2f\x3e\x06\x88\x01\xfa\x08\x86\xbd\xec\xab\x53\xa2\x20\x36\xd1\xc3\xf8\x97\xb5\x43\x78\xc7\x71\x1f\xb5\x66\x2f\xda\x1e\x7f\x67\x4a\x38\x6f\x6a\x36\x73\x11\x90\x34\x6f\x80\xe4\x71\xeb\xed\x1c\x48\x9a\x77\x82\xe4\x59\xcb\x2f\x0a\x92\xa7\xd6\x2b\x48\x56\xa6\x7d\x0f\x48\x16\x97\x54\x71\xda\xbc\x7c\x3f\x44\xd6\x5a\xda\x47\x4e\xed\x04\x82\x8c\x6a\x38\xd2\xb1\xd6\x52\x13\x88\xe1\x73\xd3\x6b\x49\x64\x34\x85\x34\xfd\x81\x85\x5c\x4b\x5d\xc2\xbf\x51\xdd\x42\x4a\x52\x5a\x03\x6b\x3c\x63\x54\x47\xf4\xb5\x68\x00\xa0\x90\x92\x04\x28\xe4\x3e\xec\xc9\x15\x4a\x62\x19\x38\xca\x6f\xb1\x0c\x2e\xb4\x9d\xa0\xf0\xe0\x54\x07\xa2\x61\x28\x89\x79\x36\xd5\x14\x25\xfd\xd0\x91\x40\x65\x84\xde\x5e\x34\x9c\xc9\x05\xda\x2b\x2d\x9f\x49\x43\xee\xcd\xf0\x55\x25\x5a\x05\xd8\x46\xd3\xb2\x86\x4c\x61\x85\xd2\x08\x3f\x01\x29\x65\xb3\xf3\x2b\xd0\x84\x06\x43\xff\x30\x5e\xa7\x10\xc2\x78\x99\xea\x1c\x4a\x3a\x60\x2c\x53\x28\x19\xb5\xd4\x43\x8f\xc6\xb2\x7a\x10\x68\x40\x9b\xe6\xaa\x7b\xa1\x09\xf4\x28\x6b\xa4\x0c\x47\x1b\xa2\xb3\x80\x5b\xc6\xc1\x8f\x11\x5a\x8c\xd8\x66\xb4\x6d\x40\x09\xe8\x15\xce\x5a\xf5\x3d\xda\x13\xdd\x06\xd4\x44\x5a\x2a\x05\x92\xb1\xd5\x29\xfc\x03\xbf\xae\x16\xff\x45\x5f\xd6\x6a\x6f\x25\x71\x12\x61\xb9\x13\x88\x62\x0e\xd6\x56\x79\xf1\x35\x70\x14\xe3\xc3\xc9\xbf\x68\x40\xe8\x05\xfd\x58\xa8\x26\x8c\x94\x56\x0b\x4c\x1b\x2d\xcb\x47\x2d\x6d\xf1\x27\x9a\x15\x8d\x08\x3c\x0e\x5a\x4e\x33\x06\xb1\x82\xae\xec\xb7\x74\xe3\x55\xdb\xf6\x6a\xb3\x13\xff\xb0\xa6\x48\x39\x46\xe0\x9f\x31\x6a\x85\x3d\xfc\x04\x85\x46\xb8\x1e\x24\xa6\x80\x6d\xe8\xd4\x29\x55\x37\x4a\x29\x9d\xee\x3f\x30\x8c\x16\xaf\xb4\xdc\x67\x0d\x71\xdc\x51\xda\x48\xcc\xcf\xbe\x03\xf9\x11\xea\x55\x87\x52\x87\x40\x6f\x48\x8e\x42\x7d\x8d\x56\x66\x1f\x7a\xd5\xb6\x91\x52\xd5\x1e\xd6\xc8\x3e\x01\xcd\xc6\x08\x7d\x6f\x5b\x29\xe4\x23\x74\x86\x7f\x7a\xad\x1d\x72\xa5\xf2\xb1\x15\x5a\x46\x4b\x43\x45\xd4\x4d\x5c\x63\x1e\x9e\x65\xec\x28\x15\x9c\xd0\x3a\xb5\x04\x54\x86\xff\xa8\x07\xa8\xb9\x22\xb5\x94\xa7\xd4\x51\x28\x65\xc6\x1a\x6b\xd0\xda\xe5\x2d\x7d\xbd\x8f\x40\xef\x25\x8e\xfd\x31\x76\xb4\x71\x78\x30\x73\x8e\x34\xf6\x9f\xfb\x7a\xca\x38\x63\xf1\x45\x09\xe3\xd8\x6e\xa5\x8b\x22\xfd\xe3\x74\x51\x9b\x32\xad\xea\xcb\xd1\xc5\xeb\xa1\xd6\xb7\xf5\x82\xd1\x62\x10\x46\xea\x45\x63\xe6\xda\x0b\x26\x98\xd0\x78\xe8\x24\x92\xdd\x6b\x91\x4a\x40\x17\xda\x73\xad\x94\x00\x4a\x2d\x44\x63\xe2\xe4\x12\xc8\x00\x33\x89\x1e\x7b\x7e\xfa\x47\x72\xa1\x8f\x28\xaa\xd1\x7e\x80\x0c\x9a\x37\x77\x32\x7f\xec\x9f\xf5\x32\x06\x60\x14\x93\x40\xff\x20\x11\xb4\x8f\xf7\x62\x1b\x76\x03\xba\x24\x11\x1a\x9e\x00\x8f\x00\xdb\x49\x22\x0e\x83\x36\x21\xbc\x24\x30\xc9\x8f\x06\x25\xf1\x00\xf2\x41\x8b\x69\x00\xb2\x68\x15\x3c\x4a\x21\x36\x6c\x8a\xdf\xeb\xd3\x84\x02\xbc\xd1\x6d\xd4\x07\x24\x66\x6d\xf6\xfd\x7a\x94\x50\x87\x7b\xf4\xde\x94\x3a\x1c\x65\x97\x54\xc7\xc7\x9a\xe7\xd2\xea\xf0\xd9\xaf\x4f\xac\xb3\x96\x5f\x34\xb5\x4e\xad\xd7\xe4\xca\xb2\xf2\x0f\x27\x57\x9b\x16\x26\xbd\xa0\x16\x7b\x3d\x18\xfe\x86\x82\x55\xbb\x5d\x24\x10\x28\xdc\x57\xaa\xc6\xf4\x70\x64\xd4\x43\x01\x18\x11\x55\x52\x68\x97\x2b\xb2\xaf\x16\x37\x99\x16\x86\x99\x76\xcc\x62\xb3\xbf\x14\x85\x96\x69\x13\x99\xa2\x07\x45\xd0\x7a\x3d\xac\x69\x84\x05\x99\x13\xd6\x24\x98\x61\x3b\x8a\x8b\x58\xd8\xea\x6f\x30\x55\xa7\x87\x07\x28\x24\x9e\x41\xb9\xc4\x86\xb4\x36\x88\x51\x15\x43\x2b\x40\x80\xda\x8a\x6b\xe8\x44\x19\x92\x7c\x8c\x0b\xfb\x62\x33\x85\xe9\xa8\x07\x22\x14\xde\xd8\xe3\xd5\xce\x4c\x59\x68\xd4\xc2\x3b\x26\xae\x97\xf9\x23\x73\xea\x61\x4b\xa7\x87\x11\x85\x16\xad\x24\x2b\x09\xca\xf3\xb1\x3b\x85\xca\x2d\x65\xdd\xdb\x02\x15\xf6\xe5\xd9\x5e\x3b\x5a\x8c\xe1\xb5\x38\x86\xd9\xe3\xfa\x0a\x55\xad\xbd\x74\x35\x63\x21\x5a\xc9\x1e\x02\x1c\x30\x32\x0c\x0b\xe3\x53\x58\xf6\xaa\x56\xf1\x5f\x04\xb7\x54\x8b\x4f\x3d\x4c\x88\x1d\xce\x51\xf6\x2d\x36\x15\xb4\x9b\x89\xaf\xf1\x73\xa9\x76\x63\x3f\xc0\x03\xe0\xa4\x7a\x10\xc2\x7e\xb1\x07\x5e\x0f\xa1\x62\xa7\xd3\xec\x0a\xe5\x5e\x55\x2f\x0a\x24\xc6\x43\xae\x00\xa8\x6a\xa9\x57\x25\x04\x10\xa7\xda\xc9\xcc\x35\xae\x22\x98\x79\x59\x23\x4a\xc5\xa8\x1a\xdc\x2a\x25\x8a\x55\x40\x2d\xda\x56\xed\x3a\xaa\x4e\xed\x46\x29\x95\x1a\xab\x83\x02\xfc\xb9\x82\x14\x7f\x67\xa5\x56\x15\x85\xec\xf5\x9b\xaa\xe2\x30\x97\xde\x0b\x82\x87\xa3\xec\x40\xf0\xf8\x15\x8e\x73\x20\x78\xf8\xec\xd7\x83\xe0\x59\xcb\x2f\x0a\x82\xa7\xd6\x6f\x15\x46\x56\xbc\x07\x04\xeb\x3c\xbb\x1c\x08\xee\x5e\x82\x79\x3f\x0a\x92\x71\xbd\xa2\x54\xaa\x28\x80\xdc\x88\x35\x69\xa1\x67\x08\xc8\x83\x51\xa2\xb0\xd5\x56\x5c\x3c\x8a\x4e\x25\x62\xf9\x4c\x84\x39\xad\x2f\x89\xee\x18\xe9\x99\xd6\x53\x99\xb6\x9c\x3a\x91\x0f\xb1\x66\xea\xe5\x7b\x6c\x6d\x6d\xa5\x85\x4a\x85\x78\xdc\xd7\x48\x9f\x3e\xd3\x5a\xb6\xd2\x23\x4d\x3e\xd7\x7a\xfc\x48\xad\x41\x56\x52\xdf\x92\x5d\x5c\x73\xa3\xcc\x09\x0a\x8d\x7a\x94\x5a\xe8\x11\x21\x73\x53\x67\x60\x57\x3c\x96\x6b\x54\xe6\x68\xdd\xc1\xdc\x20\x85\xd3\xda\x8e\xcf\xa0\x20\x76\x80\x50\xd4\x39\x64\x29\x68\x11\x91\xa2\x16\x9d\x0f\xc2\x81\xce\xcc\x17\xeb\x7c\x5d\x1b\x68\x04\xea\xc6\x23\x64\x3d\x1a\xee\x53\x39\x9a\x8c\xc7\x81\x46\xfc\xc2\x5c\x11\x7d\x72\x3d\xd6\xa4\xfe\xcd\xe5\xbe\xe1\x20\x73\x77\x19\xee\x74\x7c\xee\x05\xe5\x63\x86\xbf\x25\x73\x8e\x02\xe5\xbd\x29\x7e\x34\xcc\x2e\xc7\x4f\xde\xc6\x3a\x97\xe4\x47\x4f\x7f\x7d\x96\x9f\xb7\xfe\xa2\x69\x7e\x66\x01\x5b\xb1\x53\x36\xef\xc8\xf3\xb2\x28\xaa\xcb\xe5\xf9\xf6\x95\xb6\x6f\x3b\x3d\x84\xb7\xc8\xc4\xd8\x01\xd1\x2c\x4f\xfb\x5d\x96\x77\x2a\xd0\x5b\xd5\x27\x64\x7b\xb9\xd7\xa4\x36\xbd\x14\x0d\xe8\x17\x38\xac\xd3\xd3\x44\xf4\x46\xa1\xdd\x24\x78\x99\x68\x8d\x8d\xd5\x5c\x32\x2c\x46\xac\x91\x8c\x8b\x7c\x3b\x88\xf6\xca\x55\xfb\x0c\x1a\xed\xf0\x6c\x97\x4b\x67\x21\x57\x2d\x05\x22\xc4\x62\x27\xd3\x06\x7b\x2b\x19\x3c\x6e\x1b\xda\x4e\xb2\x94\x8c\x1f\xb4\xbb\x44\x15\x4d\xf1\x51\x6a\x97\x01\xfe\x07\xb1\x3a\x7d\x61\xa5\x55\x44\xab\x1a\x2d\x3c\x3a\x19\x0b\x14\xcc\xb5\xe1\x1d\xab\xf1\x5a\xd6\x1d\xd7\x60\xb4\x8b\xa1\x5a\x0f\x3f\x30\x5e\xaf\x73\x81\x3a\xb5\x76\x0f\x5a\x7d\x81\xa4\xd0\x53\x4a\xe6\xea\xb5\xf3\xe0\x4b\xe1\xe5\xe3\x6c\x2e\x55\x7b\xb4\xa9\xe8\x94\xfe\xb7\x8a\x96\x83\x70\x78\x6f\x2e\x1f\x0c\xb2\xcb\xe4\xa3\xb7\x27\xcf\xe5\xf1\xc1\x93\x5f\x9f\xc5\xe7\xac\xbe\x68\x0e\x9f\x98\xbe\xcd\xe0\xf6\x3d\xe5\x4a\x95\xa6\x17\xcc\xe0\xd7\x97\x4f\xbf\xf1\x7c\xcd\x48\x0a\x37\x7a\x36\xb3\xdf\x3c\x8e\x67\x31\x5e\xa5\x7e\x2b\x4d\x3f\xc2\x09\xc2\x1c\x54\xba\x92\xa6\xa4\xee\xa0\xcd\xbf\x52\x09\x1f\xf9\x1a\xdf\x01\xd3\xf3\x8f\x78\x76\x53\xa9\xcc\x54\xa9\x49\x9a\x97\x85\xa4\x76\x3c\xdb\x2b\x84\x1c\x29\x3f\x3a\xad\xf3\xb7\x07\xdc\x90\x25\x65\x05\xa5\x42\xa9\xa9\x06\x21\x1b\x6d\x4e\x93\xc6\xb1\xdc\xa9\xf5\x6c\xc7\x28\xe1\x39\x79\xc1\x20\x1e\xc4\x17\xd2\x2c\xc5\x3e\xa7\x82\x24\xca\xe9\x4a\xe6\x01\x0e\x62\x13\x3d\x95\x39\x53\xfd\xd7\x34\x02\x0b\x11\xd6\x9c\xf4\x22\x80\x80\x5c\x1b\xe5\xa9\xbe\x50\xd0\x68\x33\x39\x96\x68\x95\x94\x2b\xa9\xbe\xe7\x16\x9b\xd6\x46\x04\x4e\x56\x49\x3a\xe6\xfa\x0e\x94\x53\x18\x00\x06\x63\x39\xe6\xc4\x5e\xfc\x80\x64\x67\x3d\xcd\x7e\x43\x79\xdb\x38\xae\x44\x40\x40\xea\x7c\x2e\xcb\x5d\xf3\xb3\xeb\x77\xe5\x68\xaa\xe5\x59\x14\x49\x8d\xbe\x4b\xd4\xc8\x98\xf8\xa1\xd6\x52\xaa\x4b\xe5\x7a\x84\x61\xaf\x8d\x56\x85\x1c\x20\x8a\xf2\x14\x21\xe2\xb5\x14\x89\x7b\x37\x68\x3f\xc4\x28\xe4\x8c\x22\x4c\x1a\x15\x58\x7d\x23\xa2\x04\x01\x17\x7b\x47\x4e\x9a\xe8\x46\xcf\x0e\x6b\x3d\x67\x2c\xd3\x5d\xa9\xb4\x6d\x22\x13\x8f\x9d\x96\x43\x50\x46\xad\xef\xa7\xe1\x23\xa3\xcd\xcd\xe8\x1b\x2d\x67\x18\xa3\x6b\xf5\x6c\xcd\x68\xa3\xb4\x95\x98\x18\xb5\x19\x8b\xd0\xea\xb5\xe1\xeb\xf4\xdc\x32\xd7\xa6\x6b\xa3\xf6\xc5\x17\x62\x34\xee\x10\x5b\x79\xaf\xfd\x2b\x8d\x59\xf6\x92\xb8\x22\x0e\xd9\xbb\x58\x4a\x6b\x79\x8a\xf0\x22\xa7\x88\x35\x62\x32\x36\x91\x3b\x6d\xc8\x16\xb2\xb7\x9d\xfa\x84\xfb\x88\xd3\x2a\x93\x75\x51\xca\x56\xfa\x02\x0d\x34\x60\xf4\x70\x20\x0a\xc8\x5e\x1a\xb9\xd0\x28\xd4\xd4\xe8\xc1\x0d\x65\x5e\xda\x4a\x4c\x41\x17\xc4\x6a\x14\xd4\xa9\x36\xbc\xb7\x2f\x77\xe8\x5e\x52\x76\x67\xfa\xde\x64\x7c\xc1\x44\x85\x62\x3c\x20\xe9\x94\x26\x2b\x7d\x2f\xd0\xe9\x8b\x22\x5a\x16\x96\xfa\x8e\x64\x35\x4a\xae\x31\x07\xeb\xfb\xff\x00\x00\x00\xff\xff\x99\xd2\x36\xfe\x00\x30\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 28672, mode: os.FileMode(436), modTime: time.Unix(1660228774, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\xb1\x0d\xc5\x20\x0c\x04\xd0\x9e\x29\x6e\x01\xa0\xff\xdb\xdc\x4f\xac\x13\x42\xb1\x11\xf1\xfe\x4a\x93\x22\xf5\x7b\x8b\xc7\xa4\x0c\xd7\xd0\x66\x8e\xf0\xbb\x94\xde\x15\x3f\x99\xdb\x66\x1a\x14\xf5\x3f\xfc\x64\x12\x75\x4d\x7d\x26\x6a\xe0\xa5\xa6\x00\x5a\x79\x02\x00\x00\xff\xff\xe6\x24\xd8\x86\x4e\x00\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 78, mode: os.FileMode(436), modTime: time.Unix(1656363775, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init.up.sql":     _000001_initUpSql,
	"000002_indexes.up.sql":  _000002_indexesUpSql,
	"000003_indexes.up.sql":  _000003_indexesUpSql,
	"000004_posts.up.sql":    _000004_postsUpSql,
	"000005_collate.up.sql":  _000005_collateUpSql,
	"000006_charset.up.sql":  _000006_charsetUpSql,
	"000007_dtupdate.up.sql": _000007_dtupdateUpSql,
	"000008_delupd.up.sql":   _000008_delupdUpSql,
	"000009_dialogs.up.sql":  _000009_dialogsUpSql,
	"bindata.go":             bindataGo,
	"migrations.go":          migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init.up.sql":     &bintree{_000001_initUpSql, map[string]*bintree{}},
	"000002_indexes.up.sql":  &bintree{_000002_indexesUpSql, map[string]*bintree{}},
	"000003_indexes.up.sql":  &bintree{_000003_indexesUpSql, map[string]*bintree{}},
	"000004_posts.up.sql":    &bintree{_000004_postsUpSql, map[string]*bintree{}},
	"000005_collate.up.sql":  &bintree{_000005_collateUpSql, map[string]*bintree{}},
	"000006_charset.up.sql":  &bintree{_000006_charsetUpSql, map[string]*bintree{}},
	"000007_dtupdate.up.sql": &bintree{_000007_dtupdateUpSql, map[string]*bintree{}},
	"000008_delupd.up.sql":   &bintree{_000008_delupdUpSql, map[string]*bintree{}},
	"000009_dialogs.up.sql":  &bintree{_000009_dialogsUpSql, map[string]*bintree{}},
	"bindata.go":             &bintree{bindataGo, map[string]*bintree{}},
	"migrations.go":          &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
